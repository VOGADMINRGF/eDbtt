import { NextResponse } from "next/server";
import fs from "node:fs";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

type Rec = {
  ts?: number;
  route?: string;
  model?: string|null;
  totalTokens?: number|null;
  ms?: number;
  ok?: boolean;
  err?: string|null;
  meta?: any;
};

export async function POST(){
  try{
    const file = process.env.VOG_USAGE_FILE || "/tmp/vog_usage.jsonl";
    if (!fs.existsSync(file)) {
      return NextResponse.json({
        ok:true, summary:{ total:0, ok:0, failed:0, totalTokens:0, avgMs:0, lastTs:null, byRoute:{} }
      }, { status:200 });
    }
    const lines = fs.readFileSync(file, "utf8").split(/\r?\n/).filter(Boolean);
    let total=0, ok=0, failed=0, totalTokens=0, totalMs=0, lastTs:number|null=null;
    const byRoute: Record<string, { total:number; ok:number; failed:number }> = {};

    for (const ln of lines) {
      total++;
      let rec: Rec = {};
      try { rec = JSON.parse(ln); } catch { /* skip */ }
      if (rec.ok) ok++; else failed++;
      if (typeof rec.totalTokens === "number") totalTokens += rec.totalTokens!;
      if (typeof rec.ms === "number") totalMs += rec.ms!;
      if (typeof rec.ts === "number") lastTs = lastTs===null ? rec.ts! : Math.max(lastTs, rec.ts!);
      const r = String(rec.route||"unknown");
      byRoute[r] = byRoute[r] || { total:0, ok:0, failed:0 };
      byRoute[r].total += 1;
      if (rec.ok) byRoute[r].ok += 1; else byRoute[r].failed += 1;
    }

    const avgMs = total ? Math.round(totalMs/total) : 0;
    return NextResponse.json({ ok:true, summary:{ total, ok, failed, totalTokens, avgMs, lastTs, byRoute } }, { status:200 });
  }catch(e:any){
    return NextResponse.json({ ok:false, error:String(e?.message||e) }, { status:200 });
  }
}
