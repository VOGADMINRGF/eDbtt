import { NextRequest, NextResponse } from "next/server";
import { analyzeContribution } from "@/features/analyze/analyzeContribution";
import { orchestrateContribution as step_analyze_multi_llm } from "@/features/ai/orchestrator_contrib";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

async function recordUsageSafe(e: {
  ts: number;
  route: string;
  userId: string | null;
  model: string | null;
  totalTokens: number | null;
  ms: number;
  ok: boolean;
  err: string | null;
  meta?: Record<string, any>;
}) {
  try {
    const mod = await import("@/lib/metrics/usage");
    const fn = (mod as any)?.recordUsage;
    if (typeof fn === "function") await fn(e);
  } catch { /* noop */ }
}

export async function POST(req: NextRequest) {
  const t0 = Date.now();
  let ok = false, err: string | null = null;
  let model: string | undefined;
  let totalTokens: number | undefined;
  let out: any = null;

  try {
    const url  = new URL(req.url);
    const mode = url.searchParams.get("mode") || (process.env.VOG_ANALYZE_MODE || "gpt");
    const body = await req.json().catch(() => ({}));
    const text = String((body as any)?.text ?? "").trim().slice(0, 8000);
    const maxClaims = Number((body as any)?.maxClaims ?? 3);

    if (!text) {
      ok = true;
      return NextResponse.json({ error: "Kein Text Ã¼bergeben.", status: 400 }, { status: 200 });
    }

    out = mode === "multi"
      ? await step_analyze_multi_llm(text, { maxClaims })
      : await analyzeContribution(text, { maxClaims });

    model       = out?._meta?.model || process.env.OPENAI_MODEL || undefined;
    totalTokens = out?._meta?.usage?.total_tokens || undefined;
    ok = true;
    return NextResponse.json(out, { status: 200 });

  } catch (e: any) {
    err = String(e?.message || e);
    out = { _meta: { mode: "error", errors: [String(err)], tookMs: Date.now() - t0 } };
    return NextResponse.json(out, { status: 200 });

  } finally {
    await recordUsageSafe({
      ts: Date.now(),
      route: "/api/contributions/analyze",
      userId: null,
      model: model || null,
      totalTokens: totalTokens || null,
      ms: Date.now() - t0,
      ok,
      err: ok ? null : err,
      meta: { source: "wrapper" },
    });
  }
}
