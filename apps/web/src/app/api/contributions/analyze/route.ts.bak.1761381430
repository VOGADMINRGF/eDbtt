// BEGIN:VOG_ANALYZE_WRAPPER
import { NextRequest, NextResponse } from "next/server";
import { recordUsage } from "@/lib/metrics/usage";
// deine eigentliche Logik:
import { analyzeContribution } from "@/features/analyze/analyzeContribution";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

export async function POST(req: NextRequest){
  const t0 = Date.now();
  let ok = false, err: any=null, out: any = null;
  let model: string|undefined;
  let totalTokens: number|undefined;

  try{
    const body = await req.json().catch(()=> ({}));
    const text = String(body?.text||"").slice(0, 8000);
    const maxClaims = Number(body?.maxClaims ?? 5);
    // eigentliche Analyse (robust, darf nie crashen)
    out = await analyzeContribution(text, { maxClaims, debug: false });
    // (optional) falls dein analyzeContribution Meta-Usage liefert:
    model = (out?._meta?.model) || undefined;
    totalTokens = (out?._meta?.usage?.total_tokens) || undefined;
    ok = true;
  }catch(e:any){
    err = e?.message||String(e);
    out = { _meta: { mode:"error", errors:[String(err)], tookMs: Date.now()-t0 } };
  }finally{
    await recordUsage({
      ts: Date.now(),
      route: "/api/contributions/analyze",
      userId: null,         // wenn du Auth hast, hier ID eintragen
      model: model||null,
      totalTokens: totalTokens||null,
      ms: Date.now()-t0,
      ok, err: ok?null:String(err||"") || null,
      meta: { source:"wrapper" }
    });
  }
  return NextResponse.json(out);
}
// END:VOG_ANALYZE_WRAPPER
