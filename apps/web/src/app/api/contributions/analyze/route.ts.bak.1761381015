import { NextRequest, NextResponse } from "next/server";
import { runModeration } from "@/lib/safety/moderation";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

type AnalyzeOut = {
  language: string|null; mainTopic: string|null; subTopics: string[];
  regionHint: string|null; claims: {text:string}[];
  organs?: any[]; trust?: any; newsroom?: any;
  weightsUpdated?: any; news: any[]; scoreHints?: any; cta: any;
  _meta: { mode:"gpt"|"ari"|"error"; errors:string[]|null; tookMs:number; gptMs?:number; ariMs?:number; gptText?:string|null };
};

function fallbackAnalyze(text:string, maxClaims:number, tookMs:number, err?:string): AnalyzeOut {
  const claims = (text? text.split(/[.!?]\s+/).filter(Boolean): [])
    .slice(0, Math.max(1, maxClaims)).map(s=>({ text: s.trim() }));
  return {
    language: null, mainTopic: null, subTopics: [], regionHint: null,
    claims, organs: [], trust: undefined, newsroom: {queries:[], angles:[], watch:[]},
    weightsUpdated: undefined, news: [], scoreHints: null, cta: null,
    _meta: { mode:"error", errors: err? [err] : ["analyzeContribution missing or failed"], tookMs }
  };
}

export async function POST(req: NextRequest){
  const t0 = Date.now();
  try{
    const body = await req.json().catch(()=>({}));
    const text = String(body?.text||"").trim();
    const maxClaims = Number(body?.maxClaims ?? 5) || 5;

    const mod = runModeration(text);
    if (!mod.allow) {
      return NextResponse.json(fallbackAnalyze(text, maxClaims, Date.now()-t0, "blocked"));
    }

    const modAnalyze = await import("@/features/analyze/analyzeContribution").catch(()=>null) as any;
    const analyzeContribution = modAnalyze?.analyzeContribution;

    if (typeof analyzeContribution === "function") {
      const out = await analyzeContribution(text, { maxClaims, context:{}, debug:false });
      if (out && typeof out === "object") {
        out._meta = { ...(out._meta||{}), tookMs: Date.now() - t0 };
        return NextResponse.json(out);
      }
    }
    return NextResponse.json(fallbackAnalyze(text, maxClaims, Date.now()-t0));
  }catch(e:any){
    return NextResponse.json(fallbackAnalyze("", 5, Date.now()-t0, String(e?.message||e)));
  }
}
