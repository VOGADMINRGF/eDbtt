import "server-only";
import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { getCol } from "@core/db/triMongo";
import { rateLimit } from "@/utils/rateLimit";

const JWT_SECRET = process.env.JWT_SECRET!;
const DAYS = Number(process.env.SESSION_TTL_DAYS ?? 7);

export async function POST(req: Request) {
  try {
    const ip = req.headers.get("x-forwarded-for") ?? "local";
    const rl = await rateLimit(`login:${ip}`, 20, 60_000);
    if (!rl.ok) return NextResponse.json({ error: "Too many attempts" }, { status: 429 });

    const { email, password } = await req.json();
    const users = await getCol("users");
    const u = await users.findOne({ email: String(email).toLowerCase() });
    if (!u) return NextResponse.json({ error: "Invalid credentials" }, { status: 401 });
    if (!u.verified) return NextResponse.json({ error: "verify_required" }, { status: 403 });

    const ok = await bcrypt.compare(password, u.passwordHash);
    if (!ok) return NextResponse.json({ error: "Invalid credentials" }, { status: 401 });

    const token = jwt.sign({ t: "session", sub: String(u._id), roles: u.roles ?? [] }, JWT_SECRET, { expiresIn: `${DAYS}d` });
    const res = NextResponse.json({ ok: true });
    res.cookies.set("session", token, {
      httpOnly: true, sameSite: "lax", secure: process.env.NODE_ENV === "production",
      path: "/", maxAge: DAYS * 24 * 3600
    });
    return res;
  } catch (e:any) {
    return NextResponse.json({ error: e?.message ?? "Internal error" }, { status: 500 });
  }
}
