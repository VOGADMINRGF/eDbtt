import { NextResponse } from "next/server";
import { piiCol } from "@core/db/triMongo";
import { hashPassword } from "@/utils/password";
import { rateLimit } from "@/utils/rateLimit";
import crypto from "crypto";

export async function POST(req: Request) {
  const ip = (req.headers.get("x-forwarded-for") ?? "local").split(",")[0].trim();
  const rl = await rateLimit(`reg:${ip}`, 10, 15*60*1000);
  if (!rl.ok) return NextResponse.json({ error: "Too many attempts. Try later." }, { status: 429 });

  const { email, password, name } = await req.json();
  if (!email || !password) return NextResponse.json({ error: "email & password required" }, { status: 400 });

  const users = await piiCol("users");
  const existing = await users.findOne({ email: String(email).toLowerCase() });
  if (existing) return NextResponse.json({ error: "Email already registered" }, { status: 409 });

  const passwordHash = await hashPassword(password);
  const verifyToken = crypto.randomBytes(24).toString("hex");

  const doc = {
    email: String(email).toLowerCase(),
    name: name || "",
    passwordHash,
    verified: false,
    verifyToken,
    role: "member",              // default Rolle
    createdAt: new Date(),
    updatedAt: new Date(),
  };
  await users.insertOne(doc);

  console.log(`[verify-link] /verify?token=${verifyToken}&email=${encodeURIComponent(email)}`);
  return NextResponse.json({ ok: true, verifyHint: "Check console for /verify token in dev." });
}
