
import { NextRequest, NextResponse } from "next/server";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

type ClarifyOut = {
  detected: { region: string|null; zeitraum: string|null; zuständigkeit: string|null };
  missing: string[];
  questions: Array<{ id:string; label:string; kind:"choice"|"text"; options?:string[] }>;
  meta?: any;
};

function safe<T=any>(s:string): T | null { try{ return JSON.parse(s) as T; } catch { return null; } }

async function runOpenAIInline(prompt: string, opts: { json?: boolean; system?: string; timeoutMs?: number } = {}){
  const key=process.env.OPENAI_API_KEY;
  const model=process.env.OPENAI_MODEL || "gpt-5-2025-08-07";
  if(!key) return { ok:false, text:"", error:"OPENAI_API_KEY missing" };
  const body:any = {
    model,
    input:String(prompt||""),
    ...(opts.system ? { instructions:String(opts.system) } : {}),
    ...(opts.json ? { text:{ format:{ type:"json_object" } } } : {})
  };
  const ctrl = (opts.timeoutMs ? AbortSignal.timeout(opts.timeoutMs) : undefined) as any;
  const res = await fetch("https://api.openai.com/v1/responses",{
    method:"POST",
    headers:{ "Authorization":`Bearer ${key}`, "Content-Type":"application/json" },
    body: JSON.stringify(body),
    signal: ctrl
  });
  if(!res.ok){
    const msg = await res.text().catch(()=> String(res.status));
    return { ok:false, text:"", error:`OpenAI ${res.status} – ${msg}` };
  }
  const data = await res.json();
  let out = "";
  if (typeof data?.text === "string") out = data.text;
  else if (Array.isArray(data?.output)) {
    out = data.output
      .flatMap((it:any)=> Array.isArray(it?.content)? it.content : [])
      .map((c:any)=> typeof c?.text === "string" ? c.text : "")
      .filter(Boolean).join("\n");
  }
  return { ok:true, text: out||"", raw:data, ms: data?.ms, usage:data?.usage };
}

export async function POST(req: NextRequest){
  const { text, claim } = await req.json().catch(()=>({}));
  const base = String(claim || text || "").slice(0,6000);
  if(!base) return NextResponse.json({ detected:{region:null,zeitraum:null,zuständigkeit:null}, missing:[], questions:[] } as ClarifyOut, {status:200});

  const sys = `Du agierst als Redakteur*in. Fasse fehlende journalistische Eckdaten als Fragen zusammen.
Rückgabe NUR als JSON:
{
  "detected": { "region": string|null, "zeitraum": string|null, "zuständigkeit": string|null },
  "missing": [ "region" | "zeitraum" | "zuständigkeit" | "quelle" | "betroffene" | "kennzahlen" ],
  "questions": [
    { "id":"region", "label":"Welche Region/Verwaltungsebene ist gemeint?", "kind":"choice",
      "options":["EU","Bund","Land","Kommune","Behörde","Stadt/Bezirk","anders"] },
    { "id":"zeitraum", "label":"Welcher Zeitraum?", "kind":"text" },
    { "id":"zuständigkeit", "label":"Wer ist zuständig (Ebene/Behörde)?", "kind":"text" }
  ]
}`;

  const prompt = "Text/Claim:\\n\"\"\""+base+"\"\"\"\\nGib NUR das JSON-Objekt zurück (keine Erklärungen).";

  const r = await runOpenAIInline(prompt, { json:true, system:sys, timeoutMs:15000 });
  if(!r.ok){
    const empty: ClarifyOut = { detected:{region:null,zeitraum:null,zuständigkeit:null}, missing:[], questions:[], meta:{ error:r.error||null } };
    return NextResponse.json(empty, {status:200});
  }
  const j = safe<ClarifyOut>(r.text?.trim()||"") || { detected:{region:null,zeitraum:null,zuständigkeit:null}, missing:[], questions:[] };
  (j as any).meta = { ...(j as any).meta, model: process.env.OPENAI_MODEL||null, tookMs: r.ms||null };
  return NextResponse.json(j, {status:200});
}
