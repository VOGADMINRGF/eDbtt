// apps/web/src/app/contributions/new/page.tsx
"use client";

import React from "react";
import StanceSpectrum from "@/components/analyze/StanceSpectrum";
import ObjectionCollector from "@/components/analyze/ObjectionCollector";
import CounterSynth from "@/components/analyze/CounterSynth";
import ClaimPanelsGate from "@/ui/ClaimPanelsGate";
import InPlaceHUD from "@/ui/InPlaceHUD";
import ClarifyPanel, { Hints } from "@/ui/ClarifyPanel";

type Claim = { text: string; confidence?: number; meta?: any };

export default function ContributionNewPage() {
  // Schritt 1: Beitrag
  const [text, setText] = React.useState<string>(
    typeof window !== "undefined"
      ? (new URLSearchParams(window.location.search).get("text") ?? "")
      : ""
  );

  // Ergebnis
  const [claims, setClaims] = React.useState<Claim[]>([]);
  const [activeClaimIdx, setActiveClaimIdx] = React.useState<number>(0);

  // Panels erst nach explizitem Klick
  const [showPanels, setShowPanels] = React.useState(false);

  // UX / HUD
  const [analyzing, setAnalyzing] = React.useState<boolean>(false);
  const [hud, setHud] = React.useState<string[]>([]);
  const [errorMsg, setErrorMsg] = React.useState<string | null>(null);

  // Schritt 2: Klären – Hints
  const [hints, setHints] = React.useState<Hints>({});
  const [hintsTouched, setHintsTouched] = React.useState<boolean>(false);

  // Guards
  const activeClaim: Claim | null = claims[activeClaimIdx] ?? null;
  const canShowPanels = !!(showPanels && !analyzing && activeClaim?.text);

  // Index einklemmen (stabil)
  React.useEffect(() => {
    if (activeClaimIdx > claims.length - 1) {
      setActiveClaimIdx(Math.max(0, claims.length - 1));
    }
  }, [claims.length, activeClaimIdx]);

  function pushHud(line: string) {
    setHud((h) => [...h.slice(-6), line]);
  }

  // Auto-Hints (sanft): nur wenn Nutzer*in nicht selbst editiert hat
  React.useEffect(() => {
    if (hintsTouched) return;
    const t = (text||"").trim();
    if (t.length < 60) return; // erst ab etwas Substanz
    const ctrl = new AbortController();
    const timer = setTimeout(async () => {
      try{
        const res = await fetch("/api/quality/clarify", {
          method:"POST",
          headers:{ "content-type":"application/json" },
          body: JSON.stringify({ text: t }),
          signal: ctrl.signal
        });
        const j = await res.json().catch(()=>({}));
        const h = (j?.hints && typeof j.hints==="object") ? j.hints : {};
        // sanft mergen: nur leere Felder ersetzen
        const merged: Hints = {
          level: hints.level ?? h.level,
          region: hints.region ?? h.region,
          timeframe: hints.timeframe ?? h.timeframe,
          audience: hints.audience ?? h.audience,
          stance: hints.stance ?? h.stance,
          other: { ...(hints.other||{}), ...(h.other||{}) }
        };
        setHints(merged);
        if (Object.keys(h||{}).length) pushHud("Klären: Vorschläge übernommen (optional).");
      }catch(e:any){
        /* still & friendly */
      }
    }, 700); // leichte Debounce
    return ()=>{ clearTimeout(timer); ctrl.abort(); };
  }, [text, hintsTouched]); // nur wenn Text sich ändert und hints nicht berührt wurden

  async function runAnalysis() {
    const t0 = Date.now();
    setAnalyzing(true);
    setErrorMsg(null);
    setClaims([]);
    setActiveClaimIdx(0);
    setShowPanels(false);
    setHud([]);

    try {
      pushHud("Schritt 1 → Text prüfen …");
      const payload: any = {
        text: String(text || "").slice(0, 8000),
        maxClaims: 4,
        hints
      };

      pushHud("Schritt 2 → Modelle orchestrieren & Claims extrahieren …");
      const res = await fetch("/api/contributions/analyze?mode=multi&clarify=1", {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify(payload),
      });

      const j = await res.json().catch(() => ({} as any));

      const apiClaims: Claim[] = Array.isArray(j?.claims) ? j.claims : [];
      const cleaned = apiClaims
        .map((c) => ({
          text: String((c as any)?.text ?? "").trim(),
          confidence: (c as any)?.confidence,
          meta: (c as any)?.meta,
        }))
        .filter((c) => c.text.length > 0);

      if (cleaned.length === 0) {
        if (text.trim()) {
          cleaned.push({ text: text.trim() });
          pushHud("Hinweis: Kein strukturierter Claim gefunden – Fallback verwendet.");
        } else {
          pushHud("Hinweis: Kein Inhalt – bitte Text eingeben.");
        }
      }

      setClaims(cleaned);
      setActiveClaimIdx(0);

      const took = ((Date.now() - t0) / 1000).toFixed(1);
      pushHud(`Fertig: ${cleaned.length} Claim(s) · ${took}s`);
    } catch (e: any) {
      const msg = String(e?.message || e);
      setErrorMsg(msg);
      pushHud("Fehler: " + msg);
    } finally {
      setAnalyzing(false);
    }
  }

  function goQuick() {
    const claimText = (activeClaim?.text || text || "").slice(0, 500);
    const u = new URL("/statements/new", window.location.origin);
    if (claimText) u.searchParams.set("text", claimText);
    window.location.href = u.toString();
  }

  // Hints-Change wrapper: markiert als "Nutzer hat editiert"
  function onHintsChange(h:Hints){
    setHintsTouched(true);
    setHints(h);
  }

  return (
    <div className="container-vog">
      <h1 className="vog-head mb-4">Beitrag erstellen &amp; analysieren</h1>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Linke Spalte */}
        <div className="lg:col-span-2 space-y-4">
          <div className="vog-card p-4 space-y-3">
            <div className="text-[13px] text-slate-600 font-medium">Schritt 1: Beitrag</div>
            <textarea
              className="w-full min-h-[200px] rounded-2xl border p-3"
              placeholder="Schreibe deinen Beitrag/These…"
              value={text}
              onChange={(e) => setText(e.target.value)}
            />

            {/* Schritt 2: Klären – optional, mit sanften Auto-Vorschlägen */}
            <ClarifyPanel hints={hints} onChange={onHintsChange} />

            {/* Inline-Fortschritt (Chat-Feeling) */}
            <InPlaceHUD log={hud} analyzing={analyzing} label="Analyse" />

            <div className="flex gap-2 items-center">
              <button
                className="vog-btn-pri"
                onClick={runAnalysis}
                disabled={!text || analyzing}
              >
                {analyzing ? "Analysiere…" : "Analyse starten"}
              </button>
              <button
                className="vog-btn"
                onClick={goQuick}
                disabled={!text}
                title="Direkt mit dem ersten Claim weiter"
              >
                Schnell-Flow
              </button>
            </div>

            {/* Fehler freundlich anzeigen */}
            {errorMsg && <div className="text-sm text-red-600">{errorMsg}</div>}

            {/* Claim-Auswahl (falls mehrere) */}
            {claims.length > 1 && (
              <div className="pt-2">
                <div className="text-xs text-slate-500 mb-1">Gefundene Claims</div>
                <div className="flex flex-wrap gap-2">
                  {claims.map((c, i) => (
                    <button
                      key={i}
                      className={"vog-chip " + (i === activeClaimIdx ? "ring-2 ring-sky-400" : "")}
                      onClick={() => setActiveClaimIdx(i)}
                      title={c.text}
                    >
                      Claim {i + 1}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Schritt 3: Panels erst auf Klick */}
            {claims.length > 0 && !showPanels && (
              <div className="pt-2">
                <button className="vog-btn" onClick={() => setShowPanels(true)}>
                  Schritt 3: Vertiefen – Alternativen, Einwände & Essenz anzeigen
                </button>
              </div>
            )}
          </div>

          {/* Gated Panels */}
          <ClaimPanelsGate show={canShowPanels}>
            <>
              <StanceSpectrum claimText={activeClaim?.text || ""} />
              <ObjectionCollector />
              <CounterSynth text={activeClaim?.text || ""} />
            </>
          </ClaimPanelsGate>
        </div>

        {/* Rechte Spalte: dezent */}
        <div className="space-y-3">
          <div className="vog-card p-4 text-sm">
            <div className="font-medium mb-1">Hinweis</div>
            Du kannst jederzeit abbrechen – <b>eDebatte</b> unterstützt auf Wunsch
            Redaktion &amp; Belege. Präzisierungen sind freiwillig.
          </div>
        </div>
      </div>
    </div>
  );
}
