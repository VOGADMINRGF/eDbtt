"use client";

import React from "react";
import InPlaceHUD from "@/ui/InPlaceHUD";
import ClarifyPanel, { Hints } from "@/ui/ClarifyPanel";
// Advanced (standardmäßig ausgeblendet)
import StanceSpectrum from "@/components/analyze/StanceSpectrum";
import ObjectionCollector from "@/components/analyze/ObjectionCollector";
import CounterSynth from "@/components/analyze/CounterSynth";

type Claim = { text: string; confidence?: number; meta?: any };

export default function ContributionNewPage() {
  const [text, setText] = React.useState<string>(
    typeof window !== "undefined"
      ? (new URLSearchParams(window.location.search).get("text") ?? "")
      : ""
  );

  const [hints, setHints] = React.useState<Hints>({});
  const [claims, setClaims] = React.useState<Claim[]>([]);
  const [activeClaimIdx, setActiveClaimIdx] = React.useState<number>(0);

  const [analyzing, setAnalyzing] = React.useState<boolean>(false);
  const [hud, setHud] = React.useState<string[]>([]);
  const [errorMsg, setErrorMsg] = React.useState<string | null>(null);

  const [showAdvanced, setShowAdvanced] = React.useState<boolean>(false);

  const activeClaim = claims[activeClaimIdx] ?? null;
  const canShowSummary = !!activeClaim && !analyzing;

  function pushHud(line: string) {
    setHud((h) => [...h.slice(-6), line]);
  }

  async function runAnalysis() {
    const t0 = Date.now();
    setAnalyzing(true); setErrorMsg(null); setClaims([]); setActiveClaimIdx(0); setHud([]); setShowAdvanced(false);

    try {
      pushHud("Schritt 1 → Text prüfen …");
      const payload = { text: String(text || "").slice(0,8000), maxClaims: 4, hints };

      pushHud("Schritt 2 → Modelle orchestrieren & Claims extrahieren …");
      const res = await fetch("/api/contributions/analyze?mode=multi&clarify=1", {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify(payload),
      });
      const j = await res.json().catch(()=>({}));

      const apiClaims: Claim[] = Array.isArray(j?.claims) ? j.claims : [];
      const cleaned = apiClaims
        .map((c:any)=>({ text:String(c?.text??"").trim(), confidence:c?.confidence, meta:c?.meta }))
        .filter((c:Claim)=>c.text.length>0);

      if(cleaned.length===0){
        if(text.trim()){
          cleaned.push({ text: text.trim() });
          pushHud("Hinweis: Kein strukturierter Claim gefunden – Fallback verwendet.");
        }else{
          pushHud("Hinweis: Kein Inhalt – bitte Text eingeben.");
        }
      }

      setClaims(cleaned);
      setActiveClaimIdx(0);

      pushHud(`Fertig: ${cleaned.length} Claim(s) erkannt · ${((Date.now()-t0)/1000).toFixed(1)}s`);
    } catch(e:any){
      const msg = String(e?.message||e);
      setErrorMsg(msg); pushHud("Fehler: "+msg);
    } finally {
      setAnalyzing(false);
    }
  }

  function goQuick() {
    const claimText = (activeClaim?.text || text || "").slice(0, 500);
    const u = new URL("/statements/new", window.location.origin);
    if (claimText) u.searchParams.set("text", claimText);
    window.location.href = u.toString();
  }

  return (
    <div className="container-vog">
      <h1 className="vog-head mb-4">Beitrag erstellen &amp; analysieren</h1>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-4">
          {/* Schritt 1 – Beitrag */}
          <div className="vog-card p-4 space-y-3">
            <div className="text-slate-500 text-sm">Schritt 1: Beitrag</div>
            <textarea
              className="w-full min-h-[220px] rounded-2xl border p-3"
              placeholder="Schreibe deinen Beitrag/These…"
              value={text}
              onChange={(e) => setText(e.target.value)}
            />

            <ClarifyPanel text={text} value={hints} onChange={setHints} />
            <InPlaceHUD log={hud} analyzing={analyzing} />

            <div className="flex gap-2 items-center">
              <button className="vog-btn-pri" onClick={runAnalysis} disabled={!text || analyzing}>
                {analyzing ? "Analysiere…" : "Analyse starten"}
              </button>
              <button className="vog-btn" onClick={goQuick} disabled={!text} title="Direkt mit dem ersten Claim weiter">
                Schnell-Flow
              </button>
            </div>

            {errorMsg && <div className="text-sm text-red-600">{errorMsg}</div>}

            {/* Claims sichtbar mit Vorschau */}
            {claims.length>0 && (
              <div className="pt-3 space-y-2">
                <div className="text-xs text-slate-500">Gefundene Claims</div>
                <div className="space-y-2">
                  {claims.map((c, i)=>(
                    <button key={i} onClick={()=>setActiveClaimIdx(i)}
                      className={"w-full text-left vog-chip !justify-start " + (i===activeClaimIdx ? "ring-2 ring-sky-400" : "")}>
                      <span className="font-semibold mr-2">Claim {i+1}</span>
                      <span className="truncate">{c.text}</span>
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Schritt 2 – Zusammenfassung & Nächste Schritte */}
          {canShowSummary && (
            <div className="vog-card p-4 space-y-3">
              <div className="text-slate-500 text-sm">Schritt 2: Zusammenfassung</div>
              <div>
                <div className="font-semibold mb-1">Ausgewählter Claim</div>
                <div className="text-slate-700">{activeClaim!.text}</div>
              </div>

              {/* Kurze Lückenprüfung */}
              <div className="text-sm text-slate-600">
                {(!hints.level || (hints.regions||[]).length===0 || !hints.timeframe) ? (
                  <>Fehlen Angaben? Ebene/Region/Zeitraum kannst du oben ergänzen. Alles freiwillig.</>
                ) : <>Danke – Angaben vollständig.</>}
              </div>

              <div className="flex flex-wrap gap-2">
                <button className="vog-btn-pri" onClick={goQuick}>Weiter: Statement erstellen</button>
                <button className="vog-btn" onClick={()=>setShowAdvanced(s=>!s)}>
                  {showAdvanced ? "Erweiterte Analyse ausblenden" : "Erweiterte Analyse öffnen"}
                </button>
              </div>
            </div>
          )}

          {/* Schritt 3 – Erweiterte Analyse (optional) */}
          {showAdvanced && activeClaim && !analyzing && (
            <div className="space-y-4">
              <div className="vog-card p-4"><StanceSpectrum claimText={activeClaim.text} /></div>
              <div className="vog-card p-4"><ObjectionCollector /></div>
              <div className="vog-card p-4"><CounterSynth text={activeClaim.text} /></div>
            </div>
          )}
        </div>

        {/* Rechte Spalte leer gehalten – die frühere „Aktuelle Recherche“ ist bewusst entfernt */}
        <div className="space-y-3">
          <div className="vog-card p-4 text-sm">
            <div className="font-semibold mb-1">Hinweis</div>
            Du kannst jederzeit abbrechen – <b>eDebatte</b> übernimmt auf Wunsch Redaktion &amp; Belege.
            Präzisierungen sind freiwillig.
          </div>
        </div>
      </div>
    </div>
  );
}
