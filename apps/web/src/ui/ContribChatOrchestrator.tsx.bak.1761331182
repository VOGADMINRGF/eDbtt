"use client";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { createPortal } from "react-dom";
import InlineAnalyzeFeed, { FeedItem } from "./InlineAnalyzeFeed";

function findEditor(): HTMLTextAreaElement|null {
  const ta = document.querySelector("textarea");
  return ta as HTMLTextAreaElement | null;
}
function ensureMountAfter(el: HTMLElement, id="vog-inline-feed-mount"): HTMLElement {
  let host = document.getElementById(id);
  if (!host) {
    host = document.createElement("div");
    host.id = id;
    host.style.marginTop = "8px";
    el.insertAdjacentElement("afterend", host);
  }
  return host;
}

export default function ContribChatOrchestrator(){
  const [items, setItems] = useState<FeedItem[]>([]);
  const [mountedEl, setMountedEl] = useState<HTMLElement|null>(null);
  const on = useRef(false);

  // Mount unter dem Editor vorbereiten
  useEffect(()=>{
    const ta = findEditor();
    if (!ta) return;
    const host = ensureMountAfter(ta);
    setMountedEl(host);
  },[]);

  // Klick auf "Analysieren/Analyse starten" abfangen
  useEffect(()=>{
    if (on.current) return;
    const btn = Array.from(document.querySelectorAll("button,a"))
      .find(el=>/analysieren|analyse starten/i.test(el.textContent||""));
    if (!btn) return;
    on.current = true;
    const handler = async (e: Event)=>{
      e.preventDefault();
      const ta = findEditor();
      const text = ta?.value?.trim() || "";
      if (!text) return;

      setItems([{ type:"step", text:"Starte Analyse…" }]);

      // 1) Preflight
      setItems(prev=>[...prev, { type:"step", text:"Prüfe ähnliche Inhalte & poliere Formulierung…" }]);
      let preflight: any = null;
      try{
        preflight = await fetch("/api/preflight", { method:"POST", headers:{ "content-type":"application/json" }, body: JSON.stringify({ text }) })
          .then(r=>r.json());
        const sim = preflight?.similar?.kind;
        if (sim==="verified") {
          setItems(prev=>[...prev, { type:"success", text:`Verifizierter Treffer gefunden: ${preflight.similar?.stmt?.title}` }]);
        } else if (sim==="cluster") {
          const titles = (preflight.similar?.top||[]).map((t:any)=>t.title).join(" · ");
          setItems(prev=>[...prev, { type:"info", text:`Ähnliche Statements vorhanden: ${titles}` }]);
        } else {
          setItems(prev=>[...prev, { type:"info", text:"Keine direkten Duplikate." }]);
        }
        if (preflight?.polish?.improved) {
          setItems(prev=>[...prev, { type:"success", text:`Polished: ${preflight.polish.improved}` }]);
        }
      }catch(e:any){
        setItems(prev=>[...prev, { type:"error", text:`Preflight fehlgeschlagen: ${String(e?.message||e)}` }]);
      }

      // 2) Claims extrahieren (robuste Route)
      setItems(prev=>[...prev, { type:"step", text:"Extrahiere Claims…" }]);
      try{
        const res = await fetch("/api/contributions/analyze?mode=multi&clarify=1", {
          method:"POST", headers:{ "content-type":"application/json" },
          body: JSON.stringify({ text, maxClaims: 5 })
        });
        const data = await res.json();
        const claims = Array.isArray(data?.claims) ? data.claims.map((c:any)=>String(c?.text||"")).filter(Boolean) : [];
        if (!claims.length) {
          setItems(prev=>[...prev, { type:"error", text:"Keine Claims erkannt. Bitte präziser formulieren (Ort/Zeitraum/Betroffene)." }]);
          return;
        }
        setItems(prev=>[...prev, { type:"success", text:`${claims.length} Claim(s) erkannt.` }]);
        setItems(prev=>[...prev, { type:"choices",
          title: "Wähle Haupt-Claim",
          items: claims,
          onPick: (i:number)=>{
            setItems(p=>[...p, { type:"step", text:`Haupt-Claim gesetzt: ${claims[i]}` }]);
            // Optional: hier Alternativen/Einwände nachschalten
            setItems(p=>[...p, { type:"info", text:"Als Nächstes: Alternativen (Lager-Spektrum) & Einwände/Essenz." }]);
          }
        } as any]);
      }catch(e:any){
        setItems(prev=>[...prev, { type:"error", text:`Claims fehlgeschlagen: ${String(e?.message||e)}` }]);
      }
    };
    btn?.addEventListener("click", handler);
    return ()=> btn?.removeEventListener("click", handler);
  },[]);

  if (!mountedEl) return null;
  return createPortal(<InlineAnalyzeFeed items={items} />, mountedEl);
}
