"use client";
import React from "react";
import ChoiceBadge from "./gamify/ChoiceBadge";

export type ClarifySuggestions = { level?: "EU"|"Bund"|"Land"|"Kommune"|null; regionGuess?: string|null; period?: "aktuell"|"12m"|"5y"|"seit1990"|null; };
export type ClarifyAnswers     = { level?: string|null; region?: string|null; period?: string|null; };

export default function ClarifyPanel({suggestions,value,onChange}:{suggestions:ClarifySuggestions|null; value:ClarifyAnswers; onChange:(v:ClarifyAnswers)=>void;}) {
  const set = (patch:Partial<ClarifyAnswers>) => onChange({...value,...patch});
  const [rOpen,setROpen]=React.useState(false), [pOpen,setPOpen]=React.useState(false);
  const lvl=value.level ?? suggestions?.level ?? null;
  const reg=value.region ?? suggestions?.regionGuess ?? "";
  const per=value.period ?? suggestions?.period ?? null;

  return (
    <div className="space-y-5">
      {/* Ebene */}
      <div>
        <div className="text-xs text-slate-500 mb-1">EBENE/ZUSTÄNDIGKEIT</div>
        <div className="flex flex-wrap gap-2">
          {[["EU","🇪🇺"],["Bund","🇩🇪"],["Land","🏴"],["Kommune","🏙️"]].map(([k,ic])=>(
            <ChoiceBadge key={k} icon={String(ic)} label={String(k)} active={lvl===k} onClick={()=>set({level:String(k)})}/>
          ))}
          <ChoiceBadge icon="✨" label="Sonstiges…" active={!!value.level && !["EU","Bund","Land","Kommune"].includes(value.level)} onClick={()=>set({level:value.level??"Sonstiges"})}/>
          <button className="text-xs underline decoration-dotted ml-2 text-slate-500" type="button" onClick={()=>set({level:null})}>Überspringen</button>
        </div>
        {value.level && !["EU","Bund","Land","Kommune"].includes(value.level) && (
          <input className="mt-2 w-full border rounded-xl px-3 py-2"
                 placeholder="Ebene präzisieren (z. B. Verband, Hochschulrat …)"
                 value={value.level} onChange={e=>set({level:e.target.value})}/>
        )}
      </div>

      {/* Region */}
      <div>
        <div className="text-xs text-slate-500 mb-1">ORT/REGION</div>
        <div className="flex flex-wrap gap-2">
          <ChoiceBadge icon="🗺️" label="Bundesweit" active={reg==="Bundesweit"} onClick={()=>set({region:"Bundesweit"})}/>
          {suggestions?.regionGuess && suggestions.regionGuess!=="Bundesweit" && (
            <ChoiceBadge icon="📍" label={suggestions.regionGuess!} active={reg===suggestions.regionGuess} onClick={()=>set({region:suggestions.regionGuess!})}/>
          )}
          <ChoiceBadge icon="✏️" label="Stadt/Region…" active={rOpen || (!!reg && reg!=="Bundesweit" && reg!==suggestions?.regionGuess)} onClick={()=>setROpen(v=>!v)}/>
          <button className="text-xs underline decoration-dotted ml-2 text-slate-500" type="button" onClick={()=>{set({region:null}); setROpen(false);}}>Überspringen</button>
        </div>
        {(rOpen || (!!reg && reg!=="Bundesweit" && reg!==suggestions?.regionGuess)) && (
          <input className="mt-2 w-full border rounded-xl px-3 py-2" placeholder="z. B. Berlin, München, Kreis XY …"
                 value={rOpen? (value.region??"") : reg} onChange={e=>set({region:e.target.value})}/>
        )}
      </div>

      {/* Zeitraum */}
      <div>
        <div className="text-xs text-slate-500 mb-1">ZEITRAUM</div>
        <div className="flex flex-wrap gap-2">
          {[
            ["aktuell","🕒 Aktuell"],["12m","📆 Letzte 12 Monate"],["5y","🗓️ Letzte 5 Jahre"],["seit1990","📜 Seit 1990"]
          ].map(([k,l])=>(
            <ChoiceBadge key={k} icon={l.split(" ")[0]} label={l.split(" ").slice(1).join(" ")} active={per===k} onClick={()=>set({period:String(k)})}/>
          ))}
          <ChoiceBadge icon="✏️" label="Sonstiges…" active={pOpen || (!!per && !["aktuell","12m","5y","seit1990"].includes(String(per)))} onClick={()=>setPOpen(v=>!v)}/>
          <button className="text-xs underline decoration-dotted ml-2 text-slate-500" type="button" onClick={()=>{set({period:null}); setPOpen(false);}}>Überspringen</button>
        </div>
        {(pOpen || (!!per && !["aktuell","12m","5y","seit1990"].includes(String(per)))) && (
          <input className="mt-2 w-full border rounded-xl px-3 py-2" placeholder="z. B. 2015–2018, nach 2020 …"
                 value={pOpen? (value.period??"") : String(per??"")} onChange={e=>set({period:e.target.value})}/>
        )}
      </div>
    </div>
  );
}
