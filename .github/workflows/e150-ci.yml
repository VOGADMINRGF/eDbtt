name: E150 CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      mongo:
        image: mongo:6
        ports: [ "27017:27017" ]
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'" --health-interval=10s
      redis:
        image: redis:7-alpine
        ports: [ "6379:6379" ]
      neo4j:
        image: neo4j:5.21
        ports: [ "7474:7474", "7687:7687" ]
        env:
          NEO4J_AUTH: neo4j/test1234
          NEO4J_PLUGINS: '["apoc","graph-data-science"]'
          NEO4J_dbms_security_procedures_unrestricted: "apoc.* , gds.*"
          NEO4J_dbms_security_procedures_allowlist: "apoc.* , gds.*"
    steps:
      - uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json

      - name: Env
        run: |
          cp .env.example .env || true
          echo "MONGODB_URI=mongodb://localhost:27017" >> .env
          echo "MONGODB_DB=vog" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "JWT_SECRET=$(openssl rand -hex 16)" >> .env
          echo "NEO4J_URL=bolt://localhost:7687" >> .env

      - name: npm ci (root)
        run: npm ci

      - name: Typecheck
        run: npm run typecheck --workspaces --if-present

      - name: Lint
        run: npm run lint --workspaces --if-present

      - name: Unit tests (coverage≥85%)
        run: npm run test:ci --workspaces --if-present

      - name: Build web
        run: npm run build --workspace=apps/web

      - name: SAST (semgrep)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci

      - name: Secrets scan (gitleaks)
        uses: zricethezav/gitleaks-action@v2

      - name: Docker build (non-root)
        run: |
          docker build -f apps/web/Dockerfile -t vog-web:ci .
          docker run --rm --entrypoint id vog-web:ci -u

      - name: Container scan (trivy)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: vog-web:ci
          severity: CRITICAL,HIGH
          exit-code: '1'
          vuln-type: 'os,library'

  zap-baseline:
    runs-on: ubuntu-latest
    needs: build-test-scan
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      # Optional: eigenes .env für den Web-Container, falls compose das liest
      - name: Prepare .env.ci
        run: |
          cp .env.example .env.ci || true
          echo "NODE_ENV=production" >> .env.ci
          echo "PORT=3000" >> .env.ci
          echo "MONGODB_URI=mongodb://localhost:27017" >> .env.ci
          echo "MONGODB_DB=vog" >> .env.ci
          echo "REDIS_URL=redis://localhost:6379" >> .env.ci
          echo "JWT_SECRET=$(openssl rand -hex 16)" >> .env.ci
          echo "NEO4J_URL=bolt://localhost:7687" >> .env.ci

      # App + Dependencies hochfahren (erwartet services: web, mongo, redis, neo4j in docker-compose.yml)
      - name: Start app via docker compose
        run: |
          docker compose --env-file ./.env.ci up -d web mongo redis neo4j
          echo "Waiting for web to be healthy..."
          for i in {1..40}; do
            if curl -fsS http://localhost:3000/api/health || curl -fsS http://localhost:3000/ > /dev/null; then
              echo "Web is up"; break
            fi
            sleep 3
          done
          curl -fsS http://localhost:3000/ >/dev/null || (echo "Web not reachable" && docker compose logs web && exit 1)

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -m 5'
          # Artefakte
          allow_issue_writing: false
          # HTML Report wird als artifact ausgegeben
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZAP HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: |
            report_html.html
            owasp-zap*/*.html
            owasp-zap*/*.log
          if-no-files-found: warn

      - name: Docker Compose logs (on failure)
        if: failure()
        run: |
          docker compose ps
          docker compose logs --no-color web mongo redis neo4j | tail -n 2000
