diff --git a/.DS_Store b/.DS_Store
index 0c15cbba..65a07232 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/apps/web/package.json b/apps/web/package.json
index 3d2ff71f..fa39f48b 100644
--- a/apps/web/package.json
+++ b/apps/web/package.json
@@ -8,7 +8,7 @@
   },
   "scripts": {
     "prisma:generate": "node ./scripts/prisma-generate.mjs",
-    "build": "pnpm --filter @vog/ui run build && pnpm run prisma:generate && next build",
+    "build": "next build",
     "dev": "pnpm --filter @vog/ui run build && next dev",
     "start": "next start -p 3000",
     "lint": "next lint",
@@ -41,4 +41,4 @@
     "eslint-config-next": "15.3.2",
     "typescript": "^5.9.2"
   }
-}
+}
\ No newline at end of file
diff --git a/apps/web/scripts/core.ensureIndexes.ts b/apps/web/scripts/core.ensureIndexes.ts
index b040dfff..13a8bdd4 100644
--- a/apps/web/scripts/core.ensureIndexes.ts
+++ b/apps/web/scripts/core.ensureIndexes.ts
@@ -56,7 +56,7 @@ async function main() {
 
   // Optional: Legacy-Collections via triMongo (nur wenn vorhanden)
   try {
-    const tri = await import("../src/utils/triMongo");
+    const tri = await import("../../core/db/triMongo");
     const statements = await tri.coreCol("statements").catch(() => null);
     if (statements?.createIndexes) {
       console.log("‚Üí indexing legacy 'statements' ‚Ä¶");
diff --git a/apps/web/scripts/prisma-generate.mjs b/apps/web/scripts/prisma-generate.mjs
deleted file mode 100644
index ef7ac75d..00000000
--- a/apps/web/scripts/prisma-generate.mjs
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/usr/bin/env node
-import { existsSync } from "node:fs";
-import { execSync } from "node:child_process";
-import { fileURLToPath } from "node:url";
-import path from "node:path";
-
-const here = path.dirname(fileURLToPath(import.meta.url));
-
-/**
- * Suchreihenfolge (vom wahrscheinlichsten Pfad nach weniger wahrscheinlichen):
- * 1) <repo-root>/prisma/web/schema.prisma
- * 2) apps/web/prisma/schema.prisma
- * 3) apps/core/db/prisma/schema.prisma
- * 4) <repo-root>/prisma/schema.prisma
- */
-const candidates = [
-  path.join(here, "..", "..", "..", "prisma", "web", "schema.prisma"),
-  path.join(here, "..", "prisma", "schema.prisma"),
-  path.join(here, "..", "..", "core","db", "prisma", "schema.prisma"),
-  path.join(here, "..", "..", "..", "prisma", "schema.prisma"),
-];
-
-const schema = candidates.find((p) => existsSync(p));
-
-if (!schema) {
-  console.log("‚ÑπÔ∏è  No Prisma schema found for apps/web ‚Äì skipping generate.");
-  process.exit(0);
-}
-
-console.log("üîß Generating Prisma client from:", schema);
-
-// Erst Workspace-Exec (nutzt deine Monorepo-Deps), Fallback auf dlx
-try {
-  execSync(`pnpm -w exec prisma generate --schema "${schema}"`, {
-    stdio: "inherit",
-    env: process.env,
-  });
-} catch (e) {
-  console.warn("‚ö†Ô∏è  pnpm -w exec prisma failed, falling back to pnpm dlx ‚Ä¶");
-  execSync(`pnpm dlx prisma generate --schema "${schema}"`, {
-    stdio: "inherit",
-    env: process.env,
-  });
-}
diff --git a/apps/web/scripts/tokens.ensureIndexes.ts b/apps/web/scripts/tokens.ensureIndexes.ts
index c3fe4fca..794e7b79 100644
--- a/apps/web/scripts/tokens.ensureIndexes.ts
+++ b/apps/web/scripts/tokens.ensureIndexes.ts
@@ -15,7 +15,7 @@ const candidates = [
 for (const p of candidates) if (existsSync(p)) { config({ path: p, override: false }); break; }
 
 async function run() {
-  const { piiCol } = await import("../src/utils/triMongo");
+  const { piiCol } = await import("@core/triMongo");
   const col = await piiCol<any>("tokens");
 
   // Einzel-Token-Lookup & Cleanup
diff --git a/apps/web/scripts/votes.ensureIndexes.ts b/apps/web/scripts/votes.ensureIndexes.ts
index c696baf4..fe419da2 100644
--- a/apps/web/scripts/votes.ensureIndexes.ts
+++ b/apps/web/scripts/votes.ensureIndexes.ts
@@ -18,7 +18,7 @@ for (const p of candidates) {
 
 async function run() {
   // triMongo NACH dem env-load importieren (RELATIVER Pfad, kein "@/")
-  const { votesCol } = await import("../src/utils/triMongo");
+  const { votesCol } = await import("@core/triMongo");
   const col = await votesCol("votes");
 
   // --- UNIQUE ---
diff --git a/apps/web/src/app/admin/orgs/delete/route.ts b/apps/web/src/app/admin/orgs/delete/route.ts
index 0c08c46f..bcfb8ce8 100644
--- a/apps/web/src/app/admin/orgs/delete/route.ts
+++ b/apps/web/src/app/admin/orgs/delete/route.ts
@@ -1,5 +1,5 @@
 import { NextRequest, NextResponse } from "next/server";
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
 export async function POST(req: NextRequest) {
diff --git a/apps/web/src/app/admin/orgs/list/route.ts b/apps/web/src/app/admin/orgs/list/route.ts
index 8e75185e..5863726d 100644
--- a/apps/web/src/app/admin/orgs/list/route.ts
+++ b/apps/web/src/app/admin/orgs/list/route.ts
@@ -1,5 +1,5 @@
 import { NextResponse } from "next/server";
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 
 export async function GET() {
   const col = await coreCol<any>("orgs");
diff --git a/apps/web/src/app/admin/orgs/upsert/route.ts b/apps/web/src/app/admin/orgs/upsert/route.ts
index cc9eff52..af64dbf8 100644
--- a/apps/web/src/app/admin/orgs/upsert/route.ts
+++ b/apps/web/src/app/admin/orgs/upsert/route.ts
@@ -1,5 +1,5 @@
 import { NextRequest, NextResponse } from "next/server";
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
 export async function POST(req: NextRequest) {
diff --git a/apps/web/src/app/api/admin/alerts/notify/route.ts b/apps/web/src/app/api/admin/alerts/notify/route.ts
index 4e0c7d02..569d9c43 100644
--- a/apps/web/src/app/api/admin/alerts/notify/route.ts
+++ b/apps/web/src/app/api/admin/alerts/notify/route.ts
@@ -1,7 +1,7 @@
 export const runtime = "nodejs";
 import "server-only";
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 import { sendAlertMail } from "@/utils/email";
 
 const TOKEN = process.env.INTERNAL_HEALTH_TOKEN || "";
diff --git a/apps/web/src/app/api/admin/alerts/settings/route.ts b/apps/web/src/app/api/admin/alerts/settings/route.ts
index 76f71944..2bb78118 100644
--- a/apps/web/src/app/api/admin/alerts/settings/route.ts
+++ b/apps/web/src/app/api/admin/alerts/settings/route.ts
@@ -2,7 +2,7 @@ export const runtime = "nodejs";
 import "server-only";
 import { NextResponse } from "next/server";
 import { cookies } from "next/headers";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 async function isAdmin() {
   const c = await cookies();
diff --git a/apps/web/src/app/api/admin/alerts/test/route.ts b/apps/web/src/app/api/admin/alerts/test/route.ts
index a8d99fbe..a1237cff 100644
--- a/apps/web/src/app/api/admin/alerts/test/route.ts
+++ b/apps/web/src/app/api/admin/alerts/test/route.ts
@@ -3,7 +3,7 @@ export const runtime = "nodejs";
 import "server-only";
 import { NextResponse } from "next/server";
 import { cookies } from "next/headers";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 import { sendAlertEmail } from "@/utils/email";
 
 async function isAdmin() {
diff --git a/apps/web/src/app/api/admin/analytics/summary/contrib-timeseries/route.ts b/apps/web/src/app/api/admin/analytics/summary/contrib-timeseries/route.ts
index 1d6158cd..b44f972c 100644
--- a/apps/web/src/app/api/admin/analytics/summary/contrib-timeseries/route.ts
+++ b/apps/web/src/app/api/admin/analytics/summary/contrib-timeseries/route.ts
@@ -1,5 +1,5 @@
 import { NextResponse } from "next/server";
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 
 export async function GET() {
   const col = await coreCol<any>("statements");
diff --git a/apps/web/src/app/api/admin/dev-elevate/route.ts b/apps/web/src/app/api/admin/dev-elevate/route.ts
index 1633fe62..de03fee1 100644
--- a/apps/web/src/app/api/admin/dev-elevate/route.ts
+++ b/apps/web/src/app/api/admin/dev-elevate/route.ts
@@ -1,19 +1,43 @@
-import { NextResponse } from "next/server";
-import { cookies } from "next/headers";
-import { getCol } from "@/utils/mongoClient";
+// apps/web/src/app/api/admin/dev-elevate/route.ts
+export const runtime = "nodejs";
+
+import { NextRequest, NextResponse } from "next/server";
+import { getCookie } from "@/lib/http/typedCookies";
+import { getCol } from "@core/triMongo";
 import { ObjectId } from "mongodb";
 
-export async function POST() {
-  if (process.env.NODE_ENV === "production")
-    return NextResponse.json({ error: "forbidden" }, { status: 403 });
+export async function POST(_req: NextRequest) {
+  // Hart stoppen in Production
+  if (process.env.NODE_ENV === "production") {
+    return NextResponse.json({ ok: false, error: "FORBIDDEN" }, { status: 403 });
+  }
 
-  const uid = cookies().get("u_id")?.value;
-  if (!uid || !ObjectId.isValid(uid)) return NextResponse.json({ error: "unauthorized" }, { status: 401 });
+  // UID aus Cookie lesen (Helper ist async)
+  const uid = await getCookie("u_id");
+  if (!uid || !ObjectId.isValid(uid)) {
+    return NextResponse.json({ ok: false, error: "UNAUTHORIZED" }, { status: 401 });
+  }
 
-  const Users = await getCol<any>("users");
-  await Users.updateOne({ _id: new ObjectId(uid) }, { $set: { role: "admin", updatedAt: new Date() } });
+  try {
+    const Users = await getCol<any>("users");
+    await Users.updateOne(
+      { _id: new ObjectId(uid) },
+      { $set: { role: "admin", updatedAt: new Date() } },
+      { upsert: false }
+    );
 
-  const res = NextResponse.json({ ok: true });
-  res.cookies.set("u_role", "admin", { path: "/", sameSite: "lax" });
-  return res;
+    const res = NextResponse.json({ ok: true });
+    // Rolle auch als Cookie setzen (nur f√ºr Dev, lax reicht)
+    res.cookies.set("u_role", "admin", {
+      path: "/",
+      sameSite: "lax",
+      httpOnly: false,
+    });
+    return res;
+  } catch (e: any) {
+    return NextResponse.json(
+      { ok: false, error: e?.message ?? "ELEVATE_FAILED" },
+      { status: 500 }
+    );
+  }
 }
diff --git a/apps/web/src/app/api/admin/errors/export/route.ts b/apps/web/src/app/api/admin/errors/export/route.ts
index 325b90e2..88f56a57 100644
--- a/apps/web/src/app/api/admin/errors/export/route.ts
+++ b/apps/web/src/app/api/admin/errors/export/route.ts
@@ -1,5 +1,5 @@
 import { NextRequest, NextResponse } from "next/server";
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 
 export async function GET(req: NextRequest) {
   const lvl = (new URL(req.url).searchParams.get("lvl") || "").toLowerCase();
diff --git a/apps/web/src/app/api/admin/orgs/upsert/route.ts b/apps/web/src/app/api/admin/orgs/upsert/route.ts
index d4d96e75..a32bf4f6 100644
--- a/apps/web/src/app/api/admin/orgs/upsert/route.ts
+++ b/apps/web/src/app/api/admin/orgs/upsert/route.ts
@@ -1,5 +1,5 @@
 import { NextRequest, NextResponse } from "next/server";
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 import { isOrgType } from "@/models/org";
 
diff --git a/apps/web/src/app/api/admin/settings/get/route.ts b/apps/web/src/app/api/admin/settings/get/route.ts
index 600058be..65ada432 100644
--- a/apps/web/src/app/api/admin/settings/get/route.ts
+++ b/apps/web/src/app/api/admin/settings/get/route.ts
@@ -3,7 +3,7 @@ export const runtime = "nodejs";
 
 import { NextResponse } from "next/server";
 import { cookies } from "next/headers";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 async function isAdmin() {
   const c = await cookies();
diff --git a/apps/web/src/app/api/admin/settings/save/route.ts b/apps/web/src/app/api/admin/settings/save/route.ts
index 63b16e60..45f72004 100644
--- a/apps/web/src/app/api/admin/settings/save/route.ts
+++ b/apps/web/src/app/api/admin/settings/save/route.ts
@@ -1,18 +1,89 @@
 // apps/web/src/app/api/admin/settings/save/route.ts
 export const runtime = "nodejs";
-import { NextResponse } from "next/server";
-import { cookies } from "next/headers";
-import { getDb } from "@/utils/mongoClient";
-
-function isAdmin() { return cookies().get("u_role")?.value === "admin"; }
-type Patch = Partial<{ requireLocation:boolean; requireEmailVerified:boolean; require2FAForReports:boolean }>;
-
-export async function POST(req: Request) {
-  if (!isAdmin()) return NextResponse.json({ error:"unauthorized" }, { status:401 });
-  const patch: Patch = await req.json().catch(()=> ({}));
-  const db = await getDb(); const col = db.collection("settings");
-  const current = (await col.findOne({ _id:"global" }))?.onboardingFlags ?? {};
-  const next = { ...current, ...patch };
-  await col.updateOne({ _id:"global" }, { $set:{ onboardingFlags: next } }, { upsert:true });
-  return NextResponse.json({ ok:true, settings: next });
+
+import "server-only";
+import { NextRequest, NextResponse } from "next/server";
+import { z } from "zod";
+import { getDb } from "@core/db/triMongo";
+import { formatError } from "@core/errors/formatError";
+import { logger } from "@core/observability/logger";
+// Hinweis: Wenn du bereits ein RBAC-Permission-Setup nutzt, kannst du die Cookie-Admin-Logik unten
+// leicht auf hasPermission(...) umstellen.
+
+type OnboardingFlags = {
+  requireLocation?: boolean;
+  requireEmailVerified?: boolean;
+  require2FAForReports?: boolean;
+};
+
+type SettingsDoc = {
+  _id: string; // z.B. "global"
+  onboardingFlags?: OnboardingFlags;
+  updatedAt?: Date;
+};
+
+const BodySchema = z
+  .object({
+    requireLocation: z.coerce.boolean().optional(),
+    requireEmailVerified: z.coerce.boolean().optional(),
+    require2FAForReports: z.coerce.boolean().optional(),
+  })
+  .strict();
+
+/** Liest die Rolle aus dem Cookie. Integrierbar mit RBAC, falls vorhanden. */
+function getRole(req: NextRequest): string {
+  return req.cookies.get("u_role")?.value ?? "guest";
+}
+
+export async function POST(req: NextRequest) {
+  const startedAt = Date.now();
+  try {
+    // --- AuthZ (konservativ: Admin-Cookie). RBAC-Hook hier m√∂glich.
+    const role = getRole(req);
+    if (role !== "admin") {
+      const fe = formatError("FORBIDDEN", "Permission denied", { role });
+      logger.warn({ fe }, "ADMIN_SETTINGS_SAVE_FORBIDDEN");
+      return NextResponse.json(fe, { status: 403 });
+    }
+
+    // --- Body validieren & koerzieren
+    const json = await req.json().catch(() => ({}));
+    const parsed = BodySchema.safeParse(json);
+    if (!parsed.success) {
+      const fe = formatError("BAD_REQUEST", "Invalid body", {
+        issues: parsed.error.flatten(),
+      });
+      logger.info({ fe }, "ADMIN_SETTINGS_SAVE_BAD_REQUEST");
+      return NextResponse.json(fe, { status: 400 });
+    }
+    const patch: OnboardingFlags = parsed.data;
+
+    // --- DB: settings-Collection mit String-_id
+    const db = await getDb();
+    const col = db.collection<SettingsDoc>("settings");
+
+    const current = await col.findOne({ _id: "global" });
+    const nextFlags: OnboardingFlags = { ...(current?.onboardingFlags ?? {}), ...patch };
+
+    await col.updateOne(
+      { _id: "global" },
+      { $set: { onboardingFlags: nextFlags, updatedAt: new Date() } },
+      { upsert: true }
+    );
+
+    logger.info(
+      {
+        msg: "Admin settings saved",
+        keys: Object.keys(patch),
+        latencyMs: Date.now() - startedAt,
+      },
+      "ADMIN_SETTINGS_SAVE_OK"
+    );
+
+    return NextResponse.json({ ok: true, settings: nextFlags });
+  } catch (err: any) {
+    const fe = formatError("INTERNAL", err?.message ?? "SAVE_FAILED");
+    logger.error({ fe, err }, "ADMIN_SETTINGS_SAVE_ERROR");
+    return NextResponse.json(fe, { status: 500 });
+  }
 }
diff --git a/apps/web/src/app/api/admin/system/ping/route.ts b/apps/web/src/app/api/admin/system/ping/route.ts
index e17bf8c3..2a163fc9 100644
--- a/apps/web/src/app/api/admin/system/ping/route.ts
+++ b/apps/web/src/app/api/admin/system/ping/route.ts
@@ -1,5 +1,5 @@
 import { NextResponse } from "next/server";
-import { coreCol, votesCol, piiCol } from "@/utils/triMongo";
+import { coreCol, votesCol, piiCol } from "@core/db/triMongo";
 
 export async function GET() {
   const out:any = { ok:true, services: [] as any[] };
diff --git a/apps/web/src/app/api/admin/users/detail/route.ts b/apps/web/src/app/api/admin/users/detail/route.ts
index 2ffe02e1..cf4ad69e 100644
--- a/apps/web/src/app/api/admin/users/detail/route.ts
+++ b/apps/web/src/app/api/admin/users/detail/route.ts
@@ -1,6 +1,6 @@
 import { NextRequest, NextResponse } from "next/server";
-import { getCol } from "@/utils/mongoClient";
-import { coreCol } from "@/utils/triMongo";
+import { getCol } from "@core/db/triMongo";
+import { coreCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
 export async function GET(req: NextRequest) {
diff --git a/apps/web/src/app/api/admin/users/list/route.ts b/apps/web/src/app/api/admin/users/list/route.ts
index b18bb6e4..14114452 100644
--- a/apps/web/src/app/api/admin/users/list/route.ts
+++ b/apps/web/src/app/api/admin/users/list/route.ts
@@ -1,7 +1,7 @@
 export const runtime = "nodejs";
 
 import { NextRequest, NextResponse } from "next/server";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 
 function isAdmin(req: NextRequest) {
   const role = req.cookies.get("u_role")?.value || "guest";
diff --git a/apps/web/src/app/api/admin/users/reset2fa/route.ts b/apps/web/src/app/api/admin/users/reset2fa/route.ts
index b09bd45c..0cdb983e 100644
--- a/apps/web/src/app/api/admin/users/reset2fa/route.ts
+++ b/apps/web/src/app/api/admin/users/reset2fa/route.ts
@@ -1,5 +1,5 @@
 import { NextRequest, NextResponse } from "next/server";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
 export async function POST(req: NextRequest) {
diff --git a/apps/web/src/app/api/admin/users/resetVerify/route.ts b/apps/web/src/app/api/admin/users/resetVerify/route.ts
index b6e95aca..a67eb56c 100644
--- a/apps/web/src/app/api/admin/users/resetVerify/route.ts
+++ b/apps/web/src/app/api/admin/users/resetVerify/route.ts
@@ -1,6 +1,6 @@
 import { NextRequest, NextResponse } from "next/server";
-import { getCol } from "@/utils/mongoClient";
-import { piiCol } from "@/utils/triMongo";
+import { getCol } from "@core/db/triMongo";
+import { piiCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 import crypto from "node:crypto";
 
diff --git a/apps/web/src/app/api/admin/users/suspend/route.ts b/apps/web/src/app/api/admin/users/suspend/route.ts
index 9f650678..3aea0f90 100644
--- a/apps/web/src/app/api/admin/users/suspend/route.ts
+++ b/apps/web/src/app/api/admin/users/suspend/route.ts
@@ -1,5 +1,5 @@
 import { NextRequest, NextResponse } from "next/server";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
 export async function POST(req: NextRequest) {
diff --git a/apps/web/src/app/api/admin/users/updateRole/route.ts b/apps/web/src/app/api/admin/users/updateRole/route.ts
index 37e8663b..aa005e04 100644
--- a/apps/web/src/app/api/admin/users/updateRole/route.ts
+++ b/apps/web/src/app/api/admin/users/updateRole/route.ts
@@ -1,5 +1,5 @@
 import { NextRequest, NextResponse } from "next/server";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
 export async function POST(req: NextRequest) {
diff --git a/apps/web/src/app/api/auth/location/route.ts b/apps/web/src/app/api/auth/location/route.ts
index 76cb2143..f4a80f25 100644
--- a/apps/web/src/app/api/auth/location/route.ts
+++ b/apps/web/src/app/api/auth/location/route.ts
@@ -1,24 +1,79 @@
-import { NextRequest, NextResponse } from "next/server";
-import { cookies } from "next/headers";
-import { getCol } from "@/utils/mongoClient";
+// apps/web/src/app/api/profile/location/route.ts
+export const runtime = "nodejs";
+
+import type { NextRequest } from "next/server";
+import { NextResponse } from "next/server";
+import { getCookie } from "@/lib/http/typedCookies";
+import { coreCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
+// Helper: getCookie kann string oder { value } liefern
+async function readCookie(name: string): Promise<string | undefined> {
+  const raw = await getCookie(name);
+  return typeof raw === "string" ? raw : (raw as any)?.value;
+}
+
+type LocPatch = {
+  city: string;
+  zip?: string;
+  country?: string; // ISO-CC (uppercased)
+  lat?: number;
+  lng?: number;
+};
+
+// ---------- GET: aktuelle Location lesen ----------
+export async function GET(_req: NextRequest) {
+  const uid = await readCookie("u_id");
+  if (!uid || !ObjectId.isValid(uid)) {
+    return NextResponse.json({ ok: false, error: "NO_UID" }, { status: 401 });
+  }
+
+  const Users = await coreCol<any>("users");
+  const user = await Users.findOne(
+    { _id: new ObjectId(uid) },
+    { projection: { "profile.location": 1 } }
+  );
+
+  return NextResponse.json({ ok: true, location: user?.profile?.location ?? null });
+}
+
+// ---------- POST: Location setzen/aktualisieren ----------
 export async function POST(req: NextRequest) {
-  const uid = cookies().get("u_id")?.value;
-  if (!uid || !ObjectId.isValid(uid)) return NextResponse.json({ error: "unauthorized" }, { status: 401 });
+  const uid = await readCookie("u_id");
+  if (!uid || !ObjectId.isValid(uid)) {
+    return NextResponse.json({ ok: false, error: "UNAUTHORIZED" }, { status: 401 });
+  }
+
+  const body = (await req.json().catch(() => null)) as Partial<LocPatch> | null;
+
+  const city = String(body?.city ?? "").trim();
+  if (!city) {
+    return NextResponse.json({ ok: false, error: "CITY_REQUIRED" }, { status: 400 });
+  }
+
+  const zip = body?.zip != null ? String(body.zip) : undefined;
+  const country = body?.country != null ? String(body.country).toUpperCase() : undefined;
+
+  const lat =
+    typeof body?.lat === "number" && Number.isFinite(body.lat) ? body.lat : undefined;
+  const lng =
+    typeof body?.lng === "number" && Number.isFinite(body.lng) ? body.lng : undefined;
 
-  const body = await req.json().catch(() => null);
-  const city = String(body?.city || "");
-  const zip = body?.zip ? String(body.zip) : undefined;
-  const country = body?.country ? String(body.country).toUpperCase() : undefined;
-  const lat = typeof body?.lat === "number" ? body.lat : undefined;
-  const lng = typeof body?.lng === "number" ? body.lng : undefined;
-  if (!city) return NextResponse.json({ error: "city required" }, { status: 400 });
+  const location: LocPatch = { city, zip, country, lat, lng };
 
-  const Users = await getCol<any>("users");
-  await Users.updateOne({ _id: new ObjectId(uid) }, { $set: { "profile.location": { city, zip, country, lat, lng }, updatedAt: new Date() } });
+  const Users = await coreCol<any>("users");
+  await Users.updateOne(
+    { _id: new ObjectId(uid) },
+    {
+      $set: {
+        "profile.location": location,
+        updatedAt: new Date(),
+      },
+    }
+  );
 
-  const res = NextResponse.json({ ok: true });
+  const res = NextResponse.json({ ok: true, location });
+  // Flag-Cookie wie in V1
   res.cookies.set("u_loc", "1", { path: "/", sameSite: "lax" });
   return res;
 }
diff --git a/apps/web/src/app/api/auth/login/route.ts b/apps/web/src/app/api/auth/login/route.ts
index 6626ae5a..20bb9b25 100644
--- a/apps/web/src/app/api/auth/login/route.ts
+++ b/apps/web/src/app/api/auth/login/route.ts
@@ -1,7 +1,7 @@
 import "server-only";
 import { NextResponse } from "next/server";
 import jwt from "jsonwebtoken";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 import { verifyPassword } from "@/utils/password";
 import { rateLimit } from "@/utils/rateLimit";
 
diff --git a/apps/web/src/app/api/auth/login/route.ts.bak.20250831183211 b/apps/web/src/app/api/auth/login/route.ts.bak.20250831183211
index 9d497a46..78eda941 100644
--- a/apps/web/src/app/api/auth/login/route.ts.bak.20250831183211
+++ b/apps/web/src/app/api/auth/login/route.ts.bak.20250831183211
@@ -2,7 +2,7 @@ import "server-only";
 import { NextResponse } from "next/server";
 import bcrypt from "bcryptjs";
 import jwt from "jsonwebtoken";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 import { rateLimit } from "@/utils/rateLimit";
 
 const JWT_SECRET = process.env.JWT_SECRET!;
diff --git a/apps/web/src/app/api/auth/magic/consume/route.ts b/apps/web/src/app/api/auth/magic/consume/route.ts
index 7cc15db6..2f566660 100644
--- a/apps/web/src/app/api/auth/magic/consume/route.ts
+++ b/apps/web/src/app/api/auth/magic/consume/route.ts
@@ -1,7 +1,7 @@
 import { NextRequest, NextResponse } from "next/server";
 import { ObjectId } from "mongodb";
-import { getCol } from "@/utils/mongoClient";
-import { piiCol } from "@/utils/triMongo";
+import { getCol } from "@core/db/triMongo";
+import { piiCol } from "@core/db/triMongo";
 
 export async function GET(req: NextRequest) {
   const url = req.nextUrl;
diff --git a/apps/web/src/app/api/auth/magic/request/route.ts b/apps/web/src/app/api/auth/magic/request/route.ts
index c74a586c..fe0c999f 100644
--- a/apps/web/src/app/api/auth/magic/request/route.ts
+++ b/apps/web/src/app/api/auth/magic/request/route.ts
@@ -1,7 +1,7 @@
 import { NextRequest, NextResponse } from "next/server";
 import crypto from "node:crypto";
-import { getCol } from "@/utils/mongoClient";
-import { piiCol } from "@/utils/triMongo";
+import { getCol } from "@core/db/triMongo";
+import { piiCol } from "@core/db/triMongo";
 import { sendMail } from "@/utils/mailer";
 
 export async function POST(req: NextRequest) {
diff --git a/apps/web/src/app/api/auth/me/route.ts b/apps/web/src/app/api/auth/me/route.ts
index f0ee9d26..5bacde60 100644
--- a/apps/web/src/app/api/auth/me/route.ts
+++ b/apps/web/src/app/api/auth/me/route.ts
@@ -1,14 +1,51 @@
+// apps/web/src/app/api/auth/me/route.ts
 import { NextResponse } from "next/server";
 import { readSession } from "@/utils/session";
-import { getCol } from "@/utils/mongoClient";
+import { ObjectId } from "mongodb";
+import { piiCol /* ggf. coreCol */ } from "@core/db/triMongo";
 
 export const runtime = "nodejs";
 
+type UserDoc = {
+  _id: ObjectId;
+  email?: string | null;
+  name?: string | null;
+  roles?: string[];
+};
+
 export async function GET() {
-  const sess = readSession();
-  if (!sess) return NextResponse.json({ user: null });
-  const users = await getCol("users");
-  const doc = await users.findOne({ _id: (await import("mongodb")).ObjectId.createFromHexString(sess.uid) }, { projection: { passwordHash: 0 } });
-  if (!doc) return NextResponse.json({ user: null });
-  return NextResponse.json({ user: { id: String(doc._id), email: doc.email, name: doc.name, roles: doc.roles ?? ["user"] } });
+  const noStore = { headers: { "Cache-Control": "no-store" } };
+
+  try {
+    const sess = readSession();
+    // Falls keine Session ‚Üí wie bei dir: { user: null } (HTTP 200)
+    if (!sess?.uid || !/^[0-9a-fA-F]{24}$/.test(sess.uid)) {
+      return NextResponse.json({ user: null }, noStore);
+    }
+
+    // Wenn deine Users in "core" liegen, nimm coreCol<UserDoc>("users")
+    const users = await piiCol<UserDoc>("users");
+
+    const doc = await users.findOne(
+      { _id: new ObjectId(sess.uid) },
+      { projection: { passwordHash: 0 } }
+    );
+
+    if (!doc) return NextResponse.json({ user: null }, noStore);
+
+    return NextResponse.json(
+      {
+        user: {
+          id: String(doc._id),
+          email: doc.email ?? null,
+          name: doc.name ?? null,
+          roles: Array.isArray(doc.roles) ? doc.roles : ["user"],
+        },
+      },
+      noStore
+    );
+  } catch (err) {
+    console.error("[/api/auth/me] error:", err);
+    return NextResponse.json({ error: "internal_error" }, { status: 500, ...noStore });
+  }
 }
diff --git a/apps/web/src/app/api/auth/register/route.ts b/apps/web/src/app/api/auth/register/route.ts
index 215e8271..8073f196 100644
--- a/apps/web/src/app/api/auth/register/route.ts
+++ b/apps/web/src/app/api/auth/register/route.ts
@@ -2,8 +2,8 @@ export const runtime = "nodejs";
 
 import { NextRequest, NextResponse } from "next/server";
 import crypto from "node:crypto";
-import { getCol } from "@/utils/mongoClient";
-import { piiCol } from "@/utils/triMongo";
+import { getCol } from "@core/db/triMongo";
+import { piiCol } from "@core/db/triMongo";
 import { sendMail } from "@/utils/mailer";
 
 // gleiche Policy wie im Client
diff --git a/apps/web/src/app/api/auth/register/route.ts.bak.20250831183211 b/apps/web/src/app/api/auth/register/route.ts.bak.20250831183211
index 8e4ce4c8..5484700f 100644
--- a/apps/web/src/app/api/auth/register/route.ts.bak.20250831183211
+++ b/apps/web/src/app/api/auth/register/route.ts.bak.20250831183211
@@ -1,5 +1,5 @@
 import { NextResponse } from "next/server";
-import { piiCol } from "@/utils/triMongo";
+import { piiCol } from "@core/db/triMongo";
 import { hashPassword } from "@/utils/password";
 import { rateLimit } from "@/utils/rateLimit";
 import crypto from "crypto";
diff --git a/apps/web/src/app/api/auth/request-reset/route.ts b/apps/web/src/app/api/auth/request-reset/route.ts
index 451be834..c73cb05e 100644
--- a/apps/web/src/app/api/auth/request-reset/route.ts
+++ b/apps/web/src/app/api/auth/request-reset/route.ts
@@ -1,6 +1,6 @@
 import { NextResponse } from "next/server";
 import { ResetRequestSchema } from "@/utils/authSchemas";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 import { rateLimit } from "@/utils/rateLimit";
 import { createToken } from "@/utils/tokens";
 import { sendMail, resetEmailLink } from "@/utils/email";
diff --git a/apps/web/src/app/api/auth/reset/route.ts b/apps/web/src/app/api/auth/reset/route.ts
index 87caaf88..80cdb65d 100644
--- a/apps/web/src/app/api/auth/reset/route.ts
+++ b/apps/web/src/app/api/auth/reset/route.ts
@@ -2,7 +2,7 @@ import { NextResponse } from "next/server";
 import bcrypt from "bcryptjs";
 import { ResetSetSchema } from "@/utils/authSchemas";
 import { consumeToken } from "@/utils/tokens";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 
 export const runtime = "nodejs";
 
diff --git a/apps/web/src/app/api/auth/totp/initiate/route.ts b/apps/web/src/app/api/auth/totp/initiate/route.ts
index 31cb1b45..b07e41b5 100644
--- a/apps/web/src/app/api/auth/totp/initiate/route.ts
+++ b/apps/web/src/app/api/auth/totp/initiate/route.ts
@@ -1,23 +1,50 @@
+// apps/web/src/app/api/auth/totp/initiate/route.ts
+export const runtime = "nodejs";
+
+import type { NextRequest } from "next/server";
 import { NextResponse } from "next/server";
-import { cookies } from "next/headers";
-import { getCol } from "@/utils/mongoClient";
+import { getCookie } from "@/lib/http/typedCookies";
+import { coreCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 import { authenticator } from "otplib";
 import { publicHost } from "@/utils/publicOrigin";
 
-export async function POST() {
-  const uid = cookies().get("u_id")?.value;
-  if (!uid || !ObjectId.isValid(uid)) return NextResponse.json({ error: "unauthorized" }, { status: 401 });
+async function readCookie(name: string): Promise<string | undefined> {
+  const raw = await getCookie(name);
+  return typeof raw === "string" ? raw : (raw as any)?.value;
+}
+
+export async function POST(_req: NextRequest) {
+  try {
+    const uid = await readCookie("u_id");
+    if (!uid || !ObjectId.isValid(uid)) {
+      return NextResponse.json({ ok: false, error: "UNAUTHORIZED" }, { status: 401 });
+    }
+
+    const Users = await coreCol<any>("users");
+    const user = await Users.findOne({ _id: new ObjectId(uid) }, { projection: { email: 1 } });
+    if (!user?.email) {
+      return NextResponse.json({ ok: false, error: "NOT_FOUND" }, { status: 404 });
+    }
 
-  const Users = await getCol<any>("users");
-  const user = await Users.findOne({ _id: new ObjectId(uid) }, { projection: { email: 1 } });
-  if (!user) return NextResponse.json({ error: "not_found" }, { status: 404 });
+    const secret = authenticator.generateSecret();
+    const issuer = encodeURIComponent("VoiceOpenGov");
+    const label = encodeURIComponent(`${publicHost()}:${user.email}`);
+    const otpauth = `otpauth://totp/${label}?secret=${secret}&issuer=${issuer}&digits=6&period=30`;
 
-  const secret = authenticator.generateSecret();
-  const issuer = encodeURIComponent("VoiceOpenGov");
-  const label = encodeURIComponent(`${publicHost()}:${user.email}`);
-  const otpauth = `otpauth://totp/${label}?secret=${secret}&issuer=${issuer}&digits=6&period=30`;
+    await Users.updateOne(
+      { _id: new ObjectId(uid) },
+      { $set: { "verification.twoFA.temp": secret, updatedAt: new Date() } }
+    );
 
-  await Users.updateOne({ _id: new ObjectId(uid) }, { $set: { "verification.twoFA.temp": secret, updatedAt: new Date() } });
-  return NextResponse.json({ ok: true, otpauth });
+    return NextResponse.json({
+      ok: true,
+      otpauth,   // f√ºr QR
+      secret,    // optional falls Client QR generiert
+      issuer: "VoiceOpenGov",
+      label: `${publicHost()}:${user.email}`,
+    });
+  } catch (e: any) {
+    return NextResponse.json({ ok: false, error: e?.message ?? "TOTP_INIT_FAILED" }, { status: 500 });
+  }
 }
diff --git a/apps/web/src/app/api/auth/totp/verify/route.ts b/apps/web/src/app/api/auth/totp/verify/route.ts
index 65ea9d1a..e9524888 100644
--- a/apps/web/src/app/api/auth/totp/verify/route.ts
+++ b/apps/web/src/app/api/auth/totp/verify/route.ts
@@ -1,39 +1,70 @@
-import { NextRequest, NextResponse } from "next/server";
-import { cookies } from "next/headers";
-import { getCol } from "@/utils/mongoClient";
+// apps/web/src/app/api/auth/totp/verify/route.ts
+export const runtime = "nodejs";
+
+import type { NextRequest } from "next/server";
+import { NextResponse } from "next/server";
+import { getCookie } from "@/lib/http/typedCookies";
+import { coreCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 import { authenticator } from "otplib";
 
+// Helper: getCookie kann string oder { value } liefern
+async function readCookie(name: string): Promise<string | undefined> {
+  const raw = await getCookie(name);
+  return typeof raw === "string" ? raw : (raw as any)?.value;
+}
+
 export async function POST(req: NextRequest) {
-  const uid = cookies().get("u_id")?.value;
-  if (!uid || !ObjectId.isValid(uid)) return NextResponse.json({ error: "unauthorized" }, { status: 401 });
-
-  const { code } = await req.json().catch(() => ({}));
-  if (!code) return NextResponse.json({ error: "code_required" }, { status: 400 });
-
-  const Users = await getCol<any>("users");
-  const u = await Users.findOne({ _id: new ObjectId(uid) }, { projection: { verification: 1, role: 1 } });
-  const secret = u?.verification?.twoFA?.temp;
-  if (!secret) return NextResponse.json({ error: "no_pending_2fa" }, { status: 400 });
-
-  const ok = authenticator.check(String(code), String(secret));
-  if (!ok) return NextResponse.json({ error: "invalid_code" }, { status: 400 });
-
-  await Users.updateOne(
-    { _id: new ObjectId(uid) },
-    {
-      $set: {
-        "verification.twoFA.enabled": true,
-        "verification.twoFA.method": "totp",
-        role: "verified",
-        updatedAt: new Date()
-      },
-      $unset: { "verification.twoFA.temp": "" }
+  try {
+    const uid = await readCookie("u_id");
+    if (!uid || !ObjectId.isValid(uid)) {
+      return NextResponse.json({ ok: false, error: "UNAUTHORIZED" }, { status: 401 });
     }
-  );
 
-  const res = NextResponse.json({ ok: true });
-  res.cookies.set("u_role", "verified", { path: "/", sameSite: "lax" });
-  res.cookies.set("u_verified", "1", { path: "/", sameSite: "lax" });
-  return res;
+    const { code } = (await req.json().catch(() => ({}))) as { code?: string | number };
+    if (!code && code !== 0) {
+      return NextResponse.json({ ok: false, error: "CODE_REQUIRED" }, { status: 400 });
+    }
+
+    const Users = await coreCol<any>("users");
+    const user = await Users.findOne(
+      { _id: new ObjectId(uid) },
+      { projection: { verification: 1, role: 1, email: 1 } }
+    );
+
+    const secret = user?.verification?.twoFA?.temp;
+    if (!secret) {
+      return NextResponse.json({ ok: false, error: "NO_PENDING_2FA" }, { status: 400 });
+    }
+
+    const isValid = authenticator.check(String(code), String(secret));
+    if (!isValid) {
+      return NextResponse.json({ ok: false, error: "INVALID_CODE" }, { status: 400 });
+    }
+
+    // Erfolgreich: 2FA aktivieren, secret final speichern und temp entfernen
+    await Users.updateOne(
+      { _id: new ObjectId(uid) },
+      {
+        $set: {
+          "verification.twoFA.enabled": true,
+          "verification.twoFA.method": "totp",
+          "verification.twoFA.secret": secret, // final √ºbernehmen
+          role: "verified",
+          updatedAt: new Date(),
+        },
+        $unset: { "verification.twoFA.temp": "" },
+      }
+    );
+
+    const res = NextResponse.json({ ok: true });
+    res.cookies.set("u_role", "verified", { path: "/", sameSite: "lax" });
+    res.cookies.set("u_verified", "1", { path: "/", sameSite: "lax" });
+    return res;
+  } catch (e: any) {
+    return NextResponse.json(
+      { ok: false, error: e?.message ?? "TOTP_VERIFY_FAILED" },
+      { status: 500 }
+    );
+  }
 }
diff --git a/apps/web/src/app/api/auth/verify/resend/route.ts b/apps/web/src/app/api/auth/verify/resend/route.ts
index 3086627f..e3f91673 100644
--- a/apps/web/src/app/api/auth/verify/resend/route.ts
+++ b/apps/web/src/app/api/auth/verify/resend/route.ts
@@ -1,7 +1,7 @@
 import { NextRequest, NextResponse } from "next/server";
 import crypto from "node:crypto";
-import { getCol } from "@/utils/mongoClient";
-import { piiCol } from "@/utils/triMongo";
+import { getCol } from "@core/db/triMongo";
+import { piiCol } from "@core/db/triMongo";
 import { sendMail } from "@/utils/mailer";
 
 export async function POST(req: NextRequest) {
diff --git a/apps/web/src/app/api/auth/verify/route.ts b/apps/web/src/app/api/auth/verify/route.ts
index f3180307..eeeb63f9 100644
--- a/apps/web/src/app/api/auth/verify/route.ts
+++ b/apps/web/src/app/api/auth/verify/route.ts
@@ -1,7 +1,7 @@
 // apps/web/src/app/api/auth/verify/route.ts
 import "server-only";
 import { NextResponse } from "next/server";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
 export async function POST(req: Request) {
diff --git a/apps/web/src/app/api/editor/items/[id]/publish/route.ts b/apps/web/src/app/api/editor/items/[id]/publish/route.ts
index c90f13c2..ae0923c9 100644
--- a/apps/web/src/app/api/editor/items/[id]/publish/route.ts
+++ b/apps/web/src/app/api/editor/items/[id]/publish/route.ts
@@ -1,65 +1,63 @@
 // apps/web/src/app/api/editor/items/[id]/publish/route.ts
-import { NextRequest, NextResponse } from "next/server";
-import { prisma } from "@/lib/prisma";
-import { PublishStatus, RegionMode } from "@prisma/client";
+export const runtime = "nodejs";
+
+import type { NextRequest } from "next/server";
+import { NextResponse } from "next/server";
+import { prisma } from "@db-web";
 import { logger } from "@core/observability/logger";
-import { formatError } from "@core/errors/formatError";
 import { hasPermission, PERMISSIONS, type Role } from "@core/auth/rbac";
+import { formatError } from "@core/errors/formatError";
+import { ContentKind, PublishStatus, RegionMode } from "@db-web";
 
 type Params = { params: { id: string } };
 
 export async function POST(req: NextRequest, { params }: Params) {
-  const traceStart = Date.now();
   try {
-    const { id } = params;
-
-    // --- Session / RBAC ---
-    // TODO: Rolle/Nutzer-ID aus Session oder Middleware korrekt ermitteln
-    const role = "editor" as Role;
+    // --- Permission check ---
+    const role = (req.cookies.get("u_role")?.value as Role) ?? "guest";
     if (!hasPermission(role, PERMISSIONS.EDITOR_ITEM_PUBLISH)) {
-      const err = formatError("FORBIDDEN", "Permission denied");
-      logger.warn({ id, role }, "ITEM_PUBLISH_FORBIDDEN");
-      return NextResponse.json(err, { status: 403 });
+      return NextResponse.json(
+        formatError("FORBIDDEN", "Permission denied", { role }),
+        { status: 403 }
+      );
     }
 
-    // --- Item laden ---
+    // --- Load item (inkl. Optionen) ---
     const item = await prisma.contentItem.findUnique({
-      where: { id },
-      include: { answerOptions: true, topic: true },
+      where: { id: params.id },
+      include: { answerOptions: true },
     });
-    if (!item) {
-      const err = formatError("NOT_FOUND", "Item not found", { id });
-      logger.warn({ id }, "ITEM_NOT_FOUND");
-      return NextResponse.json(err, { status: 404 });
-    }
 
-    // --- Idempotenz ---
-    if (item.status === PublishStatus.published) {
-      logger.info({ id, tookMs: Date.now() - traceStart }, "ITEM_ALREADY_PUBLISHED");
-      return NextResponse.json({ ok: true, item }, { status: 200 });
+    if (!item) {
+      return NextResponse.json(
+        formatError("NOT_FOUND", "Item not found", { id: params.id }),
+        { status: 404 }
+      );
     }
 
-    // --- Validierung ---
+    // --- Validation ---
     const errors: string[] = [];
-    const warnings: string[] = [];
 
     if (!item.text || item.text.trim().length < 8) {
       errors.push("Text zu kurz.");
     }
-    if (item.kind === "EVENT" || item.kind === "SUNDAY_POLL") {
+
+    if (item.kind === ContentKind.EVENT || item.kind === ContentKind.SUNDAY_POLL) {
       if (item.answerOptions.length < 2) {
-        errors.push("Mindestens 2 Antwortoptionen erforderlich.");
+        errors.push("Mind. 2 Antwortoptionen erforderlich.");
       }
-      if (item.kind === "EVENT" && !item.answerOptions.some((o) => o.exclusive)) {
-        errors.push("EVENT: Mindestens eine exklusive Option erforderlich.");
+      if (item.kind === ContentKind.EVENT && !item.answerOptions.some((o) => o.exclusive)) {
+        errors.push("EVENT: Mind. eine exklusive Option erforderlich.");
       }
     }
+
     if (item.publishAt && item.expireAt && item.expireAt <= item.publishAt) {
       errors.push("expireAt muss nach publishAt liegen.");
     }
 
-    // --- Region bestimmen ---
-    let regionEffectiveId = item.regionEffectiveId ?? null;
+    // --- Region ableiten ---
+    let regionEffectiveId: string | null = item.regionEffectiveId ?? null;
+
     if (item.regionMode === RegionMode.MANUAL) {
       if (!item.regionManualId) {
         errors.push("RegionMode=MANUAL ben√∂tigt regionManualId.");
@@ -69,56 +67,52 @@ export async function POST(req: NextRequest, { params }: Params) {
     } else {
       const decided = (item.regionAuto as any)?.decidedRegionId as string | undefined;
       if (decided) regionEffectiveId = decided;
-      if (!regionEffectiveId) {
-        errors.push("AUTO-Region konnte nicht sicher bestimmt werden.");
-      }
+      if (!regionEffectiveId) errors.push("AUTO-Region konnte nicht bestimmt werden.");
     }
 
-    // --- Bei Fehlern: in REVIEW parken ---
-    if (errors.length) {
+    // --- Fehlermeldungen zur√ºckspielen & Status auf REVIEW setzen ---
+    if (errors.length > 0) {
       await prisma.contentItem.update({
         where: { id: item.id },
         data: {
           status: PublishStatus.review,
-          validation: { ...(item.validation || {}), errors, warnings },
+          validation: { ...(item.validation ?? {}), errors },
         },
       });
-      logger.warn({ id, errors, warnings }, "ITEM_VALIDATION_FAILED");
-      return NextResponse.json({ ok: false, errors, warnings }, { status: 400 });
+      return NextResponse.json({ ok: false, errors }, { status: 400 });
     }
 
-    // --- Publish atomar durchf√ºhren ---
+    // --- Publish ---
+    const now = new Date();
     const updated = await prisma.$transaction(async (tx) => {
-      const now = new Date();
-      const patch = await tx.contentItem.update({
+      await tx.contentItem.update({
         where: { id: item.id },
         data: {
           status: PublishStatus.published,
           publishAt: item.publishAt ?? now,
           regionEffectiveId,
-          validation: { ...(item.validation || {}), errors: [], warnings },
+          validation: { ...(item.validation ?? {}), errors: [] },
         },
       });
 
       return tx.contentItem.findUnique({
-        where: { id: patch.id },
+        where: { id: item.id },
         include: {
           topic: { select: { id: true, slug: true, title: true } },
-          answerOptions: { orderBy: { order: "asc" } },
+          answerOptions: { orderBy: { sortOrder: "asc" } },
           regionEffective: true,
           regionManual: true,
         },
       });
     });
 
-    logger.info(
-      { id, status: updated?.status, tookMs: Date.now() - traceStart },
-      "ITEM_PUBLISH_OK"
+    return NextResponse.json({ ok: true, item: updated });
+  } catch (e: unknown) {
+    const msg = e instanceof Error ? e.message : String(e);
+    logger.error({ err: msg }, "ITEM_PUBLISH_FAIL");
+    return NextResponse.json(
+      formatError("INTERNAL_ERROR", "Publish failed", msg),
+      { status: 500 }
     );
-    return NextResponse.json({ ok: true, item: updated }, { status: 200 });
-  } catch (e: any) {
-    logger.error({ e }, "ITEM_PUBLISH_FAIL");
-    const err = formatError("BAD_REQUEST", "Publish failed", e?.message ?? e);
-    return NextResponse.json(err, { status: 500 });
   }
 }
diff --git a/apps/web/src/app/api/editor/items/[id]/route.ts b/apps/web/src/app/api/editor/items/[id]/route.ts
index 16eb1967..dc0e1642 100644
--- a/apps/web/src/app/api/editor/items/[id]/route.ts
+++ b/apps/web/src/app/api/editor/items/[id]/route.ts
@@ -1,50 +1,38 @@
 // apps/web/src/app/api/editor/items/[id]/route.ts
-import { NextRequest, NextResponse } from "next/server";
-import { prisma } from "@/lib/prisma";
-import { ContentKind, PublishStatus, RegionMode } from "@prisma/client";
-import { validateItemDraft } from "@lib/validation/contentValidation";
+// Secure: /api/editor/items/[id]
+export const runtime = "nodejs";
+
+import type { NextRequest } from "next/server";
+import { NextResponse } from "next/server";
 import sanitizeHtml from "sanitize-html";
+import { prisma, ContentKind, PublishStatus, RegionMode, type Prisma } from "@db-web";
+import { validateItemDraft } from "@lib/validation/contentValidation";
 import { hasPermission, PERMISSIONS, type Role } from "@core/auth/rbac";
 import { formatError } from "@core/errors/formatError";
 import { logger } from "@core/observability/logger";
 
 type Params = { params: { id: string } };
 
-// --- GET /api/editor/items/[id] ---
-export async function GET(req: NextRequest, { params }: Params) {
-  try {
-    const role = (req.cookies.get("u_role")?.value as Role) ?? "guest";
-    if (!hasPermission(role, PERMISSIONS.EDITOR_ITEM_READ)) {
-      const fe = formatError("FORBIDDEN", "Permission denied", { role });
-      logger.warn({ fe }, "ITEM_GET_FORBIDDEN");
-      return NextResponse.json(fe, { status: 403 });
-    }
-
-    const item = await prisma.contentItem.findUnique({
-      where: { id: params.id },
-      include: {
-        answerOptions: { orderBy: { order: "asc" } },
-        regionEffective: true,
-        regionManual: true,
-        topic: { select: { id: true, slug: true, title: true } },
-      },
-    });
+// ---------- Helpers ----------
+function enumGuard<E extends Record<string, string | number>>(
+  e: E,
+  v: unknown
+): E[keyof E] | null {
+  return (Object.values(e) as Array<E[keyof E]>).includes(v as any) ? (v as any) : null;
+}
 
-    if (!item) {
-      const fe = formatError("NOT_FOUND", "Item not found", { id: params.id });
-      logger.warn({ fe }, "ITEM_GET_NOTFOUND");
-      return NextResponse.json(fe, { status: 404 });
-    }
+function toDate(v: unknown): Date | null {
+  if (v == null) return null;
+  const d = new Date(String(v));
+  return Number.isNaN(d.getTime()) ? null : d;
+}
 
-    return NextResponse.json({ ok: true, item }, { status: 200 });
-  } catch (e: any) {
-    const fe = formatError("INTERNAL_ERROR", "Unexpected failure", e?.message ?? e);
-    logger.error({ fe, e }, "ITEM_GET_FAIL");
-    return NextResponse.json(fe, { status: 500 });
-  }
+function toIntOr(v: unknown, fallback: number): number {
+  const n = Number(v);
+  return Number.isFinite(n) ? Math.trunc(n) : fallback;
 }
 
-// --- PATCH /api/editor/items/[id] ---
+// ---------- PATCH ----------
 export async function PATCH(req: NextRequest, { params }: Params) {
   try {
     const role = (req.cookies.get("u_role")?.value as Role) ?? "guest";
@@ -54,7 +42,7 @@ export async function PATCH(req: NextRequest, { params }: Params) {
       return NextResponse.json(fe, { status: 403 });
     }
 
-    const body = await req.json();
+    const body = (await req.json().catch(() => ({}))) as Record<string, any>;
 
     const current = await prisma.contentItem.findUnique({
       where: { id: params.id },
@@ -66,102 +54,85 @@ export async function PATCH(req: NextRequest, { params }: Params) {
       return NextResponse.json(fe, { status: 404 });
     }
 
-    // Eingaben mergen (Fallback auf current)
-    const kind = (body.kind as ContentKind) ?? current.kind;
-    const text = (typeof body.text === "string" ? body.text : current.text) as string;
-    const topicId = (body.topicId as string) ?? current.topicId;
-    const locale = body.locale ?? current.locale;
-    const regionMode = (body.regionMode as RegionMode) ?? current.regionMode;
-    const regionManualId = body.regionManualId ?? current.regionManualId;
-    const publishAt = body.publishAt ? new Date(body.publishAt) : current.publishAt;
-    const expireAt = body.expireAt ? new Date(body.expireAt) : current.expireAt;
-    const title = body.title ?? current.title;
-    const richText =
+    const nextKind = enumGuard(ContentKind, body.kind) ?? current.kind;
+    const nextStatus = enumGuard(PublishStatus, body.status) ?? current.status;
+    const nextRegionMode = enumGuard(RegionMode, body.regionMode) ?? current.regionMode;
+
+    const publishAt = toDate(body.publishAt) ?? current.publishAt;
+    const expireAt = toDate(body.expireAt) ?? current.expireAt;
+
+    const cleanText = typeof body.text === "string" ? body.text : current.text;
+    const cleanRichText =
       body.richText !== undefined ? sanitizeHtml(String(body.richText)) : current.richText;
-    const authorName = body.authorName ?? current.authorName;
-    const status = (body.status as PublishStatus) ?? current.status;
 
-    const answerOptions = (body.answerOptions ?? null) as
-      | Array<{ id?: string; label: string; value: string; exclusive?: boolean; order?: number }>
-      | null;
+    const answerOptions = Array.isArray(body.answerOptions) ? body.answerOptions : null;
 
-    // Validierung
     const validation = await validateItemDraft({
-      kind,
-      text,
-      topicId,
-      regionMode,
-      regionManualId,
+      kind: nextKind,
+      text: cleanText,
+      topicId: body.topicId ?? current.topicId,
+      regionMode: nextRegionMode,
+      regionManualId: body.regionManualId ?? current.regionManualId,
       publishAt,
       expireAt,
-      locale,
+      locale: body.locale ?? current.locale,
       answerOptions: answerOptions ?? current.answerOptions,
     });
 
-    // Atomar: ContentItem-Update + Options-√Ñnderungen
-    const result = await prisma.$transaction(async (tx) => {
-      // 1) Item updaten
+    const updated = await prisma.$transaction(async (tx: Prisma.TransactionClient) => {
       await tx.contentItem.update({
         where: { id: params.id },
         data: {
-          kind,
-          text,
-          topicId,
-          locale,
-          regionMode,
-          regionManualId,
-          publishAt: publishAt ?? undefined,
-          expireAt: expireAt ?? undefined,
-          title,
-          richText,
-          authorName,
-          status,
+          kind: nextKind,
+          text: cleanText,
+          topicId: body.topicId ?? current.topicId,
+          locale: body.locale ?? current.locale,
+          regionMode: nextRegionMode,
+          regionManualId: body.regionManualId ?? current.regionManualId,
+          publishAt,
+          expireAt,
+          title: body.title ?? current.title,
+          richText: cleanRichText,
+          authorName: body.authorName ?? current.authorName,
+          status: nextStatus,
           validation,
-          regionAuto: validation.regionAuto ?? undefined,
+          regionAuto: validation?.regionAuto ?? undefined,
         },
       });
 
-      // 2) AnswerOptions upserten (nur wenn √ºbergeben)
       if (answerOptions) {
-        const existing = current.answerOptions;
-        const keepIds = new Set(answerOptions.filter((o) => o.id).map((o) => o.id as string));
-        const toDelete = existing.filter((e) => !keepIds.has(e.id)).map((e) => e.id);
+        type Opt = { id?: string; label?: string; value?: string; exclusive?: boolean; order?: number };
+        const keepIds = new Set(
+          answerOptions.map((o: Opt) => (o?.id ? String(o.id) : null)).filter(Boolean) as string[]
+        );
+
+        const toDelete = current.answerOptions.filter((e) => !keepIds.has(e.id)).map((e) => e.id);
         if (toDelete.length) {
           await tx.answerOption.deleteMany({ where: { id: { in: toDelete } } });
         }
 
         for (let idx = 0; idx < answerOptions.length; idx++) {
-          const o = answerOptions[idx];
-          const order = Number.isFinite(o.order) ? (o.order as number) : idx;
+          const o = (answerOptions[idx] ?? {}) as Opt;
+          const order = toIntOr(o.order, idx);
+          const payload = {
+            label: String(o.label ?? ""),
+            value: String(o.value ?? ""),
+            exclusive: !!o.exclusive,
+            order,
+          };
+
           if (o.id) {
-            await tx.answerOption.update({
-              where: { id: o.id },
-              data: {
-                label: o.label,
-                value: o.value,
-                exclusive: !!o.exclusive,
-                order,
-              },
-            });
+            await tx.answerOption.update({ where: { id: String(o.id) }, data: payload });
           } else {
-            await tx.answerOption.create({
-              data: {
-                itemId: params.id,
-                label: o.label,
-                value: o.value,
-                exclusive: !!o.exclusive,
-                order,
-              },
-            });
+            await tx.answerOption.create({ data: { itemId: params.id, ...payload } });
           }
         }
       }
 
-      // 3) R√ºckgabe laden
       return tx.contentItem.findUnique({
         where: { id: params.id },
         include: {
-          answerOptions: { orderBy: { order: "asc" } },
+          answerOptions: { orderBy: { sortOrder: "asc" } },
           regionEffective: true,
           regionManual: true,
           topic: { select: { id: true, slug: true, title: true } },
@@ -169,15 +140,19 @@ export async function PATCH(req: NextRequest, { params }: Params) {
       });
     });
 
-    return NextResponse.json({ ok: true, item: result }, { status: 200 });
-  } catch (e: any) {
-    const fe = formatError("INTERNAL_ERROR", "Update failed", e?.message ?? e);
+    return NextResponse.json({ ok: true, item: updated }, { status: 200 });
+  } catch (e: unknown) {
+    const fe = formatError(
+      "INTERNAL_ERROR",
+      "Update failed",
+      e instanceof Error ? e.message : String(e)
+    );
     logger.error({ fe, e }, "ITEM_PATCH_FAIL");
     return NextResponse.json(fe, { status: 500 });
   }
 }
 
-// --- DELETE /api/editor/items/[id] ---
+// ---------- DELETE ----------
 export async function DELETE(req: NextRequest, { params }: Params) {
   try {
     const role = (req.cookies.get("u_role")?.value as Role) ?? "guest";
@@ -187,11 +162,17 @@ export async function DELETE(req: NextRequest, { params }: Params) {
       return NextResponse.json(fe, { status: 403 });
     }
 
-    await prisma.contentItem.delete({ where: { id: params.id } });
+    // Optional: Wenn kein ON DELETE CASCADE:
+    // await prisma.answerOption.deleteMany({ where: { itemId: params.id } });
 
+    await prisma.contentItem.delete({ where: { id: params.id } });
     return NextResponse.json({ ok: true }, { status: 200 });
-  } catch (e: any) {
-    const fe = formatError("INTERNAL_ERROR", "Delete failed", e?.message ?? e);
+  } catch (e: unknown) {
+    const fe = formatError(
+      "INTERNAL_ERROR",
+      "Delete failed",
+      e instanceof Error ? e.message : String(e)
+    );
     logger.error({ fe, e }, "ITEM_DELETE_FAIL");
     return NextResponse.json(fe, { status: 500 });
   }
diff --git a/apps/web/src/app/api/editor/items/[id]/tags/route.ts b/apps/web/src/app/api/editor/items/[id]/tags/route.ts
index 92356aaf..41dac1af 100644
--- a/apps/web/src/app/api/editor/items/[id]/tags/route.ts
+++ b/apps/web/src/app/api/editor/items/[id]/tags/route.ts
@@ -1,28 +1,40 @@
-import { NextResponse } from "next/server";
-import { prisma } from "@lib/prisma";
+export const runtime = "nodejs";
 
-export async function POST(req: Request, { params }: { params: { id: string } }) {
+import { NextRequest, NextResponse } from "next/server";
+import { prisma } from "@db-web";
+import { hasPermission, PERMISSIONS, type Role } from "@core/auth/rbac";
+import { formatError } from "@core/errors/formatError";
+
+type Params = { params: { id: string } };
+
+export async function POST(req: NextRequest, { params }: Params) {
   try {
+    const role = (req.cookies.get("u_role")?.value as Role) ?? "guest";
+    if (!hasPermission(role, PERMISSIONS.EDITOR_ITEM_WRITE)) {
+      return NextResponse.json(formatError("FORBIDDEN", "Permission denied", { role }), { status: 403 });
+    }
+
     const body = await req.json();
-    const tagIds = Array.isArray(body.tagIds) ? body.tagIds as string[] : [];
+    const tagIds = Array.isArray(body.tagIds) ? (body.tagIds as string[]) : [];
+
     const exists = await prisma.contentItem.findUnique({ where: { id: params.id } });
-    if (!exists) return NextResponse.json({ error: "Item not found" }, { status: 404 });
+    if (!exists) return NextResponse.json(formatError("NOT_FOUND", "Item not found"), { status: 404 });
 
-    // hard-replace
     await prisma.itemTag.deleteMany({ where: { itemId: params.id } });
-    if (tagIds.length) {
+    if (tagIds.length > 0) {
       await prisma.itemTag.createMany({
-        data: tagIds.map(tid => ({ itemId: params.id, tagId: tid })),
+        data: tagIds.map((tagId) => ({ itemId: params.id, tagId })),
         skipDuplicates: true,
       });
     }
+
     const withTags = await prisma.contentItem.findUnique({
       where: { id: params.id },
       include: { tags: { include: { tag: true } } },
     });
-    return NextResponse.json(withTags);
-  } catch (e) {
-    console.error(e);
-    return NextResponse.json({ error: "Update tags failed" }, { status: 500 });
+
+    return NextResponse.json({ ok: true, item: withTags });
+  } catch (e: any) {
+    return NextResponse.json(formatError("INTERNAL_ERROR", "Tag update failed", e?.message ?? e), { status: 500 });
   }
 }
diff --git a/apps/web/src/app/api/editor/items/export.csv/route.ts b/apps/web/src/app/api/editor/items/export.csv/route.ts
index 208ce93c..44942e47 100644
--- a/apps/web/src/app/api/editor/items/export.csv/route.ts
+++ b/apps/web/src/app/api/editor/items/export.csv/route.ts
@@ -1,44 +1,84 @@
-import { prisma } from "@lib/prisma";
+// apps/web/src/app/api/editor/items/export.csv/route.ts
+export const runtime = "nodejs";
 
-export async function GET() {
+import { prisma } from "@db-web";
+
+/**
+ * GET /api/editor/items/export.csv
+ * Optional query:
+ *   - take: number (max 10_000)
+ */
+export async function GET(req: Request) {
+  // ---- Query-Params ----
+  const { searchParams } = new URL(req.url);
+  const take = Math.min(
+    Math.max(parseInt(searchParams.get("take") || "1000", 10), 1),
+    10_000
+  );
+
+  // ---- Daten ziehen ----
   const items = await prisma.contentItem.findMany({
-    include: { regionEffective: true, topic: true, answerOptions: { orderBy: { order: "asc" } } },
+    include: {
+      regionEffective: { select: { code: true } },
+      topic: { select: { slug: true } },
+      answerOptions: {
+        orderBy: { sortOrder: "asc" },
+        select: { label: true, value: true },
+      },
+    },
     orderBy: [{ createdAt: "desc" }],
-    take: 1000,
+    take,
   });
 
+  // ---- CSV aufbauen ----
   const header = [
-    "id","kind","status","locale","topicSlug","title","text",
-    "publishAt","expireAt","regionCode","answerOptions"
+    "id",
+    "kind",
+    "status",
+    "locale",
+    "topicSlug",
+    "title",
+    "text",
+    "publishAt",
+    "expireAt",
+    "regionCode",
+    "answerOptions",
   ];
-  const lines = [header.join(",")];
 
-  const esc = (s: any) => {
+  const esc = (s: unknown) => {
     const v = s == null ? "" : String(s);
-    if (v.includes(",") || v.includes("\n") || v.includes("\"")) {
-      return `"${v.replace(/"/g, '""')}"`;
-    }
-    return v;
+    return v.includes(",") || v.includes("\n") || v.includes('"')
+      ? `"${v.replace(/"/g, '""')}"`
+      : v;
   };
 
+  const lines: string[] = [];
+  lines.push(header.join(","));
+
   for (const it of items) {
     const row = [
       it.id,
-      it.kind,
+      it.kind, // Prisma-Enums -> als String
       it.status,
       it.locale,
       it.topic?.slug ?? "",
       it.title ?? "",
-      it.text.replace(/\s+/g, " ").slice(0, 500),
+      (it.text ?? "").replace(/\s+/g, " ").slice(0, 500),
       it.publishAt?.toISOString() ?? "",
       it.expireAt?.toISOString() ?? "",
       it.regionEffective?.code ?? "",
-      (it.answerOptions ?? []).map(o => `${o.label}:${o.value}`).join("|"),
+      (it.answerOptions ?? [])
+        .map((o) => `${o.label}:${o.value}`)
+        .join("|"),
     ].map(esc);
+
     lines.push(row.join(","));
   }
 
-  const csv = lines.join("\n");
+  // BOM + CRLF f√ºr Excel
+  const EOL = "\r\n";
+  const csv = "\uFEFF" + lines.join(EOL) + EOL;
+
   return new Response(csv, {
     headers: {
       "content-type": "text/csv; charset=utf-8",
diff --git a/apps/web/src/app/api/editor/items/route.ts b/apps/web/src/app/api/editor/items/route.ts
index a74f01ac..4302075c 100644
--- a/apps/web/src/app/api/editor/items/route.ts
+++ b/apps/web/src/app/api/editor/items/route.ts
@@ -1,7 +1,7 @@
 //apps/web/src/app/api/editor/items/route,ts
 import { NextResponse } from "next/server";
-import { prisma } from "@core/db/prisma";
-import { ContentKind, PublishStatus, RegionMode } from "@prisma/client";
+import { prisma } from "@db-web";
+import { ContentKind, PublishStatus, RegionMode } from "@db-web";
 import { validateItemDraft } from "./../server/validation/contentValidation";
 
 /**
@@ -25,7 +25,7 @@ export async function GET(req: Request) {
     const items = await prisma.contentItem.findMany({
       where,
       include: {
-        answerOptions: { orderBy: { order: "asc" } },
+        answerOptions: { orderBy: { sortOrder: "asc" } },
         regionEffective: true,
         regionManual: true,
         topic: { select: { id: true, slug: true, title: true } },
diff --git a/apps/web/src/app/api/editor/regions/route.ts b/apps/web/src/app/api/editor/regions/route.ts
index 02306f59..5102aab2 100644
--- a/apps/web/src/app/api/editor/regions/route.ts
+++ b/apps/web/src/app/api/editor/regions/route.ts
@@ -1,5 +1,5 @@
 import { NextRequest } from "next/server";
-import { prisma } from "@core/db/prisma";
+import { prisma } from "@db-web";
 import { ok, err } from "src/lib/api";
 
 export async function GET(req: NextRequest) {
diff --git a/apps/web/src/app/api/editor/server/validation/contentValidation.ts b/apps/web/src/app/api/editor/server/validation/contentValidation.ts
index 976c0615..c655fed8 100644
--- a/apps/web/src/app/api/editor/server/validation/contentValidation.ts
+++ b/apps/web/src/app/api/editor/server/validation/contentValidation.ts
@@ -1,8 +1,16 @@
 // apps/web/src/server/validation/contentValidation.ts
-import { prisma } from "@/lib/prisma";
-import { ContentKind, RegionMode } from "@prisma/client";
+export const runtime = "nodejs";
 
-type AnswerOpt = { id?: string; label: string; value: string; exclusive?: boolean; order?: number };
+import { prisma, ContentKind, RegionMode } from "@db-web";
+// Falls du sanitize-html brauchst und keine Typen hast, lieber VM/Guards verwenden oder eine ambient d.ts anlegen (siehe unten).
+
+type AnswerOpt = {
+  id?: string;
+  label: string;
+  value: string;
+  exclusive?: boolean;
+  order?: number;
+};
 
 export type ValidationResult = {
   errors: string[];
@@ -11,94 +19,105 @@ export type ValidationResult = {
   regionAuto?: { candidates: Array<{ regionId: string; score: number }>; decidedRegionId?: string };
 };
 
+// ---------- kleine, lokale Helper ----------
+function isEnumValue<E extends Record<string, string | number>>(e: E, v: unknown): v is E[keyof E] {
+  return Object.values(e).includes(v as any);
+}
+
+function toIntOr(v: unknown, fallback: number): number {
+  const n = Number(v);
+  return Number.isFinite(n) ? Math.trunc(n) : fallback;
+}
+
+function toDate(v: unknown): Date | null {
+  const d = new Date(String(v));
+  return Number.isNaN(d.getTime()) ? null : d;
+}
+// ------------------------------------------
+
 export async function validateItemDraft(input: {
   kind: ContentKind;
   text: string;
-  topicId: string;
-  regionMode: RegionMode;
+  locale?: string | null;
+  regionMode?: RegionMode | null;
   regionManualId?: string | null;
+  answerOptions?: AnswerOpt[];
   publishAt?: string | Date | null;
   expireAt?: string | Date | null;
-  locale?: string;
-  answerOptions?: AnswerOpt[];
-}): Promise<ValidationResult> {
+}) {
   const errors: string[] = [];
   const warnings: string[] = [];
   const checks: Record<string, boolean> = {};
 
-  // Required
-  checks.hasText = !!input.text && input.text.trim().length >= 8;
-  if (!checks.hasText) errors.push("Text zu kurz (min. 8 Zeichen).");
-
-  const topic = await prisma.topic.findUnique({ where: { id: input.topicId } });
-  checks.topicExists = !!topic;
-  if (!checks.topicExists) errors.push("Topic nicht gefunden.");
+  // kind
+  if (!isEnumValue(ContentKind, input.kind)) {
+    errors.push("Invalid ContentKind");
+  }
 
-  // Kind-specific
-  if (input.kind === "EVENT" || input.kind === "SUNDAY_POLL") {
-    const opts = input.answerOptions ?? [];
-    checks.hasOptions = opts.length >= 2;
-    if (!checks.hasOptions) errors.push("Mindestens 2 Antwortoptionen erforderlich.");
+  // text
+  if (!input.text || !input.text.trim()) {
+    errors.push("Text is required");
+  }
 
-    if (input.kind === "EVENT") {
-      const hasExclusive = opts.some(o => o.exclusive === true);
-      checks.hasExclusive = hasExclusive;
-      if (!hasExclusive) errors.push("Mindestens eine exklusive Option f√ºr EVENT erforderlich.");
-    }
+  // region mode
+  const regionMode = input.regionMode ?? RegionMode.auto;
+  if (!isEnumValue(RegionMode, regionMode)) {
+    errors.push("Invalid RegionMode");
   }
 
-  // Schedule
-  if (input.publishAt && input.expireAt) {
-    const p = new Date(input.publishAt);
-    const e = new Date(input.expireAt);
-    checks.scheduleOrder = e.getTime() > p.getTime();
-    if (!checks.scheduleOrder) errors.push("expireAt muss nach publishAt liegen.");
+  // dates
+  const publishAt = input.publishAt ? toDate(input.publishAt) : null;
+  const expireAt = input.expireAt ? toDate(input.expireAt) : null;
+  if (publishAt && expireAt && publishAt > expireAt) {
+    errors.push("publishAt must be <= expireAt");
   }
 
-  // Region
-  let regionAuto: ValidationResult["regionAuto"] | undefined = undefined;
-  if (input.regionMode === "MANUAL") {
-    checks.hasManualRegion = !!input.regionManualId;
-    if (!checks.hasManualRegion) errors.push("regionManualId fehlt (RegionMode=MANUAL).");
-    else {
-      const reg = await prisma.region.findUnique({ where: { id: input.regionManualId! } });
-      checks.manualRegionExists = !!reg;
-      if (!checks.manualRegionExists) errors.push("regionManualId ung√ºltig.");
+  // answer options (optional simple checks)
+  const opts = input.answerOptions ?? [];
+  const seenOrders = new Set<number>();
+  for (const o of opts) {
+    if (!o.label?.trim()) warnings.push("Answer option without label");
+    if (!o.value?.trim()) warnings.push("Answer option without value");
+    if (o.order != null) {
+      const ord = toIntOr(o.order, -1);
+      if (ord < 0) warnings.push("Answer option order should be >= 0");
+      if (seenOrders.has(ord)) warnings.push("Duplicate answer option order");
+      seenOrders.add(ord);
     }
-  } else {
-    regionAuto = await inferRegionFromText(input.text);
-    checks.hasAutoCandidates = Array.isArray(regionAuto?.candidates) && regionAuto.candidates.length > 0;
-    if (!checks.hasAutoCandidates) warnings.push("Keine Region-Kandidaten gefunden (AUTO).");
-    const top = regionAuto?.candidates?.[0];
-    if (top && top.score >= 0.75) regionAuto!.decidedRegionId = top.regionId;
   }
 
-  return { errors, warnings, checks, regionAuto };
-}
-
-// Sehr pragmatische Heuristik (kann sp√§ter durch NER/Geo-Resolver ersetzt werden)
-async function inferRegionFromText(text: string) {
-  const t = text.toLowerCase();
-  const candidates: Array<{ regionId: string; score: number }> = [];
+  // region auto suggest (simple heuristic)
+  const regionAuto: ValidationResult["regionAuto"] = { candidates: [] };
+  if (regionMode === RegionMode.auto) {
+    const code = guessRegionCode(input.text);
+    if (code) {
+      const regionId = await regionIdByCode(code);
+      regionAuto.candidates.push({ regionId, score: 0.9 });
+      regionAuto.decidedRegionId = regionId;
+    }
+  }
 
-  if (/\bdeutschland\b|\bbund\b/.test(t)) candidates.push({ regionId: await regionIdByCode("DE"), score: 0.9 });
-  if (/\bberlin\b/.test(t))               candidates.push({ regionId: await regionIdByCode("DE-BE"), score: 0.88 });
-  if (/\bbayern\b/.test(t))               candidates.push({ regionId: await regionIdByCode("DE-BY"), score: 0.86 });
-  if (/\beu\b|\beurop√§ische union\b/.test(t)) candidates.push({ regionId: await regionIdByCode("EU"), score: 0.8 });
+  checks.valid =
+    errors.length === 0 &&
+    isEnumValue(ContentKind, input.kind) &&
+    isEnumValue(RegionMode, regionMode);
 
-  if (candidates.length === 0) candidates.push({ regionId: await regionIdByCode("WORLD"), score: 0.5 });
+  return { errors, warnings, checks, regionAuto } as ValidationResult;
 
-  // Score-Absteigend
-  candidates.sort((a, b) => b.score - a.score);
-  return { candidates };
-}
+  // ----- helpers -----
+  function guessRegionCode(text: string): string | null {
+    const t = text.toUpperCase();
+    if (/\bEU\b/.test(t)) return "EU";
+    if (/\bDE\b/.test(t)) return "DE";
+    if (/\bWORLD\b/.test(t)) return "WORLD";
+    return null;
+  }
 
-async function regionIdByCode(code: string) {
-  const known = await prisma.region.findFirst({ where: { code } });
-  if (known) return known.id;
-  const level = code === "WORLD" ? 0 : code === "EU" ? 1 : code.startsWith("DE-") ? 3 : code === "DE" ? 2 : 0;
-  const created = await prisma.region.create({
-    data: { code, name: code, level },
-  });
-  return created.id;
+  async function regionIdByCode(code: string) {
+    const known = await prisma.region.findFirst({ where: { code } });
+    if (known) return known.id;
+    const level = code === "WORLD" ? 0 : code === "EU" ? 1 : code.startsWith("DE-") ? 3 : code === "DE" ? 2 : 0;
+    const created = await prisma.region.create({ data: { code, name: code, level } });
+    return created.id;
+  }
 }
diff --git a/apps/web/src/app/api/editor/statements/[id]/route.ts b/apps/web/src/app/api/editor/statements/[id]/route.ts
index 3f7f4f67..ec46c7e1 100644
--- a/apps/web/src/app/api/editor/statements/[id]/route.ts
+++ b/apps/web/src/app/api/editor/statements/[id]/route.ts
@@ -1,7 +1,7 @@
 // apps/web/src/app/api/editor/statements/[id]/route.ts
 import { NextResponse } from "next/server";
 import { z } from "zod";
-import { prisma } from "@lib/db";
+import { prisma } from "@db-web";
 import { requireEditorAuth } from "../../_utils/auth";
 
 interface Params { params: { id: string } }
diff --git a/apps/web/src/app/api/editor/statements/route.ts b/apps/web/src/app/api/editor/statements/route.ts
index f46cd407..ae3ff85d 100644
--- a/apps/web/src/app/api/editor/statements/route.ts
+++ b/apps/web/src/app/api/editor/statements/route.ts
@@ -1,7 +1,7 @@
 // apps/web/src/app/api/editor/statements/route.ts
 import { NextResponse } from "next/server";
 import { z } from "zod";
-import { prisma } from "@lib/db";
+import { prisma } from "@db-web";
 import { requireEditorAuth } from "../_utils/auth";
 
 const StatementCreate = z.object({
diff --git a/apps/web/src/app/api/editor/tags/route.ts b/apps/web/src/app/api/editor/tags/route.ts
index 5b3b3363..c75db923 100644
--- a/apps/web/src/app/api/editor/tags/route.ts
+++ b/apps/web/src/app/api/editor/tags/route.ts
@@ -1,5 +1,5 @@
 import { NextResponse } from "next/server";
-import { prisma } from "@lib/prisma";
+import { prisma } from "@db-web";
 
 export async function GET() {
   const tags = await prisma.tag.findMany({ orderBy: { slug: "asc" } });
diff --git a/apps/web/src/app/api/editor/topics/[id]/route.ts b/apps/web/src/app/api/editor/topics/[id]/route.ts
index 0578d2c7..bc955be4 100644
--- a/apps/web/src/app/api/editor/topics/[id]/route.ts
+++ b/apps/web/src/app/api/editor/topics/[id]/route.ts
@@ -1,7 +1,7 @@
 // apps/web/src/app/api/editor/topics/[id]/route.ts
 import { NextResponse } from "next/server";
 import { z } from "zod";
-import { prisma } from "@lib/db";
+import { prisma } from "@db-web";
 import { requireEditorAuth } from "../../_utils/auth";
 
 interface Params { params: { id: string } }
diff --git a/apps/web/src/app/api/events/route.ts b/apps/web/src/app/api/events/route.ts
index 18161fa5..4cd8e188 100644
--- a/apps/web/src/app/api/events/route.ts
+++ b/apps/web/src/app/api/events/route.ts
@@ -1,7 +1,7 @@
 export const runtime = "nodejs";
 
 import { NextRequest, NextResponse } from "next/server";
-import { coreCol } from "src/utils/triMongo";
+import { coreCol } from "@core/triMongo";
 
 function clamp(n: number, min: number, max: number) { return Math.max(min, Math.min(max, n)); }
 
diff --git a/apps/web/src/app/api/factcheck/result/[contributionId]/route.ts b/apps/web/src/app/api/factcheck/result/[contributionId]/route.ts
index 3e002fcb..93f43270 100644
--- a/apps/web/src/app/api/factcheck/result/[contributionId]/route.ts
+++ b/apps/web/src/app/api/factcheck/result/[contributionId]/route.ts
@@ -1,5 +1,5 @@
 import { NextResponse } from "next/server";
-import { prisma } from "@core/db/prisma";
+import { prisma } from "@db-web";
 
 export async function GET(_: Request, { params }: { params: { contributionId: string } }) {
   const { contributionId } = params;
diff --git a/apps/web/src/app/api/factcheck/status/[jobId]/route.ts b/apps/web/src/app/api/factcheck/status/[jobId]/route.ts
index d51a51b5..ea8ba0b2 100644
--- a/apps/web/src/app/api/factcheck/status/[jobId]/route.ts
+++ b/apps/web/src/app/api/factcheck/status/[jobId]/route.ts
@@ -1,6 +1,6 @@
 // apps/web/src/app/api/factcheck/status/[jobId]/route.ts
 import { NextRequest, NextResponse } from "next/server";
-import { prisma } from "@core/db/prisma";
+import { prisma } from "@db-web";
 import { z, ZodError } from "zod";
 import { formatError } from "@core/errors/formatError";
 import { logger } from "@core/observability/logger";
diff --git a/apps/web/src/app/api/finding/upsert/route.ts b/apps/web/src/app/api/finding/upsert/route.ts
index f388ce16..3b3b3b29 100644
--- a/apps/web/src/app/api/finding/upsert/route.ts
+++ b/apps/web/src/app/api/finding/upsert/route.ts
@@ -1,7 +1,7 @@
 // apps/web/src/app/api/finding/upsert/route.ts
 import { NextRequest, NextResponse } from "next/server";
 import { z } from "zod";
-import { prisma } from "@/prisma";
+import { prisma } from "@db-web";
 import { formatError } from "@core/errors/formatError";
 import { hasPermission, PERMISSIONS } from "@core/auth/rbac";
 import { mapOutcomeToStatus } from "@/core/factcheck/triage";
diff --git a/apps/web/src/app/api/gdpr/delete/route.ts b/apps/web/src/app/api/gdpr/delete/route.ts
index b16dcdd9..26ac76cf 100644
--- a/apps/web/src/app/api/gdpr/delete/route.ts
+++ b/apps/web/src/app/api/gdpr/delete/route.ts
@@ -1,6 +1,6 @@
 import { NextResponse } from "next/server";
 import mongoose from "mongoose";
-import { mongo } from "@/lib/db/mongoose";
+import { mongo } from "@/db/mongoose";
 import { getServerUser } from "@/lib/auth/getServerUser";
 
 export async function POST() {
diff --git a/apps/web/src/app/api/gdpr/export/route.ts b/apps/web/src/app/api/gdpr/export/route.ts
index 8b098a77..3b31998c 100644
--- a/apps/web/src/app/api/gdpr/export/route.ts
+++ b/apps/web/src/app/api/gdpr/export/route.ts
@@ -1,6 +1,6 @@
 import { NextResponse } from "next/server";
 import { getServerUser } from "@/lib/auth/getServerUser";
-import { mongo } from "@/lib/db/mongoose";
+import { mongo } from "@/db/mongoose";
 import mongoose from "mongoose";
 
 // Beispiel: sammle Kernressourcen; erweitere bei Bedarf
diff --git a/apps/web/src/app/api/items/route.ts b/apps/web/src/app/api/items/route.ts
index dbfecef6..424fca9e 100644
--- a/apps/web/src/app/api/items/route.ts
+++ b/apps/web/src/app/api/items/route.ts
@@ -1,67 +1,29 @@
-// apps/web/src/app/api/items/route.ts
+export const runtime = "nodejs";
+
 import { NextResponse } from "next/server";
-import { prisma } from "@/lib/prisma";
-import { ContentKind, PublishStatus } from "@prisma/client";
+import { prisma, PublishStatus, ContentKind } from "@db-web";
 
-export async function GET(req: Request) {
+export async function POST(req: Request) {
   try {
-    const { searchParams } = new URL(req.url);
-    const kind = searchParams.get("kind") as ContentKind | null;
-    const locale = (searchParams.get("locale") as any) || undefined;
-    const regionCode = searchParams.get("region") || undefined;
-    const active = searchParams.get("active") === "true";
-    const latest = searchParams.get("latest") === "true";
-    const take = Math.min(parseInt(searchParams.get("take") || "50", 10), 200);
-
-    const now = new Date();
+    const body = await req.json();
 
-    const where: any = {
-      status: PublishStatus.published,
-      OR: [{ publishAt: null }, { publishAt: { lte: now } }],
-      AND: [{ OR: [{ expireAt: null }, { expireAt: { gt: now } }] }],
+    const data: any = {
+      kind: body.kind as ContentKind,
+      text: String(body.text ?? ""),
+      status: PublishStatus.draft
     };
-    if (kind) where.kind = kind;
-    if (locale) where.locale = locale;
 
-    // Region-Filter: wenn regionCode gesetzt, matchen wir effective Region-Hierarchie einfach (pragmatisch)
-    // Vereinfachung: match per Region.code = regionCode (exakte Ebene). Hier kann sp√§ter Hierarchie-Matching erg√§nzt werden.
-    if (regionCode) {
-      // Join via regionEffective -> Region.code
-      const regions = await prisma.region.findMany({ where: { code: regionCode } });
-      if (regions.length) where.regionEffectiveId = regions[0].id;
+    if (typeof body.topicId === "string" && body.topicId) {
+      data.topic = { connect: { id: body.topicId } }; // relation-safe
     }
 
-    const items = await prisma.contentItem.findMany({
-      where,
-      include: {
-        answerOptions: { orderBy: { order: "asc" } },
-        regionEffective: true,
-        topic: { select: { id: true, slug: true, title: true } },
-      },
-      orderBy: [{ order: "asc" }, { createdAt: "desc" }],
-      take,
+    const created = await prisma.contentItem.create({
+      data,
+      include: { answerOptions: true, topic: true }
     });
 
-    // latest=true ‚Üí pro Topic / Kind nur das j√ºngste
-    if (latest) {
-      const seen = new Set<string>();
-      const filtered: typeof items = [];
-      for (const it of items) {
-        const key = `${it.topicId}:${it.kind}`;
-        if (!seen.has(key)) {
-          seen.add(key);
-          filtered.push(it);
-        }
-      }
-      return NextResponse.json(filtered);
-    }
-
-    return NextResponse.json(items);
+    return NextResponse.json({ ok: true, item: created });
   } catch (e: any) {
-    console.error(e);
-    return new NextResponse(JSON.stringify({ error: "Failed to fetch items" }), {
-      status: 500,
-      headers: { "content-type": "application/json" },
-    });
+    return NextResponse.json({ ok: false, error: e?.message ?? "Create failed" }, { status: 500 });
   }
 }
diff --git a/apps/web/src/app/api/map/points/route.ts b/apps/web/src/app/api/map/points/route.ts
index 72e05db0..8e74f34e 100644
--- a/apps/web/src/app/api/map/points/route.ts
+++ b/apps/web/src/app/api/map/points/route.ts
@@ -4,7 +4,7 @@ export const dynamic = "force-dynamic";
 
 import { NextRequest, NextResponse } from "next/server";
 import { ObjectId } from "mongodb";
-import { coreCol, votesCol } from "src/utils/triMongo";
+import { coreCol, votesCol } from "@core/triMongo";
 
 /** --- Helpers ------------------------------------------------------------ */
 
diff --git a/apps/web/src/app/api/region/effective/route.ts b/apps/web/src/app/api/region/effective/route.ts
index 6705f4b4..e9db225b 100644
--- a/apps/web/src/app/api/region/effective/route.ts
+++ b/apps/web/src/app/api/region/effective/route.ts
@@ -1,50 +1,118 @@
 // apps/web/src/app/api/region/effective/route.ts
+export const runtime = "nodejs";
+export const dynamic = "force-dynamic";
+
 import { NextRequest, NextResponse } from "next/server";
 import { cookies } from "next/headers";
-import { prismaWeb } from "@/lib/dbWeb";
-import { getServerSession } from "next-auth";
-import { authOptions } from "@/lib/auth"; // <-- stelle sicher, dass dieser Pfad stimmt
 
-// WICHTIG: Next.js auf Node-Runtime halten (Prisma + NextAuth)
-export const runtime = "nodejs";
-export const dynamic = "force-dynamic"; // keine statische Caches
+/** -------- Utils -------- */
+function headerCountry(h: Headers): string | null {
+  const v =
+    (h.get("x-country") ||
+      h.get("cf-ipcountry") ||
+      h.get("x-vercel-ip-country") ||
+      "")?.toUpperCase();
+  return v || null;
+}
 
-export async function GET(_req: NextRequest) {
-  // 1) Profil (falls eingeloggt)
+/** erlaubt ISO2 oder ISO2-EXT (z. B. DE, AT, CH, DE-BE) */
+function normalize(code: string | null | undefined): string | null {
+  if (!code) return null;
+  const c = code.trim().toUpperCase().slice(0, 8);
+  return /^[A-Z]{2}(-[A-Z0-9]{1,3})?$/.test(c) ? c : null;
+}
+
+/** Prisma lazy laden (kein harter Build-Dep) */
+async function getPrismaWeb(): Promise<any | null> {
   try {
-    const session = await getServerSession(authOptions);
-    if (session?.user?.id) {
-      const prof = await prismaWeb.userProfile.findUnique({
-        where: { userId: session.user.id },
-        include: { region: true },
-      });
-      if (prof?.region) {
-        return NextResponse.json({
-          region: {
-            id: prof.region.id,
-            code: prof.region.code,
-            name: prof.region.name,
-            level: prof.region.level,
-          },
-          source: "profile",
-        });
-      }
-    }
+    const mod: any = await import("src/lib/dbWeb");
+    return mod?.prismaWeb ?? mod ?? null;
   } catch {
-    // still und freundlich ignorieren (z.B. wenn NextAuth nicht wired ist)
+    return null;
   }
+}
+
+/** Minimal vereinheitlichter Payload ‚Äì falls DB da ist, anreichern */
+async function findRegionPayload(code: string) {
+  const prismaWeb: any = await getPrismaWeb();
+  if (prismaWeb?.region) {
+    try {
+      const r = await prismaWeb.region.findUnique({ where: { code } });
+      if (r) return { id: r.id, code: r.code, name: r.name, level: r.level };
+    } catch { /* noop */ }
+  }
+  // Fallback: nur Code
+  return { code } as { id?: string; code: string; name?: string; level?: number };
+}
+
+/** Optionaler Profil-Fallback: nur wenn next-auth + authOptions vorhanden sind */
+async function getProfileRegionFromSession():
+  Promise<{ id?: string; code: string; name?: string; level?: number } | null> {
+  try {
+    const nextAuthMod: any = await import("next-auth");
+    const getServerSession: (opts: any) => Promise<any> = nextAuthMod.getServerSession;
+
+    // "@/lib/auth" darf fehlen ‚Üí wenn Import scheitert, abbrechen
+    const authMod: any = await import("src/lib/auth");
+    const authOptions = authMod?.authOptions;
+    if (!authOptions) return null;
+
+    const prismaWeb: any = await getPrismaWeb();
+    if (!prismaWeb?.userProfile) return null;
 
-  // 2) Cookie
-  const c = cookies().get("u_region");
-  if (c?.value) {
-    const r = await prismaWeb.region.findUnique({ where: { code: c.value } });
-    if (r) {
-      return NextResponse.json({
-        region: { id: r.id, code: r.code, name: r.name, level: r.level },
-        source: "cookie",
-      });
+    const session: any = await getServerSession(authOptions);
+    const userId: string | null = session?.user?.id ? String(session.user.id) : null;
+    if (!userId) return null;
+
+    const prof = await prismaWeb.userProfile.findUnique({
+      where: { userId },
+      include: { region: true },
+    });
+    if (prof?.region) {
+      return {
+        id: prof.region.id,
+        code: prof.region.code,
+        name: prof.region.name,
+        level: prof.region.level,
+      };
     }
+    return null;
+  } catch {
+    return null;
+  }
+}
+
+/** -------- Handler -------- */
+export async function GET(req: NextRequest) {
+  // 1) Profil (nur wenn NextAuth/Prisma verf√ºgbar)
+  const profRegion = await getProfileRegionFromSession();
+  if (profRegion) {
+    return NextResponse.json({ region: profRegion, source: "profile" });
+  }
+
+  // 2) Manuell: Query oder Cookie (Next 15: cookies() kann async sein)
+  const url = new URL(req.url);
+  const qManual = normalize(url.searchParams.get("region") || url.searchParams.get("code"));
+  const c = await cookies();
+  // akzeptiere sowohl "region_code" (neu) als auch "u_region" (legacy)
+  const cookieManual = normalize(c.get("region_code")?.value || c.get("u_region")?.value);
+
+  if (qManual) {
+    const region = await findRegionPayload(qManual);
+    return NextResponse.json({ region, source: "query" });
+  }
+  if (cookieManual) {
+    const region = await findRegionPayload(cookieManual);
+    return NextResponse.json({ region, source: "cookie" });
+  }
+
+  // 3) Header (Edge/CDN)
+  const hdr = normalize(headerCountry(req.headers));
+  if (hdr) {
+    const region = await findRegionPayload(hdr);
+    return NextResponse.json({ region, source: "header" });
   }
 
-  // 3) Nichts gesetzt
-  return NextResponse.json({ region: null, source: "none" });
\ No newline at end of file
+  // 4) Kein Treffer
+  return NextResponse.json({ region: null, source: "none" });
+}
diff --git a/apps/web/src/app/api/statements/[id]/route.ts b/apps/web/src/app/api/statements/[id]/route.ts
index cc785eac..b3f39e71 100644
--- a/apps/web/src/app/api/statements/[id]/route.ts
+++ b/apps/web/src/app/api/statements/[id]/route.ts
@@ -1,6 +1,6 @@
 export const runtime = "nodejs";
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 import { ObjectId } from "mongodb";
 
 export async function GET(_: Request, { params }: { params: { id: string } }) {
diff --git a/apps/web/src/app/api/statements/[id]/stats/route.ts b/apps/web/src/app/api/statements/[id]/stats/route.ts
index 3cda1967..9925ecc9 100644
--- a/apps/web/src/app/api/statements/[id]/stats/route.ts
+++ b/apps/web/src/app/api/statements/[id]/stats/route.ts
@@ -1,7 +1,7 @@
 
 import "server-only";
 import { NextResponse } from "next/server";
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 
 export async function GET(_: Request, { params }: { params: { id: string }}) {
   const col = await coreCol<any>("statements");
diff --git a/apps/web/src/app/api/statements/[id]/timeseries/route.ts b/apps/web/src/app/api/statements/[id]/timeseries/route.ts
index 7836d81e..9b98eb1c 100644
--- a/apps/web/src/app/api/statements/[id]/timeseries/route.ts
+++ b/apps/web/src/app/api/statements/[id]/timeseries/route.ts
@@ -1,6 +1,6 @@
 import "server-only";
 import { NextResponse } from "next/server";
-import { votesCol } from "@/utils/triMongo";
+import { votesCol } from "@core/db/triMongo";
 
 export async function GET(_: Request, { params }: { params: { id: string }}) {
   const statementId = params.id;
diff --git a/apps/web/src/app/api/statements/route.ts b/apps/web/src/app/api/statements/route.ts
index fc06c173..8f4634bc 100644
--- a/apps/web/src/app/api/statements/route.ts
+++ b/apps/web/src/app/api/statements/route.ts
@@ -2,7 +2,7 @@ export const runtime = "nodejs";
 
 import { NextRequest, NextResponse } from "next/server";
 import { ObjectId } from "mongodb";
-import { coreCol } from "src/utils/triMongo";
+import { coreCol } from "@core/triMongo";
 import { readSession } from "src/utils/session";
 
 const REQUIRE_LOGIN = (process.env.REQUIRE_LOGIN_FOR_STATEMENTS || "false") === "true";
diff --git a/apps/web/src/app/api/topics/[slug]/route.ts b/apps/web/src/app/api/topics/[slug]/route.ts
index c4461999..42ecbd17 100644
--- a/apps/web/src/app/api/topics/[slug]/route.ts
+++ b/apps/web/src/app/api/topics/[slug]/route.ts
@@ -1,7 +1,8 @@
 // apps/web/src/app/api/topics/[slug]/route.ts
+export const runtime = "nodejs";
+
 import { NextResponse } from "next/server";
-import { prisma } from "@/lib/prisma";
-import { PublishStatus } from "@prisma/client";
+import { prisma, PublishStatus } from "@db-web";
 
 type Params = { params: { slug: string } };
 
@@ -15,14 +16,12 @@ export async function GET(_req: Request, { params }: Params) {
         items: {
           where: {
             status: PublishStatus.published,
-            // Falls ihr nur SWIPE anzeigen wollt, einkommentieren:
-            // kind: "SWIPE",
             OR: [{ publishAt: null }, { publishAt: { lte: now } }],
             AND: [{ OR: [{ expireAt: null }, { expireAt: { gt: now } }] }],
           },
-          orderBy: [{ order: "asc" }, { createdAt: "asc" }],
+          orderBy: [{ publishAt: "desc" }, { createdAt: "desc" }],
           include: {
-            answerOptions: { orderBy: { order: "asc" } },
+            answerOptions: { orderBy: { sortOrder: "asc" } },
             regionEffective: true,
           },
         },
@@ -34,8 +33,10 @@ export async function GET(_req: Request, { params }: Params) {
     }
 
     return NextResponse.json({ topic, asOf: now.toISOString() });
-  } catch (err) {
-    console.error(`GET /api/topics/${params.slug} error:`, err);
-    return NextResponse.json({ error: "INTERNAL_SERVER_ERROR" }, { status: 500 });
+  } catch (err: any) {
+    return NextResponse.json(
+      { error: err?.message ?? "Failed to load topic" },
+      { status: 500 }
+    );
   }
 }
diff --git a/apps/web/src/app/api/topics/route.ts b/apps/web/src/app/api/topics/route.ts
index ca11b397..8a5370cf 100644
--- a/apps/web/src/app/api/topics/route.ts
+++ b/apps/web/src/app/api/topics/route.ts
@@ -19,9 +19,9 @@ export async function GET(req: Request) {
             OR: [{ publishAt: null }, { publishAt: { lte: now } }],
             AND: [{ OR: [{ expireAt: null }, { expireAt: { gt: now } }] }],
           },
-          orderBy: [{ order: "asc" }, { createdAt: "asc" }],
+          orderBy: [{ sortOrder: "asc" }, { createdAt: "asc" }],
           include: {
-            answerOptions: { orderBy: { order: "asc" } },
+            answerOptions: { orderBy: { sortOrder: "asc" } },
             regionEffective: true,
           },
         },
diff --git a/apps/web/src/app/api/translate/contribution/analyze.ts b/apps/web/src/app/api/translate/contribution/analyze.ts
index 083d3d65..a9772cbc 100644
--- a/apps/web/src/app/api/translate/contribution/analyze.ts
+++ b/apps/web/src/app/api/translate/contribution/analyze.ts
@@ -1,24 +1,37 @@
-{
-    "text": "...",
-    "userProfile": {
-      "region": "Sachsen-Anhalt",
-      "interests": ["Umwelt", "Teilhabe"],
-      "roles": ["B√ºrgerin"]
-    }
-  }
-  {
-    "region": "Sachsen-Anhalt",
-    "topics": [
-      { "name": "Klimawandel", "confidence": 0.92 },
-      { "name": "Infrastruktur", "confidence": 0.65 }
-    ],
-    "statements": [
-      { "text": "Der l√§ndliche Raum wird beim √ñPNV vernachl√§ssigt.", "type": "ja/nein", "polarity": "hoch" }
-    ],
-    "suggestions": [
-      "Du k√∂nntest daraus eine Swipe-Frage machen.",
-      "Das Thema k√∂nnte mit bestehenden Berichten zu Mobilit√§t verkn√ºpft werden."
-    ],
-    "isNewContext": true
-  }
-  
\ No newline at end of file
+// apps/web/src/app/api/translate/contribution/analyze.ts
+
+export type ContributionAnalyzeInput = {
+  text: string;
+  userProfile?: {
+    region?: string;
+    interests?: string[];
+    roles?: string[];
+  };
+  context?: {
+    region?: string;
+    topics?: string[];
+  };
+  statements?: string[];
+  suggestions?: string[];
+  isNewContext?: boolean;
+};
+
+export type ContributionAnalyzeResult = {
+  language: string;
+  detectedTopics: string[];
+  keyPhrases: string[];
+  summary?: string;
+};
+
+export async function analyzeContribution(
+  input: ContributionAnalyzeInput
+): Promise<ContributionAnalyzeResult> {
+  // TODO: echte Analyse-Logik integrieren (LLM, NER, Topic-Model, etc.)
+  const fallbackLang = "de";
+  return {
+    language: fallbackLang,
+    detectedTopics: input.context?.topics ?? [],
+    keyPhrases: (input.text || "").split(/\s+/).slice(0, 5),
+    summary: input.text?.slice(0, 160),
+  };
+}
diff --git a/apps/web/src/app/api/translate/route.ts b/apps/web/src/app/api/translate/route.ts
index 0bcab4e0..63a3957a 100644
--- a/apps/web/src/app/api/translate/route.ts
+++ b/apps/web/src/app/api/translate/route.ts
@@ -1,45 +1,95 @@
 // apps/web/src/app/api/translate/route.ts
+export const runtime = "nodejs";
+export const dynamic = "force-dynamic";
+
 import { NextRequest, NextResponse } from "next/server";
-import { cacheTranslation } from "@/utils/translationCache";
-import { translateWithGPT } from "@/utils/gptTranslator";
+import { fetchGptTranslation } from "@/utils/gptTranslator";
+import { analyzeContribution } from "@/lib/contribution/analyzeContribution";
+import { extractStatementsFromText } from "@/lib/contribution/extractStatements";
+import { translateAndCache } from "@/lib/contribution/translateAndCache";
+import { storeContribution } from "@/lib/contribution/storeContribution";
+import type { ContributionAnalysisRequest } from "@/types/contribution";
+
+type TranslateBody = { pipeline?: "translate"; text: string; to: string };
+type ContributionBody = {
+  pipeline?: "contribution";
+  text: string;
+  region?: string | null;
+  userId?: string | null;
+  locales?: string[];
+};
+type Body = TranslateBody | ContributionBody;
+
+function isContributionBody(b: Partial<Body>): b is ContributionBody {
+  return (
+    b?.pipeline === "contribution" ||
+    "userId" in (b as any) ||
+    "region" in (b as any) ||
+    Array.isArray((b as any)?.locales)
+  );
+}
 
 export async function POST(req: NextRequest) {
-  const { text, to } = await req.json();
-  if (!text || !to) {
-    return NextResponse.json({ error: "Invalid request" }, { status: 400 });
-  }
+  try {
+    const body = (await req.json()) as Partial<Body>;
 
-  const cached = await cacheTranslation.get(text, to);
-  if (cached) {
-    return NextResponse.json({ result: cached });
-  }
+    // A) Nur √úbersetzen
+    if (!isContributionBody(body)) {
+      const text = String((body as any)?.text ?? "");
+      const to = String((body as any)?.to ?? "").trim().toLowerCase();
+      if (!text || !to) {
+        return NextResponse.json({ ok: false, error: "Missing 'text' or 'to'." }, { status: 400 });
+      }
+      const translated = await fetchGptTranslation(text, to);
+      return NextResponse.json({ ok: true, mode: "translate", result: translated });
+    }
 
-  const translated = await translateWithGPT(text, to);
-  await cacheTranslation.set(text, to, translated);
+    // B) Contribution-Pipeline
+    const text = String(body.text ?? "");
+    if (!text) return NextResponse.json({ ok: false, error: "Missing 'text'." }, { status: 400 });
 
-  return NextResponse.json({ result: translated });
-}
+    const region = body.region ?? null;
+    const userId = body.userId ?? null;
+    const locales = Array.isArray(body.locales) && body.locales.length ? body.locales : ["de", "en"];
 
+    // 1) Analyse
+    const analysisReq: ContributionAnalysisRequest = {
+      text,
+      region: region ?? undefined,
+    };
+    const analysis = await analyzeContribution(analysisReq);
 
-import { analyzeContribution } from "@lib/contribution/analyzeContribution";
-import { extractStatements } from "@lib/contribution/extractStatements";
-import { translateAndCache } from "@lib/contribution/translateAndCache";
-import { storeContribution } from "@lib/contribution/storeContribution";
+    // 2) Statements aus Originaltext (Objekte)
+    const statementObjs = extractStatementsFromText(text, {
+      max: Number(process.env.EXTRACT_MAX_STATEMENTS ?? 8),
+      minChars: Number(process.env.EXTRACT_MIN_CHARS ?? 12),
+    });
 
-export async function POST(req: Request) {
-  const { text, region, userId } = await req.json();
+    // Strings f√ºr Funktionen, die string[] erwarten
+    const statements = statementObjs.map((s) => s.text);
 
-  const analysis = await analyzeContribution(text);
-  const statements = await extractStatements(analysis);
-  const translations = await translateAndCache(statements, ["de", "en"]);
+    // 3) √úbersetzungen ‚Äî deine Signatur: (texts: string[], locales: string[])
+    const translations = await translateAndCache(statements, locales);
 
-  const saved = await storeContribution({
-    originalText: text,
-    statements,
-    translations,
-    region,
-    userId,
-  });
+    // 4) Persistenz ‚Äî Signatur erwartet string statt undefined/null
+    const saved = await storeContribution({
+      originalText: text,
+      statements,           // string[]
+      translations,
+      region: region ?? "", // erzwinge string
+      userId: userId ?? "", // erzwinge string
+    });
 
-  return Response.json({ success: true, saved });
+    return NextResponse.json({
+      ok: true,
+      mode: "contribution",
+      saved,
+      analysis,
+      statements: statementObjs, // gib gern die reicheren Objekte zur√ºck
+      translations,
+    });
+  } catch (err: any) {
+    console.error("POST /api/translate failed:", err?.message || err);
+    return NextResponse.json({ ok: false, error: "internal_error" }, { status: 500 });
+  }
 }
diff --git a/apps/web/src/app/api/unit/[id]/interest/route.ts b/apps/web/src/app/api/unit/[id]/interest/route.ts
index b900e076..a59b578a 100644
--- a/apps/web/src/app/api/unit/[id]/interest/route.ts
+++ b/apps/web/src/app/api/unit/[id]/interest/route.ts
@@ -1,7 +1,7 @@
 // apps/web/src/app/api/unit/[id]/interest/route.ts
 import { NextRequest, NextResponse } from "next/server";
 import { z } from "zod";
-import { prisma } from "@/prisma";
+import { prisma } from "@db-web";
 import { shouldWatchlist } from "@/core/factcheck/triage";
 import { formatError } from "@core/errors/formatError";
 import { logger } from "@core/observability/logger";
diff --git a/apps/web/src/app/api/votes/cast/route.ts b/apps/web/src/app/api/votes/cast/route.ts
index 7a3f35ee..a04ae0c1 100644
--- a/apps/web/src/app/api/votes/cast/route.ts
+++ b/apps/web/src/app/api/votes/cast/route.ts
@@ -4,7 +4,7 @@ import "server-only";
 import { NextRequest, NextResponse } from "next/server";
 import { ObjectId } from "mongodb";
 import crypto from "node:crypto";
-import { votesCol, coreCol } from "src/utils/triMongo";
+import { votesCol, coreCol } from "@core/triMongo";
 import { rateLimit } from "src/utils/rateLimit";
 import UserGameStats from "src/models/game/UserGameStats";
 
diff --git a/apps/web/src/app/api/votes/submit/route.ts b/apps/web/src/app/api/votes/submit/route.ts
index 3fc92b00..bc49030d 100644
--- a/apps/web/src/app/api/votes/submit/route.ts
+++ b/apps/web/src/app/api/votes/submit/route.ts
@@ -1,33 +1,117 @@
 // apps/web/src/app/api/votes/submit/route.ts
+export const runtime = "nodejs";
+export const dynamic = "force-dynamic";
+
+import "server-only";
 import { NextRequest, NextResponse } from "next/server";
-import dbConnect from "@/utils/dbConnect";
-import Vote from "@/models/Vote";
+import { ObjectId } from "mongodb";
+import crypto from "node:crypto";
+import { coreCol, votesCol } from "@core/db/triMongo";
 
-export async function POST(req: NextRequest) {
-  await dbConnect();
-  const { statementId, vote, userHash, region, device } = await req.json();
+type Val = "agree" | "neutral" | "disagree";
+const VALID: Record<Val, 1> = { agree: 1, neutral: 1, disagree: 1 };
 
-  if (!statementId || !vote || !userHash) {
-    return NextResponse.json({ error: "Missing required fields." }, { status: 400 });
+function getClientIp(req: NextRequest): string {
+  const fwd = (req.headers.get("x-forwarded-for") || (req as any).ip || "") as string;
+  return fwd.split(",")[0].trim();
+}
+function ipSubnet(ip: string | null): string | null {
+  if (!ip) return null;
+  if (ip.includes(".")) {
+    const p = ip.split(".");
+    return p.length >= 3 ? `${p[0]}.${p[1]}.${p[2]}.0/24` : null;
   }
+  if (ip.includes(":")) {
+    const g = ip.split(":");
+    return g.slice(0, 4).join(":") + "::/64";
+  }
+  return null;
+}
+function stableHash(s: string | null): string | null {
+  if (!s) return null;
+  const sec = process.env.IP_HASH_SECRET;
+  return sec
+    ? crypto.createHmac("sha256", sec).update(s).digest("hex")
+    : crypto.createHash("sha256").update(s).digest("hex");
+}
 
+export async function POST(req: NextRequest) {
   try {
-    // Nur ein Vote je statementId/userHash-Kombi
-    await Vote.findOneAndUpdate(
-      { statementId, userHash },
-      { $set: { vote, region, device, createdAt: new Date() } },
-      { upsert: true, new: true }
+    const body = await req.json().catch(() => ({}));
+    const statementIdStr = String(body?.statementId ?? "");
+    const v = String(body?.value ?? "").toLowerCase() as Val;
+
+    if (!ObjectId.isValid(statementIdStr)) {
+      return NextResponse.json({ error: "invalid_statementId" }, { status: 400 });
+    }
+    if (!(v in VALID)) {
+      return NextResponse.json({ error: "invalid_vote" }, { status: 400 });
+    }
+
+    const statementId = new ObjectId(statementIdStr);
+
+    // Ident keys: userId > (fp+subnet) > fp
+    const userId = req.cookies.get("u_id")?.value || req.headers.get("x-user-id") || null;
+    const fp = (req.headers.get("x-fp") || "").slice(0, 200) || null;
+    const subnetHash = stableHash(ipSubnet(getClientIp(req)));
+
+    const key: Record<string, any> = { statementId };
+    if (userId) key.userId = String(userId);
+    else if (fp && subnetHash) { key.fp = fp; key.ipSubnet = subnetHash; }
+    else if (fp) key.fp = fp;
+    else return NextResponse.json({ error: "missing_identifier" }, { status: 400 });
+
+    const votes = await votesCol<any>("votes");
+    const stmts = await coreCol<any>("statements");
+
+    const existing = await votes.findOne(key, { projection: { value: 1 } });
+
+    const now = new Date();
+    await votes.updateOne(
+      key,
+      {
+        $set: {
+          statementId,
+          value: v,
+          userId: userId ?? null,
+          fp: fp ?? null,
+          ipSubnet: subnetHash ?? null,
+          updatedAt: now,
+          day: now.toISOString().slice(0, 10),
+        },
+        $setOnInsert: { createdAt: now },
+      },
+      { upsert: true }
     );
-    // Optional: Aggregation direkt mitschicken, damit Frontend nicht neu laden muss
-    const votes = await Vote.aggregate([
-      { $match: { statementId } },
-      { $group: { _id: "$vote", count: { $sum: 1 } } }
-    ]);
-    const summary = { agree: 0, neutral: 0, disagree: 0 };
-    votes.forEach(v => { summary[v._id] = v.count; });
-
-    return NextResponse.json({ success: true, summary });
-  } catch (err) {
-    return NextResponse.json({ error: "Database error.", details: err.message }, { status: 500 });
+
+    // Counters am Statement anpassen
+    const inc: Record<string, number> = {};
+    if (!existing) {
+      inc[`votes.${v}`] = 1;
+      inc["stats.votesTotal"] = 1;
+      if (v === "agree") inc["stats.votesAgree"] = 1;
+      if (v === "neutral") inc["stats.votesNeutral"] = 1;
+      if (v === "disagree") inc["stats.votesDisagree"] = 1;
+    } else if (existing.value !== v) {
+      inc[`votes.${existing.value as Val}`] = -1;
+      inc[`votes.${v}`] = (inc[`votes.${v}`] ?? 0) + 1;
+
+      if (existing.value === "agree") inc["stats.votesAgree"] = (inc["stats.votesAgree"] ?? 0) - 1;
+      if (existing.value === "neutral") inc["stats.votesNeutral"] = (inc["stats.votesNeutral"] ?? 0) - 1;
+      if (existing.value === "disagree") inc["stats.votesDisagree"] = (inc["stats.votesDisagree"] ?? 0) - 1;
+
+      if (v === "agree") inc["stats.votesAgree"] = (inc["stats.votesAgree"] ?? 0) + 1;
+      if (v === "neutral") inc["stats.votesNeutral"] = (inc["stats.votesNeutral"] ?? 0) + 1;
+      if (v === "disagree") inc["stats.votesDisagree"] = (inc["stats.votesDisagree"] ?? 0) + 1;
+    }
+    if (Object.keys(inc).length) {
+      await stmts.updateOne({ _id: statementId }, { $inc: inc });
+    }
+
+    return NextResponse.json({ ok: true });
+  } catch (e: any) {
+    console.error("POST /api/votes/submit failed:", e?.message || e);
+    return NextResponse.json({ error: "failed" }, { status: 500 });
   }
 }
+ 
\ No newline at end of file
diff --git a/apps/web/src/app/api/votes/summary/route.ts b/apps/web/src/app/api/votes/summary/route.ts
index d28c1203..f31ec301 100644
--- a/apps/web/src/app/api/votes/summary/route.ts
+++ b/apps/web/src/app/api/votes/summary/route.ts
@@ -3,12 +3,8 @@ export const runtime = "nodejs";
 export const dynamic = "force-dynamic";
 
 import { NextRequest, NextResponse } from "next/server";
-import {
-  ObjectId,
-  type Filter,
-  type FindOptions,
-} from "mongodb";
-import { coreCol, votesCol } from "src/utils/triMongo";
+import { ObjectId, type Filter, type FindOptions } from "mongodb";
+import { coreCol, votesCol } from "@core/triMongo";
 
 type SummaryKey = "agree" | "neutral" | "disagree";
 type Summary = Record<SummaryKey, number>;
@@ -32,51 +28,40 @@ function normChoice(raw: unknown): SummaryKey {
   if (v === "disagree" || v === "no" || v === "contra" || v === "against") return "disagree";
   return "neutral";
 }
-
+function emptySummary(): Summary { return { agree: 0, neutral: 0, disagree: 0 }; }
+function coerceSummary(v: any): Summary {
+  return {
+    agree: Number.isFinite(v?.agree) ? v.agree : 0,
+    neutral: Number.isFinite(v?.neutral) ? v.neutral : 0,
+    disagree: Number.isFinite(v?.disagree) ? v.disagree : 0,
+  };
+}
 function computeResult(rule: VotingRule, s: Summary): "passed" | "not_passed" | null {
   const total = s.agree + s.neutral + s.disagree;
   if (total === 0) return null;
   if (rule.minQuorum && total < rule.minQuorum) return "not_passed";
-
   if (rule.type === "two-thirds") {
     const needed = Math.ceil((2 * total) / 3);
     return s.agree >= needed ? "passed" : "not_passed";
   }
-  // simple-majority & weighted ‚Üí Mehrheit der (ggf. gewichteten) Stimmen
   return s.agree > s.disagree ? "passed" : "not_passed";
 }
 
-function emptySummary(): Summary {
-  return { agree: 0, neutral: 0, disagree: 0 };
-}
-
-function coerceSummary(v: any): Summary {
-  return {
-    agree: typeof v?.agree === "number" && Number.isFinite(v.agree) ? v.agree : 0,
-    neutral: typeof v?.neutral === "number" && Number.isFinite(v.neutral) ? v.neutral : 0,
-    disagree: typeof v?.disagree === "number" && Number.isFinite(v.disagree) ? v.disagree : 0,
-  };
-}
-
 export async function GET(req: NextRequest) {
   const url = new URL(req.url);
   const statementIdParam = url.searchParams.get("statementId");
   const fresh = url.searchParams.get("fresh") === "true";
-
   if (!statementIdParam) {
-    return NextResponse.json({ error: "Missing statementId." }, { status: 400 });
+    return NextResponse.json({ ok: false, error: "Missing statementId" }, { status: 400 });
   }
-  // Ab hier typ-sicher als string behandeln
-  const statementIdStr: string = statementIdParam;
+  const statementIdStr = statementIdParam;
+  const isObjId = ObjectId.isValid(statementIdStr);
 
-  // Collections
   const stmtsRef = await coreCol<any>("statements");
   const votesRef = await votesCol<VoteDoc>("votes");
 
-  // Statement laden: erst via _id:ObjectId, dann via id:string
-  const isObjId = ObjectId.isValid(statementIdStr);
+  // Statement (f√ºr votingRule + ggf. Cache)
   let statement: any = null;
-
   if (isObjId) {
     statement = await stmtsRef.findOne(
       { _id: new ObjectId(statementIdStr) },
@@ -90,36 +75,24 @@ export async function GET(req: NextRequest) {
     );
   }
   if (!statement) {
-    return NextResponse.json({ error: "Statement not found." }, { status: 404 });
+    return NextResponse.json({ ok: false, error: "Statement not found" }, { status: 404 });
   }
 
   const votingRule: VotingRule = statement.votingRule || { type: "simple-majority" };
 
-  // Live-Zusammenfassung aus votes-Collection (f√ºr fresh/weighted/Inkonsistenzen)
-  async function summaryFromVotes(): Promise<{ summary: Summary; total: number; source: "live" }> {
-    // Filter OHNE nulls ‚Üí ts(2322) vermeiden
+  async function summaryFromVotes(): Promise<{ summary: Summary; total: number }> {
     let match: Filter<VoteDoc>;
     if (isObjId) {
-      match = {
-        $or: [
-          { statementId: new ObjectId(statementIdStr) },
-          { statementId: statementIdStr },
-        ],
-      };
+      match = { $or: [{ statementId: new ObjectId(statementIdStr) }, { statementId: statementIdStr }] };
     } else {
       match = { statementId: statementIdStr };
     }
-
-    // Projection typ-sicher; Options klar typisiert ‚Üí ts(2769) vermeiden
-    const projection = { vote: 1 as const, choice: 1 as const, role: 1 as const };
-    const options: FindOptions<VoteDoc> = { projection };
-
+    const options: FindOptions<VoteDoc> = { projection: { vote: 1, choice: 1, role: 1 } };
     const cursor = votesRef.find(match, options).batchSize(1000);
 
     const weighted = votingRule.type === "weighted";
     const weightMap = (votingRule as any).weightMap || {};
-
-    let summary = emptySummary();
+    let s = emptySummary();
     let total = 0;
 
     for await (const doc of cursor) {
@@ -128,20 +101,18 @@ export async function GET(req: NextRequest) {
         const role = doc?.role ?? "B√ºrger";
         const wRaw = (weightMap as Record<string, unknown>)[role];
         const w = typeof wRaw === "number" && Number.isFinite(wRaw) ? wRaw : 1;
-        summary[key] += w;
+        s[key] += w;
         total += w;
       } else {
-        summary[key] += 1;
+        s[key] += 1;
         total += 1;
       }
     }
-
-    return { summary, total, source: "live" };
+    return { summary: s, total };
   }
 
-  // Schnellpfad: cached Summary aus Statement-Dokument
-  const cachedVotes = coerceSummary(statement.votes);
-  const cachedTotal = cachedVotes.agree + cachedVotes.neutral + cachedVotes.disagree;
+  const cached = coerceSummary(statement.votes);
+  const cachedTotal = cached.agree + cached.neutral + cached.disagree;
   const stats = {
     views: Number(statement?.stats?.views) || 0,
     votesAgree: Number(statement?.stats?.votesAgree) || 0,
@@ -150,29 +121,25 @@ export async function GET(req: NextRequest) {
     votesTotal: Number(statement?.stats?.votesTotal) || cachedTotal,
   };
 
-  let summary: Summary;
+  const mustLive = fresh || votingRule.type === "weighted" || (cachedTotal === 0 && stats.votesTotal > 0);
+
+  let data: Summary;
   let total: number;
   let source: "cached" | "live" = "cached";
-
-  const mustLive =
-    fresh ||
-    votingRule.type === "weighted" ||
-    (cachedTotal === 0 && stats.votesTotal > 0);
-
   if (mustLive) {
     const live = await summaryFromVotes();
-    summary = live.summary;
+    data = live.summary;
     total = live.total;
-    source = live.source;
+    source = "live";
   } else {
-    summary = cachedVotes;
+    data = cached;
     total = cachedTotal;
   }
 
-  const result = computeResult(votingRule, summary);
+  const result = computeResult(votingRule, data);
 
   return NextResponse.json(
-    { summary, total, votingRule, result, stats, source },
+    { ok: true, data, meta: { total, votingRule, result, stats, source } },
     { status: 200 }
   );
 }
diff --git a/apps/web/src/app/api/votes/user.ts b/apps/web/src/app/api/votes/user.ts
index b0d2cbfb..7b80a555 100644
--- a/apps/web/src/app/api/votes/user.ts
+++ b/apps/web/src/app/api/votes/user.ts
@@ -1,20 +1,24 @@
-// api/votes/user.ts (Next.js API Route)
+// apps/web/src/app/api/votes/user/route.ts
+export const runtime = "nodejs";
+export const dynamic = "force-dynamic";
 
-import dbConnect from "@/utils/dbConnect";
-import Vote from "@/models/Vote";
+import { NextRequest, NextResponse } from "next/server";
+import { votesCol } from "@core/triMongo";
 
-export default async function handler(req, res) {
-  await dbConnect();
-
-  const { statementId, userHash } = req.query;
-  if (!statementId || !userHash) {
-    return res.status(400).json({ error: "Missing parameters." });
+export async function GET(req: NextRequest) {
+  const url = new URL(req.url);
+  const statementId = (url.searchParams.get("statementId") || "").trim();
+  if (!statementId) {
+    return NextResponse.json({ ok: false, error: "Missing 'statementId'." }, { status: 400 });
   }
+  const votes = await votesCol("votes");
+  const agg = await votes.aggregate([
+    { $match: { statementId } },
+    { $group: { _id: "$value", n: { $sum: 1 } } },
+  ]).toArray();
 
-  try {
-    const vote = await Vote.findOne({ statementId, userHash });
-    return res.status(200).json({ vote: vote ? vote.vote : null });
-  } catch (err) {
-    return res.status(500).json({ error: "Database error.", details: err.message });
-  }
+  const counts: Record<string, number> = { agree: 0, neutral: 0, disagree: 0 };
+  for (const g of agg) counts[g._id] = g.n;
+
+  return NextResponse.json({ ok: true, data: { statementId, counts } });
 }
diff --git a/apps/web/src/app/api/votes/user/route.ts b/apps/web/src/app/api/votes/user/route.ts
index 3d9b8d95..d55da198 100644
--- a/apps/web/src/app/api/votes/user/route.ts
+++ b/apps/web/src/app/api/votes/user/route.ts
@@ -1,7 +1,7 @@
 import { NextResponse } from "next/server";
 import { Types } from "mongoose";
 import { getServerUser } from "@/lib/auth/getServerUser";
-import { VoteModel } from "@/models/Vote";
+import { VoteModel } from "@/models/votes/Vote";
 import crypto from "crypto";
 
 export const dynamic = "force-dynamic";
diff --git a/apps/web/src/app/api/you/ping/route.ts b/apps/web/src/app/api/you/ping/route.ts
index 281ac68d..660eb6dc 100644
--- a/apps/web/src/app/api/you/ping/route.ts
+++ b/apps/web/src/app/api/you/ping/route.ts
@@ -1,5 +1,5 @@
 import { NextResponse } from 'next/server';
-import { youQuery } from '@features/ai/youClient';
+import { youQuery } from '@features/utils/ai/youClient';
 
 export async function GET() {
   const result = await youQuery('Who is the current UN Secretary-General?', { locale: 'en' });
diff --git a/apps/web/src/app/api/you/query/route.ts b/apps/web/src/app/api/you/query/route.ts
index df3815d9..61a088a8 100644
--- a/apps/web/src/app/api/you/query/route.ts
+++ b/apps/web/src/app/api/you/query/route.ts
@@ -1,7 +1,7 @@
 // 
 // apps/web/src/app/api/you/query/route.ts
 import { NextRequest, NextResponse } from 'next/server';
-import { youQuery } from '@features/ai/youClient';
+import { youQuery } from '@features/utils/ai/youClient';
 
 export const dynamic = 'force-dynamic';
 
diff --git a/apps/web/src/app/dashboard/errors/page.tsx b/apps/web/src/app/dashboard/errors/page.tsx
index ecb890d9..ab3201f4 100644
--- a/apps/web/src/app/dashboard/errors/page.tsx
+++ b/apps/web/src/app/dashboard/errors/page.tsx
@@ -1,4 +1,4 @@
-import AdminErrorLog from "@features/dashboard/AdminErrorLog";
+import AdminErrorLog from "@/app/dashboard/admin/AdminErrorLog";
 
 export default function ErrorDashboard() {
   return <AdminErrorLog />;
diff --git a/apps/web/src/app/dashboard/health/page.tsx b/apps/web/src/app/dashboard/health/page.tsx
index 16ff60a5..aa83d2d4 100644
--- a/apps/web/src/app/dashboard/health/page.tsx
+++ b/apps/web/src/app/dashboard/health/page.tsx
@@ -1,5 +1,5 @@
-import DashboardLayout from "../components/DashboardLayout";
-import SystemMatrix from "../components/SystemMatrix";
+import DashboardLayout from "@features/dashboard/components/DashboardLayout";
+import SystemMatrix from "@features/dashboard/components/SystemMatrix";
 export default function HealthPage() {
   return (
     <DashboardLayout>
diff --git a/apps/web/src/app/report/page.tsx b/apps/web/src/app/report/page.tsx
index fcdbd251..aa36e5e3 100644
--- a/apps/web/src/app/report/page.tsx
+++ b/apps/web/src/app/report/page.tsx
@@ -2,22 +2,35 @@
 import { redirect } from "next/navigation";
 import { getServerUser } from "@/lib/auth/getServerUser";
 import ReportPage from "@features/report/components/ReportPage";
-import UserHydrator from "@features/user/components/UserHydrator";
+import UserHydrator, { type User as HydratorUser } from "@features/user/components/UserHydrator";
 
 export const dynamic = "force-dynamic";
 export const revalidate = 0;
 
+/** Server‚ÜíClient User-Shape sicher mappen (id oder _id) */
+function toHydratorUser(u: any): HydratorUser | null {
+  if (!u) return null;
+  return {
+    id: String(u.id ?? u._id ?? ""),
+    email: u.email ?? "",
+    name: u.name ?? null,
+    roles: Array.isArray(u.roles) ? u.roles : ["user"],
+  };
+}
+
 export default async function Page() {
-  const user = await getServerUser(); // sichere Server-Auth
+  const user = await getServerUser();
   if (!user || !user.verified) {
     redirect("/login?next=/report&reason=verified-only");
   }
 
-  // Optional: User in den Client-Context ‚Äûspiegeln‚Äú (f√ºr Header, Men√ºs, etc.)
+  // TODO: Falls du echte Reports laden willst, hier via triMongo bef√ºllen:
+  // const initial = await coreCol("reports").then(col => col.find({ ownerId: user.id }).limit(20).toArray());
+  const initial: any[] = [];
+
   return (
-    <>
-      <UserHydrator user={user} />
-      <ReportPage user={user} />
-    </>
+    <UserHydrator initialUser={toHydratorUser(user)}>
+      <ReportPage initial={initial} />
+    </UserHydrator>
   );
 }
diff --git a/apps/web/src/app/statements/[id]/page.tsx b/apps/web/src/app/statements/[id]/page.tsx
index da67ca95..40d8bc20 100644
--- a/apps/web/src/app/statements/[id]/page.tsx
+++ b/apps/web/src/app/statements/[id]/page.tsx
@@ -4,7 +4,7 @@ export const dynamic = "force-dynamic";
 import "server-only";
 import { notFound } from "next/navigation";
 import { ObjectId } from "mongodb";
-import { coreCol } from "@/utils/triMongo";                 // ‚¨ÖÔ∏è triMongo statt getCoreCol
+import { coreCol } from "@core/db/triMongo";                 // ‚¨ÖÔ∏è triMongo statt getCoreCol
 import StatementDetailClient from "@features/statement/components/StatementDetailClient";
 
 type Stats = { votesTotal: number; votesAgree: number; votesNeutral: number; votesDisagree: number };
diff --git a/apps/web/src/components/QuickRegister.tsx b/apps/web/src/components/QuickRegister.tsx
index 58c3a99c..3f6094ae 100644
--- a/apps/web/src/components/QuickRegister.tsx
+++ b/apps/web/src/components/QuickRegister.tsx
@@ -1,52 +1,75 @@
-import { absUrl } from "@/utils/serverBaseUrl";
-import { useState } from "react";
+// apps/web/src/components/QuickRegister.tsx
+"use client";
 
-export default function QuickRegister({ onSuccess }) {
+import { useState, ReactElement } from "react";
+
+type Props = {
+  onSuccess?: (data: any) => void;
+  endpoint?: string;
+  placeholder?: string;
+  buttonLabel?: string;
+};
+
+export default function QuickRegister({
+  onSuccess,
+  endpoint = "/api/quick-register",
+  placeholder = "Dein Name",
+  buttonLabel = "Teilnehmen",
+}: Props): ReactElement {
   const [name, setName] = useState("");
   const [loading, setLoading] = useState(false);
-  const [error, setError] = useState("");
+  const [error, setError] = useState<string | null>(null);
 
-  async function handleQuickRegister(e) {
+  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
     e.preventDefault();
+    setError(null);
+    const username = name.trim();
+    if (!username) return setError("Bitte einen Namen eingeben.");
+
     setLoading(true);
-    setError("");
     try {
-      const res = await fetch(absUrl("/api/quick-register", {
+      const res = await fetch(endpoint, {
         method: "POST",
         headers: { "Content-Type": "application/json" },
-        body: JSON.stringify({ username: name }),
+        cache: "no-store",
+        body: JSON.stringify({ username }),
       });
-      const data = await res.json();
-      if (!res.ok) throw new Error(data.error);
-      onSuccess?.(data.data);
-    } catch (err) {
-      setError(err.message || "Unbekannter Fehler");
+      const json = await res.json().catch(() => ({}));
+      if (!res.ok) throw new Error(json?.error || "Registrierung fehlgeschlagen");
+      onSuccess?.(json?.data ?? json);
+      setName("");
+    } catch (err: unknown) {
+      setError(err instanceof Error ? err.message : "Unbekannter Fehler");
     } finally {
       setLoading(false);
     }
   }
 
   return (
-    <form onSubmit={handleQuickRegister} className="space-y-4">
+    <form onSubmit={handleSubmit} className="space-y-3" aria-live="polite">
       <input
         type="text"
-        placeholder="Dein Name"
+        placeholder={placeholder}
         className="w-full border-2 rounded px-3 py-2"
         value={name}
-        onChange={e => setName(e.target.value)}
+        onChange={(e) => setName(e.target.value)}
         disabled={loading}
         required
       />
+
       <button
         type="submit"
-        className="w-full bg-[#9333ea] text-white font-semibold rounded py-2 mt-2 hover:bg-[#7c2bd0] transition"
+        className="w-full bg-[#9333ea] text-white font-semibold rounded py-2 mt-1 hover:bg-[#7c2bd0] transition disabled:opacity-60"
         disabled={loading}
       >
-        {loading ? "Wird gespeichert..." : "Teilnehmen"}
+        {loading ? "Wird gespeichert‚Ä¶" : buttonLabel}
       </button>
-      {error && <p className="text-red-500 text-sm">{error}</p>}
-      <p className="text-xs text-gray-500 mt-1">
-        Hinweis: Ohne Registrierung wird dein Name nicht dauerhaft gespeichert und du nimmst anonym an dieser Aktion teil.
+
+      {error && <p className="text-red-600 text-sm">{error}</p>}
+
+      <p className="text-xs text-gray-500">
+        Hinweis: Ohne Registrierung wird dein Name nicht dauerhaft gespeichert
+        und du nimmst anonym an dieser Aktion teil.
       </p>
     </form>
   );
diff --git a/apps/web/src/components/SetBuilder.tsx b/apps/web/src/components/SetBuilder.tsx
index 0f91f1a8..5f66a5e2 100644
--- a/apps/web/src/components/SetBuilder.tsx
+++ b/apps/web/src/components/SetBuilder.tsx
@@ -1,13 +1,28 @@
-import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
+// apps/web/src/components/SetBuilder.tsx
+"use client";
 
-export default function SetBuilder({ selected, onChange }) {
-  function handleDragEnd(result) {
+import { DragDropContext, Droppable, Draggable, type DropResult } from "react-beautiful-dnd";
+
+type SetItem = {
+  _id: string;
+  title?: string;
+  topic?: string;
+};
+
+type Props = {
+  selected: SetItem[];
+  onChange: (next: SetItem[]) => void;
+};
+
+export default function SetBuilder({ selected, onChange }: Props) {
+  function handleDragEnd(result: DropResult) {
     if (!result.destination) return;
     const items = Array.from(selected);
     const [reordered] = items.splice(result.source.index, 1);
     items.splice(result.destination.index, 0, reordered);
     onChange(items);
   }
+
   return (
     <DragDropContext onDragEnd={handleDragEnd}>
       <Droppable droppableId="setList">
diff --git a/apps/web/src/components/SiteHeader.tsx b/apps/web/src/components/SiteHeader.tsx
index c073e97a..f494225d 100644
--- a/apps/web/src/components/SiteHeader.tsx
+++ b/apps/web/src/components/SiteHeader.tsx
@@ -1,12 +1,25 @@
-import { cookies } from "next/headers";
-export default function SiteHeader(){
-  const role = cookies().get("u_role")?.value;
+// apps/web/src/components/SiteHeader.tsx
+import { getCookie } from "@/lib/http/typedCookies";
+
+function toVal(v: unknown): string | undefined {
+  return typeof v === "string" ? v : (v as any)?.value;
+}
+
+export default async function SiteHeader() {
+  // Cookie asynchron lesen (Helper kann string ODER { value } liefern)
+  const role = toVal(await getCookie("u_role")) ?? "guest";
+
   return (
-    <header className="...">
-      {/* ... */}
-      <nav className="ml-auto flex gap-4">
-        {/* ... */}
-        {role==="admin" && <a href="/admin" className="underline">Admin</a>}
+    <header className="flex items-center justify-between px-4 py-3">
+      <div className="font-semibold">VoiceOpenGov</div>
+
+      <nav className="ml-auto flex items-center gap-4">
+        <span className="text-sm opacity-80">Role: {role}</span>
+        {role === "admin" && (
+          <a href="/admin" className="underline">
+            Admin
+          </a>
+        )}
       </nav>
     </header>
   );
diff --git a/apps/web/src/components/ThemaGrid.tsx b/apps/web/src/components/ThemaGrid.tsx
index b1267230..80cff14d 100644
--- a/apps/web/src/components/ThemaGrid.tsx
+++ b/apps/web/src/components/ThemaGrid.tsx
@@ -1,26 +1,33 @@
+// apps/web/src/components/ThemaGrid.tsx
+import { type ReactNode } from "react";
 import { colors } from "@vog/ui/theme";
 
-export function ThemaGrid({ items }) {
+type Thema = {
+  icon: ReactNode;
+  title: string;
+  desc?: string;
+  href: string;
+  color?: string;
+};
+
+export function ThemaGrid({ items }: { items: Thema[] }) {
   return (
     <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 my-8">
-      {items.map(item => (
+      {items.map((item) => (
         <a
-          key={item.title}
+          key={item.href}
           href={item.href || "#"}
           className="block p-5 rounded-2xl shadow-lg bg-white border transition hover:bg-indigo-50"
-          style={{ borderColor: item.color || colors.indigo, color: item.color || colors.indigo }}
+          style={{
+            borderColor: item.color ?? colors.indigo,
+            color: item.color ?? colors.indigo,
+          }}
         >
           <div className="text-2xl mb-2">{item.icon}</div>
           <div className="font-bold text-lg mb-1">{item.title}</div>
-          <div className="text-sm opacity-80">{item.desc}</div>
+          {item.desc && <div className="text-sm opacity-80">{item.desc}</div>}
         </a>
       ))}
     </div>
   );
 }
-
-// Beispiel-Aufruf:
-// <ThemaGrid items={[
-//   { icon: "üåä", title: "Klimaschutz", desc: "Was bewegt deine Region?", href: "/thema/klima", color: colors.turquoise },
-//   { icon: "üè•", title: "Gesundheit", desc: "Ideen & Abstimmungen", href: "/thema/gesundheit", color: colors.coral },
-// ]} />
diff --git a/apps/web/src/config/accessControl.ts b/apps/web/src/config/accessControl.ts
index beedebe4..6d031ff2 100644
--- a/apps/web/src/config/accessControl.ts
+++ b/apps/web/src/config/accessControl.ts
@@ -1,30 +1,30 @@
 // apps/web/src/config/accessControl.ts
 
-export type UserRole = "guest" | "user" | "moderator" | "admin" | "ngo" | "politics" | "legitimized" | "premium" | string;
+export type Role =
+  | "guest"
+  | "user"
+  | "legitimized"
+  | "admin"
+  | "moderator"
+  | "ngo"
+  | "politics";
 
-interface RouteAccessRule {
-  path: string; // z.‚ÄØB. "/report", "/stream"
-  label?: string; // f√ºr Sidebar/Navigation (optional)
-  allowedRoles: UserRole[]; // Liste der erlaubten Rollen
-  customCheck?: (user: any) => boolean; // Optional: Extra-Checker (z.‚ÄØB. "legitimized" UND "premium" etc.)
+export interface AccessRule {
+  path: string;
+  allowedRoles: Role[];
 }
 
-// Hier alle Seiten + Rechte
-export const ACCESS_RULES: RouteAccessRule[] = [
-  {
-    path: "/report",
-    label: "Report",
-    allowedRoles: ["user", "admin", "legitimized", "moderator"],
-  },
-  {
-    path: "/stream",
-    label: "Live & Replay",
-    allowedRoles: ["user", "legitimized", "admin", "moderator", "ngo", "politics],
-  },
-  {
-    path: "/dashboard",
-    label: "Dashboard",
-    allowedRoles: ["admin", "user", "legitimized", "moderator", "ngo", "politics"],
-  },
-  // ... beliebig viele weitere Seiten!
-];
+export interface AccessControlConfig {
+  rules: AccessRule[];
+  defaultRole?: Role;
+}
+
+export const accessControl: AccessControlConfig = {
+  rules: [
+    { path: "/admin", allowedRoles: ["admin", "moderator"] },
+    { path: "/account", allowedRoles: ["user", "legitimized", "admin", "moderator", "ngo", "politics"] },
+    { path: "/ngo", allowedRoles: ["ngo", "admin", "moderator"] },
+    { path: "/politics", allowedRoles: ["politics", "admin", "moderator"] },
+  ],
+  defaultRole: "guest",
+};
diff --git a/apps/web/src/db/web/edge.js b/apps/web/src/db/web/edge.js
index 2009b30f..d6eba34a 100644
--- a/apps/web/src/db/web/edge.js
+++ b/apps/web/src/db/web/edge.js
@@ -92,6 +92,13 @@ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
   Serializable: 'Serializable'
 });
 
+exports.Prisma.RegionScalarFieldEnum = {
+  id: 'id',
+  code: 'code',
+  name: 'name',
+  level: 'level'
+};
+
 exports.Prisma.TopicScalarFieldEnum = {
   id: 'id',
   slug: 'slug',
@@ -212,6 +219,7 @@ exports.Locale = exports.$Enums.Locale = {
 };
 
 exports.Prisma.ModelName = {
+  Region: 'Region',
   Topic: 'Topic',
   Tag: 'Tag',
   TopicTag: 'TopicTag',
@@ -266,13 +274,13 @@ const config = {
       }
     }
   },
-  "inlineSchema": "// prisma/web/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../apps/web/src/db/web\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"WEB_POSTGRES_URL\") // ggf. an deine ENV anpassen\n}\n\n//\n// ---------- ENUMS ----------\nenum ContentKind {\n  SWIPE\n  EVENT\n  SUNDAY_POLL\n}\n\nenum PublishStatus {\n  draft\n  review\n  published\n  archived\n}\n\nenum RegionMode {\n  AUTO\n  MANUAL\n}\n\nenum Locale {\n  de\n  en\n  fr\n  it\n  es\n  pl\n  uk\n  ru\n  tr\n  hi\n  zh\n  ar\n}\n\n//\n// ---------- CONTENT / TOPIC / TAG ----------\nmodel Topic {\n  id          String   @id @default(cuid())\n  slug        String   @unique\n  title       String\n  description String?\n  locale      Locale   @default(de)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  items ContentItem[]\n  tags  TopicTag[]\n\n  @@index([locale])\n  @@index([createdAt])\n}\n\nmodel Tag {\n  id     String     @id @default(cuid())\n  slug   String     @unique\n  label  String\n  topics TopicTag[]\n  items  ItemTag[]\n}\n\nmodel TopicTag {\n  id      String @id @default(cuid())\n  topicId String\n  tagId   String\n\n  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([topicId, tagId])\n  @@index([topicId])\n  @@index([tagId])\n}\n\nmodel ItemTag {\n  id     String @id @default(cuid())\n  itemId String\n  tagId  String\n\n  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([itemId, tagId])\n  @@index([itemId])\n  @@index([tagId])\n}\n\nmodel ContentItem {\n  id   String      @id @default(cuid())\n  kind ContentKind\n\n  topicId String\n  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  locale    Locale  @default(de)\n  title     String?\n  text      String\n  richText  String?\n  sortOrder Int     @default(0) @map(\"order\") // statt \"order\"\n\n  status     PublishStatus @default(draft)\n  authorName String?\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  publishAt DateTime?\n  expireAt  DateTime?\n\n  regionMode        RegionMode @default(AUTO)\n  regionManualId    String?\n  regionEffectiveId String?\n  regionAuto        Json?\n\n  validation Json?\n  meta       Json?\n\n  answerOptions AnswerOption[]\n  tags          ItemTag[]\n\n  @@index([kind, status, locale])\n  @@index([publishAt])\n  @@index([topicId])\n  @@index([createdAt])\n}\n\nmodel AnswerOption {\n  id        String      @id @default(cuid())\n  itemId    String\n  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  label     String\n  value     String\n  sortOrder Int         @default(0) @map(\"order\")\n  exclusive Boolean     @default(false)\n  meta      Json?\n\n  @@unique([itemId, sortOrder])\n  @@unique([itemId, value])\n}\n",
-  "inlineSchemaHash": "01a7d69ab5c4fe913d0d7565ffc54b2d48b631bfa3c7755714e7f6a7a422d74e",
+  "inlineSchema": "// prisma/web/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../apps/web/src/db/web\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"WEB_POSTGRES_URL\") // ggf. ENV anpassen\n}\n\n//\n// ---------- ENUMS ----------\nenum ContentKind {\n  SWIPE\n  EVENT\n  SUNDAY_POLL\n}\n\nenum PublishStatus {\n  draft\n  review\n  published\n  archived\n}\n\nenum RegionMode {\n  AUTO\n  MANUAL\n}\n\nenum Locale {\n  de\n  en\n  fr\n  it\n  es\n  pl\n  uk\n  ru\n  tr\n  hi\n  zh\n  ar\n}\n\n//\n// ---------- REGION ----------\nmodel Region {\n  id    String @id @default(cuid())\n  code  String @unique\n  name  String\n  level Int\n\n  // Back-Relations zu ContentItem (klar benannte Relationen!)\n  manualItems    ContentItem[] @relation(\"ContentItemRegionManual\")\n  effectiveItems ContentItem[] @relation(\"ContentItemRegionEffective\")\n\n  @@index([code])\n}\n\n//\n// ---------- CONTENT / TOPIC / TAG ----------\nmodel Topic {\n  id          String   @id @default(cuid())\n  slug        String   @unique\n  title       String\n  description String?\n  locale      Locale   @default(de)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  items ContentItem[]\n  tags  TopicTag[]\n\n  @@index([locale])\n  @@index([createdAt])\n}\n\nmodel Tag {\n  id     String     @id @default(cuid())\n  slug   String     @unique\n  label  String\n  topics TopicTag[]\n  items  ItemTag[]\n}\n\nmodel TopicTag {\n  id      String @id @default(cuid())\n  topicId String\n  tagId   String\n\n  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([topicId, tagId])\n  @@index([topicId])\n  @@index([tagId])\n}\n\nmodel ItemTag {\n  id     String @id @default(cuid())\n  itemId String\n  tagId  String\n\n  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([itemId, tagId])\n  @@index([itemId])\n  @@index([tagId])\n}\n\nmodel ContentItem {\n  id   String      @id @default(cuid())\n  kind ContentKind\n\n  topicId String\n  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  locale    Locale  @default(de)\n  title     String?\n  text      String\n  richText  String?\n  sortOrder Int     @default(0) @map(\"order\") // statt \"order\"\n\n  status     PublishStatus @default(draft)\n  authorName String?\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  publishAt DateTime?\n  expireAt  DateTime?\n\n  regionMode        RegionMode @default(AUTO)\n  regionManualId    String?\n  regionEffectiveId String?\n  regionAuto        Json?\n\n  // --- KORREKTE, BENANNTE RELATIONEN ZU Region ---\n  regionManual    Region? @relation(\"ContentItemRegionManual\", fields: [regionManualId], references: [id])\n  regionEffective Region? @relation(\"ContentItemRegionEffective\", fields: [regionEffectiveId], references: [id])\n\n  validation Json?\n  meta       Json?\n\n  answerOptions AnswerOption[]\n  tags          ItemTag[]\n\n  @@index([kind, status, locale])\n  @@index([publishAt])\n  @@index([topicId])\n  @@index([createdAt])\n  @@index([regionManualId])\n  @@index([regionEffectiveId])\n}\n\nmodel AnswerOption {\n  id        String      @id @default(cuid())\n  itemId    String\n  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  label     String\n  value     String\n  sortOrder Int         @default(0) @map(\"order\")\n  exclusive Boolean     @default(false)\n  meta      Json?\n\n  @@unique([itemId, sortOrder])\n  @@unique([itemId, value])\n}\n",
+  "inlineSchemaHash": "20ac4b05e2e5b03e08f6cf8fb35c644f55fe4f8070d4d299b68cdd352ad95f47",
   "copyEngine": true
 }
 config.dirname = '/'
 
-config.runtimeDataModel = JSON.parse("{\"models\":{\"Topic\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locale\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Locale\",\"nativeType\":null,\"default\":\"de\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"items\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemToTopic\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tags\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"TopicTag\",\"nativeType\":null,\"relationName\":\"TopicToTopicTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Tag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topics\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"TopicTag\",\"nativeType\":null,\"relationName\":\"TagToTopicTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"items\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ItemTag\",\"nativeType\":null,\"relationName\":\"ItemTagToTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"TopicTag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topicId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tagId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topic\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Topic\",\"nativeType\":null,\"relationName\":\"TopicToTopicTag\",\"relationFromFields\":[\"topicId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tag\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Tag\",\"nativeType\":null,\"relationName\":\"TagToTopicTag\",\"relationFromFields\":[\"tagId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"topicId\",\"tagId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"topicId\",\"tagId\"]}],\"isGenerated\":false},\"ItemTag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"itemId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tagId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"item\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemToItemTag\",\"relationFromFields\":[\"itemId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tag\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Tag\",\"nativeType\":null,\"relationName\":\"ItemTagToTag\",\"relationFromFields\":[\"tagId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"itemId\",\"tagId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"itemId\",\"tagId\"]}],\"isGenerated\":false},\"ContentItem\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"kind\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentKind\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topicId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topic\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Topic\",\"nativeType\":null,\"relationName\":\"ContentItemToTopic\",\"relationFromFields\":[\"topicId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locale\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Locale\",\"nativeType\":null,\"default\":\"de\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"text\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"richText\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sortOrder\",\"dbName\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"status\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"PublishStatus\",\"nativeType\":null,\"default\":\"draft\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"authorName\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"publishAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"expireAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionMode\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"RegionMode\",\"nativeType\":null,\"default\":\"AUTO\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionManualId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionEffectiveId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionAuto\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"validation\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"meta\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"answerOptions\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"AnswerOption\",\"nativeType\":null,\"relationName\":\"AnswerOptionToContentItem\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tags\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ItemTag\",\"nativeType\":null,\"relationName\":\"ContentItemToItemTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"AnswerOption\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"itemId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"item\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"AnswerOptionToContentItem\",\"relationFromFields\":[\"itemId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"value\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sortOrder\",\"dbName\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"exclusive\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"meta\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"itemId\",\"sortOrder\"],[\"itemId\",\"value\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"itemId\",\"sortOrder\"]},{\"name\":null,\"fields\":[\"itemId\",\"value\"]}],\"isGenerated\":false}},\"enums\":{\"ContentKind\":{\"values\":[{\"name\":\"SWIPE\",\"dbName\":null},{\"name\":\"EVENT\",\"dbName\":null},{\"name\":\"SUNDAY_POLL\",\"dbName\":null}],\"dbName\":null},\"PublishStatus\":{\"values\":[{\"name\":\"draft\",\"dbName\":null},{\"name\":\"review\",\"dbName\":null},{\"name\":\"published\",\"dbName\":null},{\"name\":\"archived\",\"dbName\":null}],\"dbName\":null},\"RegionMode\":{\"values\":[{\"name\":\"AUTO\",\"dbName\":null},{\"name\":\"MANUAL\",\"dbName\":null}],\"dbName\":null},\"Locale\":{\"values\":[{\"name\":\"de\",\"dbName\":null},{\"name\":\"en\",\"dbName\":null},{\"name\":\"fr\",\"dbName\":null},{\"name\":\"it\",\"dbName\":null},{\"name\":\"es\",\"dbName\":null},{\"name\":\"pl\",\"dbName\":null},{\"name\":\"uk\",\"dbName\":null},{\"name\":\"ru\",\"dbName\":null},{\"name\":\"tr\",\"dbName\":null},{\"name\":\"hi\",\"dbName\":null},{\"name\":\"zh\",\"dbName\":null},{\"name\":\"ar\",\"dbName\":null}],\"dbName\":null}},\"types\":{}}")
+config.runtimeDataModel = JSON.parse("{\"models\":{\"Region\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"code\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"level\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"manualItems\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemRegionManual\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"effectiveItems\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemRegionEffective\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Topic\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locale\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Locale\",\"nativeType\":null,\"default\":\"de\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"items\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemToTopic\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tags\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"TopicTag\",\"nativeType\":null,\"relationName\":\"TopicToTopicTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Tag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topics\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"TopicTag\",\"nativeType\":null,\"relationName\":\"TagToTopicTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"items\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ItemTag\",\"nativeType\":null,\"relationName\":\"ItemTagToTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"TopicTag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topicId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tagId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topic\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Topic\",\"nativeType\":null,\"relationName\":\"TopicToTopicTag\",\"relationFromFields\":[\"topicId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tag\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Tag\",\"nativeType\":null,\"relationName\":\"TagToTopicTag\",\"relationFromFields\":[\"tagId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"topicId\",\"tagId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"topicId\",\"tagId\"]}],\"isGenerated\":false},\"ItemTag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"itemId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tagId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"item\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemToItemTag\",\"relationFromFields\":[\"itemId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tag\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Tag\",\"nativeType\":null,\"relationName\":\"ItemTagToTag\",\"relationFromFields\":[\"tagId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"itemId\",\"tagId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"itemId\",\"tagId\"]}],\"isGenerated\":false},\"ContentItem\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"kind\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentKind\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topicId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topic\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Topic\",\"nativeType\":null,\"relationName\":\"ContentItemToTopic\",\"relationFromFields\":[\"topicId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locale\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Locale\",\"nativeType\":null,\"default\":\"de\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"text\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"richText\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sortOrder\",\"dbName\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"status\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"PublishStatus\",\"nativeType\":null,\"default\":\"draft\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"authorName\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"publishAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"expireAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionMode\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"RegionMode\",\"nativeType\":null,\"default\":\"AUTO\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionManualId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionEffectiveId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionAuto\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionManual\",\"kind\":\"object\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Region\",\"nativeType\":null,\"relationName\":\"ContentItemRegionManual\",\"relationFromFields\":[\"regionManualId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionEffective\",\"kind\":\"object\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Region\",\"nativeType\":null,\"relationName\":\"ContentItemRegionEffective\",\"relationFromFields\":[\"regionEffectiveId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"validation\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"meta\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"answerOptions\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"AnswerOption\",\"nativeType\":null,\"relationName\":\"AnswerOptionToContentItem\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tags\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ItemTag\",\"nativeType\":null,\"relationName\":\"ContentItemToItemTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"AnswerOption\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"itemId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"item\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"AnswerOptionToContentItem\",\"relationFromFields\":[\"itemId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"value\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sortOrder\",\"dbName\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"exclusive\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"meta\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"itemId\",\"sortOrder\"],[\"itemId\",\"value\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"itemId\",\"sortOrder\"]},{\"name\":null,\"fields\":[\"itemId\",\"value\"]}],\"isGenerated\":false}},\"enums\":{\"ContentKind\":{\"values\":[{\"name\":\"SWIPE\",\"dbName\":null},{\"name\":\"EVENT\",\"dbName\":null},{\"name\":\"SUNDAY_POLL\",\"dbName\":null}],\"dbName\":null},\"PublishStatus\":{\"values\":[{\"name\":\"draft\",\"dbName\":null},{\"name\":\"review\",\"dbName\":null},{\"name\":\"published\",\"dbName\":null},{\"name\":\"archived\",\"dbName\":null}],\"dbName\":null},\"RegionMode\":{\"values\":[{\"name\":\"AUTO\",\"dbName\":null},{\"name\":\"MANUAL\",\"dbName\":null}],\"dbName\":null},\"Locale\":{\"values\":[{\"name\":\"de\",\"dbName\":null},{\"name\":\"en\",\"dbName\":null},{\"name\":\"fr\",\"dbName\":null},{\"name\":\"it\",\"dbName\":null},{\"name\":\"es\",\"dbName\":null},{\"name\":\"pl\",\"dbName\":null},{\"name\":\"uk\",\"dbName\":null},{\"name\":\"ru\",\"dbName\":null},{\"name\":\"tr\",\"dbName\":null},{\"name\":\"hi\",\"dbName\":null},{\"name\":\"zh\",\"dbName\":null},{\"name\":\"ar\",\"dbName\":null}],\"dbName\":null}},\"types\":{}}")
 defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
 config.engineWasm = undefined
 config.compilerWasm = undefined
diff --git a/apps/web/src/db/web/index-browser.js b/apps/web/src/db/web/index-browser.js
index 8cc694d8..399672fb 100644
--- a/apps/web/src/db/web/index-browser.js
+++ b/apps/web/src/db/web/index-browser.js
@@ -120,6 +120,13 @@ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
   Serializable: 'Serializable'
 });
 
+exports.Prisma.RegionScalarFieldEnum = {
+  id: 'id',
+  code: 'code',
+  name: 'name',
+  level: 'level'
+};
+
 exports.Prisma.TopicScalarFieldEnum = {
   id: 'id',
   slug: 'slug',
@@ -240,6 +247,7 @@ exports.RegionMode = exports.$Enums.RegionMode = {
 };
 
 exports.Prisma.ModelName = {
+  Region: 'Region',
   Topic: 'Topic',
   Tag: 'Tag',
   TopicTag: 'TopicTag',
diff --git a/apps/web/src/db/web/index.d.ts b/apps/web/src/db/web/index.d.ts
index 9a288503..bacd2dfc 100644
--- a/apps/web/src/db/web/index.d.ts
+++ b/apps/web/src/db/web/index.d.ts
@@ -13,6 +13,11 @@ import $Result = runtime.Types.Result
 export type PrismaPromise<T> = $Public.PrismaPromise<T>
 
 
+/**
+ * Model Region
+ * 
+ */
+export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
 /**
  * Model Topic
  * 
@@ -117,8 +122,8 @@ export const Locale: typeof $Enums.Locale
  * @example
  * ```
  * const prisma = new PrismaClient()
- * // Fetch zero or more Topics
- * const topics = await prisma.topic.findMany()
+ * // Fetch zero or more Regions
+ * const regions = await prisma.region.findMany()
  * ```
  *
  *
@@ -138,8 +143,8 @@ export class PrismaClient<
    * @example
    * ```
    * const prisma = new PrismaClient()
-   * // Fetch zero or more Topics
-   * const topics = await prisma.topic.findMany()
+   * // Fetch zero or more Regions
+   * const regions = await prisma.region.findMany()
    * ```
    *
    *
@@ -229,6 +234,16 @@ export class PrismaClient<
   }>>
 
       /**
+   * `prisma.region`: Exposes CRUD operations for the **Region** model.
+    * Example usage:
+    * ```ts
+    * // Fetch zero or more Regions
+    * const regions = await prisma.region.findMany()
+    * ```
+    */
+  get region(): Prisma.RegionDelegate<ExtArgs, ClientOptions>;
+
+  /**
    * `prisma.topic`: Exposes CRUD operations for the **Topic** model.
     * Example usage:
     * ```ts
@@ -727,6 +742,7 @@ export namespace Prisma {
 
 
   export const ModelName: {
+    Region: 'Region',
     Topic: 'Topic',
     Tag: 'Tag',
     TopicTag: 'TopicTag',
@@ -751,10 +767,84 @@ export namespace Prisma {
       omit: GlobalOmitOptions
     }
     meta: {
-      modelProps: "topic" | "tag" | "topicTag" | "itemTag" | "contentItem" | "answerOption"
+      modelProps: "region" | "topic" | "tag" | "topicTag" | "itemTag" | "contentItem" | "answerOption"
       txIsolationLevel: Prisma.TransactionIsolationLevel
     }
     model: {
+      Region: {
+        payload: Prisma.$RegionPayload<ExtArgs>
+        fields: Prisma.RegionFieldRefs
+        operations: {
+          findUnique: {
+            args: Prisma.RegionFindUniqueArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
+          }
+          findUniqueOrThrow: {
+            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
+          }
+          findFirst: {
+            args: Prisma.RegionFindFirstArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
+          }
+          findFirstOrThrow: {
+            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
+          }
+          findMany: {
+            args: Prisma.RegionFindManyArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
+          }
+          create: {
+            args: Prisma.RegionCreateArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
+          }
+          createMany: {
+            args: Prisma.RegionCreateManyArgs<ExtArgs>
+            result: BatchPayload
+          }
+          createManyAndReturn: {
+            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
+          }
+          delete: {
+            args: Prisma.RegionDeleteArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
+          }
+          update: {
+            args: Prisma.RegionUpdateArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
+          }
+          deleteMany: {
+            args: Prisma.RegionDeleteManyArgs<ExtArgs>
+            result: BatchPayload
+          }
+          updateMany: {
+            args: Prisma.RegionUpdateManyArgs<ExtArgs>
+            result: BatchPayload
+          }
+          updateManyAndReturn: {
+            args: Prisma.RegionUpdateManyAndReturnArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
+          }
+          upsert: {
+            args: Prisma.RegionUpsertArgs<ExtArgs>
+            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
+          }
+          aggregate: {
+            args: Prisma.RegionAggregateArgs<ExtArgs>
+            result: $Utils.Optional<AggregateRegion>
+          }
+          groupBy: {
+            args: Prisma.RegionGroupByArgs<ExtArgs>
+            result: $Utils.Optional<RegionGroupByOutputType>[]
+          }
+          count: {
+            args: Prisma.RegionCountArgs<ExtArgs>
+            result: $Utils.Optional<RegionCountAggregateOutputType> | number
+          }
+        }
+      }
       Topic: {
         payload: Prisma.$TopicPayload<ExtArgs>
         fields: Prisma.TopicFieldRefs
@@ -1295,6 +1385,7 @@ export namespace Prisma {
     omit?: Prisma.GlobalOmitConfig
   }
   export type GlobalOmitConfig = {
+    region?: RegionOmit
     topic?: TopicOmit
     tag?: TagOmit
     topicTag?: TopicTagOmit
@@ -1376,6 +1467,46 @@ export namespace Prisma {
    */
 
 
+  /**
+   * Count Type RegionCountOutputType
+   */
+
+  export type RegionCountOutputType = {
+    manualItems: number
+    effectiveItems: number
+  }
+
+  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    manualItems?: boolean | RegionCountOutputTypeCountManualItemsArgs
+    effectiveItems?: boolean | RegionCountOutputTypeCountEffectiveItemsArgs
+  }
+
+  // Custom InputTypes
+  /**
+   * RegionCountOutputType without action
+   */
+  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the RegionCountOutputType
+     */
+    select?: RegionCountOutputTypeSelect<ExtArgs> | null
+  }
+
+  /**
+   * RegionCountOutputType without action
+   */
+  export type RegionCountOutputTypeCountManualItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    where?: ContentItemWhereInput
+  }
+
+  /**
+   * RegionCountOutputType without action
+   */
+  export type RegionCountOutputTypeCountEffectiveItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    where?: ContentItemWhereInput
+  }
+
+
   /**
    * Count Type TopicCountOutputType
    */
@@ -1501,373 +1632,371 @@ export namespace Prisma {
    */
 
   /**
-   * Model Topic
+   * Model Region
    */
 
-  export type AggregateTopic = {
-    _count: TopicCountAggregateOutputType | null
-    _min: TopicMinAggregateOutputType | null
-    _max: TopicMaxAggregateOutputType | null
+  export type AggregateRegion = {
+    _count: RegionCountAggregateOutputType | null
+    _avg: RegionAvgAggregateOutputType | null
+    _sum: RegionSumAggregateOutputType | null
+    _min: RegionMinAggregateOutputType | null
+    _max: RegionMaxAggregateOutputType | null
   }
 
-  export type TopicMinAggregateOutputType = {
+  export type RegionAvgAggregateOutputType = {
+    level: number | null
+  }
+
+  export type RegionSumAggregateOutputType = {
+    level: number | null
+  }
+
+  export type RegionMinAggregateOutputType = {
     id: string | null
-    slug: string | null
-    title: string | null
-    description: string | null
-    locale: $Enums.Locale | null
-    createdAt: Date | null
-    updatedAt: Date | null
+    code: string | null
+    name: string | null
+    level: number | null
   }
 
-  export type TopicMaxAggregateOutputType = {
+  export type RegionMaxAggregateOutputType = {
     id: string | null
-    slug: string | null
-    title: string | null
-    description: string | null
-    locale: $Enums.Locale | null
-    createdAt: Date | null
-    updatedAt: Date | null
+    code: string | null
+    name: string | null
+    level: number | null
   }
 
-  export type TopicCountAggregateOutputType = {
+  export type RegionCountAggregateOutputType = {
     id: number
-    slug: number
-    title: number
-    description: number
-    locale: number
-    createdAt: number
-    updatedAt: number
+    code: number
+    name: number
+    level: number
     _all: number
   }
 
 
-  export type TopicMinAggregateInputType = {
+  export type RegionAvgAggregateInputType = {
+    level?: true
+  }
+
+  export type RegionSumAggregateInputType = {
+    level?: true
+  }
+
+  export type RegionMinAggregateInputType = {
     id?: true
-    slug?: true
-    title?: true
-    description?: true
-    locale?: true
-    createdAt?: true
-    updatedAt?: true
+    code?: true
+    name?: true
+    level?: true
   }
 
-  export type TopicMaxAggregateInputType = {
+  export type RegionMaxAggregateInputType = {
     id?: true
-    slug?: true
-    title?: true
-    description?: true
-    locale?: true
-    createdAt?: true
-    updatedAt?: true
+    code?: true
+    name?: true
+    level?: true
   }
 
-  export type TopicCountAggregateInputType = {
+  export type RegionCountAggregateInputType = {
     id?: true
-    slug?: true
-    title?: true
-    description?: true
-    locale?: true
-    createdAt?: true
-    updatedAt?: true
+    code?: true
+    name?: true
+    level?: true
     _all?: true
   }
 
-  export type TopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Filter which Topic to aggregate.
+     * Filter which Region to aggregate.
      */
-    where?: TopicWhereInput
+    where?: RegionWhereInput
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
      * 
-     * Determine the order of Topics to fetch.
+     * Determine the order of Regions to fetch.
      */
-    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
+    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
      * 
      * Sets the start position
      */
-    cursor?: TopicWhereUniqueInput
+    cursor?: RegionWhereUniqueInput
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
      * 
-     * Take `¬±n` Topics from the position of the cursor.
+     * Take `¬±n` Regions from the position of the cursor.
      */
     take?: number
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
      * 
-     * Skip the first `n` Topics.
+     * Skip the first `n` Regions.
      */
     skip?: number
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
      * 
-     * Count returned Topics
+     * Count returned Regions
     **/
-    _count?: true | TopicCountAggregateInputType
+    _count?: true | RegionCountAggregateInputType
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
+     * 
+     * Select which fields to average
+    **/
+    _avg?: RegionAvgAggregateInputType
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
+     * 
+     * Select which fields to sum
+    **/
+    _sum?: RegionSumAggregateInputType
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
      * 
      * Select which fields to find the minimum value
     **/
-    _min?: TopicMinAggregateInputType
+    _min?: RegionMinAggregateInputType
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
      * 
      * Select which fields to find the maximum value
     **/
-    _max?: TopicMaxAggregateInputType
+    _max?: RegionMaxAggregateInputType
   }
 
-  export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
-        [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
+  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
+        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
       ? T[P] extends true
         ? number
-        : GetScalarType<T[P], AggregateTopic[P]>
-      : GetScalarType<T[P], AggregateTopic[P]>
+        : GetScalarType<T[P], AggregateRegion[P]>
+      : GetScalarType<T[P], AggregateRegion[P]>
   }
 
 
 
 
-  export type TopicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
-    where?: TopicWhereInput
-    orderBy?: TopicOrderByWithAggregationInput | TopicOrderByWithAggregationInput[]
-    by: TopicScalarFieldEnum[] | TopicScalarFieldEnum
-    having?: TopicScalarWhereWithAggregatesInput
+  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    where?: RegionWhereInput
+    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
+    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
+    having?: RegionScalarWhereWithAggregatesInput
     take?: number
     skip?: number
-    _count?: TopicCountAggregateInputType | true
-    _min?: TopicMinAggregateInputType
-    _max?: TopicMaxAggregateInputType
+    _count?: RegionCountAggregateInputType | true
+    _avg?: RegionAvgAggregateInputType
+    _sum?: RegionSumAggregateInputType
+    _min?: RegionMinAggregateInputType
+    _max?: RegionMaxAggregateInputType
   }
 
-  export type TopicGroupByOutputType = {
+  export type RegionGroupByOutputType = {
     id: string
-    slug: string
-    title: string
-    description: string | null
-    locale: $Enums.Locale
-    createdAt: Date
-    updatedAt: Date
-    _count: TopicCountAggregateOutputType | null
-    _min: TopicMinAggregateOutputType | null
-    _max: TopicMaxAggregateOutputType | null
+    code: string
+    name: string
+    level: number
+    _count: RegionCountAggregateOutputType | null
+    _avg: RegionAvgAggregateOutputType | null
+    _sum: RegionSumAggregateOutputType | null
+    _min: RegionMinAggregateOutputType | null
+    _max: RegionMaxAggregateOutputType | null
   }
 
-  type GetTopicGroupByPayload<T extends TopicGroupByArgs> = Prisma.PrismaPromise<
+  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
     Array<
-      PickEnumerable<TopicGroupByOutputType, T['by']> &
+      PickEnumerable<RegionGroupByOutputType, T['by']> &
         {
-          [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
+          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
             ? T[P] extends boolean
               ? number
-              : GetScalarType<T[P], TopicGroupByOutputType[P]>
-            : GetScalarType<T[P], TopicGroupByOutputType[P]>
+              : GetScalarType<T[P], RegionGroupByOutputType[P]>
+            : GetScalarType<T[P], RegionGroupByOutputType[P]>
         }
       >
     >
 
 
-  export type TopicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
+  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
     id?: boolean
-    slug?: boolean
-    title?: boolean
-    description?: boolean
-    locale?: boolean
-    createdAt?: boolean
-    updatedAt?: boolean
-    items?: boolean | Topic$itemsArgs<ExtArgs>
-    tags?: boolean | Topic$tagsArgs<ExtArgs>
-    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
-  }, ExtArgs["result"]["topic"]>
-
-  export type TopicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
+    code?: boolean
+    name?: boolean
+    level?: boolean
+    manualItems?: boolean | Region$manualItemsArgs<ExtArgs>
+    effectiveItems?: boolean | Region$effectiveItemsArgs<ExtArgs>
+    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
+  }, ExtArgs["result"]["region"]>
+
+  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
     id?: boolean
-    slug?: boolean
-    title?: boolean
-    description?: boolean
-    locale?: boolean
-    createdAt?: boolean
-    updatedAt?: boolean
-  }, ExtArgs["result"]["topic"]>
+    code?: boolean
+    name?: boolean
+    level?: boolean
+  }, ExtArgs["result"]["region"]>
 
-  export type TopicSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
+  export type RegionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
     id?: boolean
-    slug?: boolean
-    title?: boolean
-    description?: boolean
-    locale?: boolean
-    createdAt?: boolean
-    updatedAt?: boolean
-  }, ExtArgs["result"]["topic"]>
+    code?: boolean
+    name?: boolean
+    level?: boolean
+  }, ExtArgs["result"]["region"]>
 
-  export type TopicSelectScalar = {
+  export type RegionSelectScalar = {
     id?: boolean
-    slug?: boolean
-    title?: boolean
-    description?: boolean
-    locale?: boolean
-    createdAt?: boolean
-    updatedAt?: boolean
+    code?: boolean
+    name?: boolean
+    level?: boolean
   }
 
-  export type TopicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slug" | "title" | "description" | "locale" | "createdAt" | "updatedAt", ExtArgs["result"]["topic"]>
-  export type TopicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
-    items?: boolean | Topic$itemsArgs<ExtArgs>
-    tags?: boolean | Topic$tagsArgs<ExtArgs>
-    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
+  export type RegionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "level", ExtArgs["result"]["region"]>
+  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    manualItems?: boolean | Region$manualItemsArgs<ExtArgs>
+    effectiveItems?: boolean | Region$effectiveItemsArgs<ExtArgs>
+    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
   }
-  export type TopicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
-  export type TopicIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
+  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
+  export type RegionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
 
-  export type $TopicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
-    name: "Topic"
+  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    name: "Region"
     objects: {
-      items: Prisma.$ContentItemPayload<ExtArgs>[]
-      tags: Prisma.$TopicTagPayload<ExtArgs>[]
+      manualItems: Prisma.$ContentItemPayload<ExtArgs>[]
+      effectiveItems: Prisma.$ContentItemPayload<ExtArgs>[]
     }
     scalars: $Extensions.GetPayloadResult<{
       id: string
-      slug: string
-      title: string
-      description: string | null
-      locale: $Enums.Locale
-      createdAt: Date
-      updatedAt: Date
-    }, ExtArgs["result"]["topic"]>
+      code: string
+      name: string
+      level: number
+    }, ExtArgs["result"]["region"]>
     composites: {}
   }
 
-  type TopicGetPayload<S extends boolean | null | undefined | TopicDefaultArgs> = $Result.GetResult<Prisma.$TopicPayload, S>
+  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>
 
-  type TopicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
-    Omit<TopicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
-      select?: TopicCountAggregateInputType | true
+  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
+    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
+      select?: RegionCountAggregateInputType | true
     }
 
-  export interface TopicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
-    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Topic'], meta: { name: 'Topic' } }
+  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
+    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
     /**
-     * Find zero or one Topic that matches the filter.
-     * @param {TopicFindUniqueArgs} args - Arguments to find a Topic
+     * Find zero or one Region that matches the filter.
+     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
      * @example
-     * // Get one Topic
-     * const topic = await prisma.topic.findUnique({
+     * // Get one Region
+     * const region = await prisma.region.findUnique({
      *   where: {
      *     // ... provide filter here
      *   }
      * })
      */
-    findUnique<T extends TopicFindUniqueArgs>(args: SelectSubset<T, TopicFindUniqueArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
+    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
 
     /**
-     * Find one Topic that matches the filter or throw an error with `error.code='P2025'`
+     * Find one Region that matches the filter or throw an error with `error.code='P2025'`
      * if no matches were found.
-     * @param {TopicFindUniqueOrThrowArgs} args - Arguments to find a Topic
+     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
      * @example
-     * // Get one Topic
-     * const topic = await prisma.topic.findUniqueOrThrow({
+     * // Get one Region
+     * const region = await prisma.region.findUniqueOrThrow({
      *   where: {
      *     // ... provide filter here
      *   }
      * })
      */
-    findUniqueOrThrow<T extends TopicFindUniqueOrThrowArgs>(args: SelectSubset<T, TopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
 
     /**
-     * Find the first Topic that matches the filter.
+     * Find the first Region that matches the filter.
      * Note, that providing `undefined` is treated as the value not being there.
      * Read more here: https://pris.ly/d/null-undefined
-     * @param {TopicFindFirstArgs} args - Arguments to find a Topic
+     * @param {RegionFindFirstArgs} args - Arguments to find a Region
      * @example
-     * // Get one Topic
-     * const topic = await prisma.topic.findFirst({
+     * // Get one Region
+     * const region = await prisma.region.findFirst({
      *   where: {
      *     // ... provide filter here
      *   }
      * })
      */
-    findFirst<T extends TopicFindFirstArgs>(args?: SelectSubset<T, TopicFindFirstArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
+    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
 
     /**
-     * Find the first Topic that matches the filter or
+     * Find the first Region that matches the filter or
      * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
      * Note, that providing `undefined` is treated as the value not being there.
      * Read more here: https://pris.ly/d/null-undefined
-     * @param {TopicFindFirstOrThrowArgs} args - Arguments to find a Topic
+     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
      * @example
-     * // Get one Topic
-     * const topic = await prisma.topic.findFirstOrThrow({
+     * // Get one Region
+     * const region = await prisma.region.findFirstOrThrow({
      *   where: {
      *     // ... provide filter here
      *   }
      * })
      */
-    findFirstOrThrow<T extends TopicFindFirstOrThrowArgs>(args?: SelectSubset<T, TopicFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
 
     /**
-     * Find zero or more Topics that matches the filter.
+     * Find zero or more Regions that matches the filter.
      * Note, that providing `undefined` is treated as the value not being there.
      * Read more here: https://pris.ly/d/null-undefined
-     * @param {TopicFindManyArgs} args - Arguments to filter and select certain fields only.
+     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
      * @example
-     * // Get all Topics
-     * const topics = await prisma.topic.findMany()
+     * // Get all Regions
+     * const regions = await prisma.region.findMany()
      * 
-     * // Get first 10 Topics
-     * const topics = await prisma.topic.findMany({ take: 10 })
+     * // Get first 10 Regions
+     * const regions = await prisma.region.findMany({ take: 10 })
      * 
      * // Only select the `id`
-     * const topicWithIdOnly = await prisma.topic.findMany({ select: { id: true } })
+     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
      * 
      */
-    findMany<T extends TopicFindManyArgs>(args?: SelectSubset<T, TopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>
+    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>
 
     /**
-     * Create a Topic.
-     * @param {TopicCreateArgs} args - Arguments to create a Topic.
+     * Create a Region.
+     * @param {RegionCreateArgs} args - Arguments to create a Region.
      * @example
-     * // Create one Topic
-     * const Topic = await prisma.topic.create({
+     * // Create one Region
+     * const Region = await prisma.region.create({
      *   data: {
-     *     // ... data to create a Topic
+     *     // ... data to create a Region
      *   }
      * })
      * 
      */
-    create<T extends TopicCreateArgs>(args: SelectSubset<T, TopicCreateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
 
     /**
-     * Create many Topics.
-     * @param {TopicCreateManyArgs} args - Arguments to create many Topics.
+     * Create many Regions.
+     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
      * @example
-     * // Create many Topics
-     * const topic = await prisma.topic.createMany({
+     * // Create many Regions
+     * const region = await prisma.region.createMany({
      *   data: [
      *     // ... provide data here
      *   ]
      * })
      *     
      */
-    createMany<T extends TopicCreateManyArgs>(args?: SelectSubset<T, TopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
+    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
 
     /**
-     * Create many Topics and returns the data saved in the database.
-     * @param {TopicCreateManyAndReturnArgs} args - Arguments to create many Topics.
+     * Create many Regions and returns the data saved in the database.
+     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
      * @example
-     * // Create many Topics
-     * const topic = await prisma.topic.createManyAndReturn({
+     * // Create many Regions
+     * const region = await prisma.region.createManyAndReturn({
      *   data: [
      *     // ... provide data here
      *   ]
      * })
      * 
-     * // Create many Topics and only return the `id`
-     * const topicWithIdOnly = await prisma.topic.createManyAndReturn({
+     * // Create many Regions and only return the `id`
+     * const regionWithIdOnly = await prisma.region.createManyAndReturn({
      *   select: { id: true },
      *   data: [
      *     // ... provide data here
@@ -1877,28 +2006,28 @@ export namespace Prisma {
      * Read more here: https://pris.ly/d/null-undefined
      * 
      */
-    createManyAndReturn<T extends TopicCreateManyAndReturnArgs>(args?: SelectSubset<T, TopicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>
+    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>
 
     /**
-     * Delete a Topic.
-     * @param {TopicDeleteArgs} args - Arguments to delete one Topic.
+     * Delete a Region.
+     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
      * @example
-     * // Delete one Topic
-     * const Topic = await prisma.topic.delete({
+     * // Delete one Region
+     * const Region = await prisma.region.delete({
      *   where: {
-     *     // ... filter to delete one Topic
+     *     // ... filter to delete one Region
      *   }
      * })
      * 
      */
-    delete<T extends TopicDeleteArgs>(args: SelectSubset<T, TopicDeleteArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
 
     /**
-     * Update one Topic.
-     * @param {TopicUpdateArgs} args - Arguments to update one Topic.
+     * Update one Region.
+     * @param {RegionUpdateArgs} args - Arguments to update one Region.
      * @example
-     * // Update one Topic
-     * const topic = await prisma.topic.update({
+     * // Update one Region
+     * const region = await prisma.region.update({
      *   where: {
      *     // ... provide filter here
      *   },
@@ -1908,30 +2037,30 @@ export namespace Prisma {
      * })
      * 
      */
-    update<T extends TopicUpdateArgs>(args: SelectSubset<T, TopicUpdateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
 
     /**
-     * Delete zero or more Topics.
-     * @param {TopicDeleteManyArgs} args - Arguments to filter Topics to delete.
+     * Delete zero or more Regions.
+     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
      * @example
-     * // Delete a few Topics
-     * const { count } = await prisma.topic.deleteMany({
+     * // Delete a few Regions
+     * const { count } = await prisma.region.deleteMany({
      *   where: {
      *     // ... provide filter here
      *   }
      * })
      * 
      */
-    deleteMany<T extends TopicDeleteManyArgs>(args?: SelectSubset<T, TopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
+    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
 
     /**
-     * Update zero or more Topics.
+     * Update zero or more Regions.
      * Note, that providing `undefined` is treated as the value not being there.
      * Read more here: https://pris.ly/d/null-undefined
-     * @param {TopicUpdateManyArgs} args - Arguments to update one or more rows.
+     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
      * @example
-     * // Update many Topics
-     * const topic = await prisma.topic.updateMany({
+     * // Update many Regions
+     * const region = await prisma.region.updateMany({
      *   where: {
      *     // ... provide filter here
      *   },
@@ -1941,14 +2070,14 @@ export namespace Prisma {
      * })
      * 
      */
-    updateMany<T extends TopicUpdateManyArgs>(args: SelectSubset<T, TopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
+    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
 
     /**
-     * Update zero or more Topics and returns the data updated in the database.
-     * @param {TopicUpdateManyAndReturnArgs} args - Arguments to update many Topics.
+     * Update zero or more Regions and returns the data updated in the database.
+     * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
      * @example
-     * // Update many Topics
-     * const topic = await prisma.topic.updateManyAndReturn({
+     * // Update many Regions
+     * const region = await prisma.region.updateManyAndReturn({
      *   where: {
      *     // ... provide filter here
      *   },
@@ -1957,8 +2086,8 @@ export namespace Prisma {
      *   ]
      * })
      * 
-     * // Update zero or more Topics and only return the `id`
-     * const topicWithIdOnly = await prisma.topic.updateManyAndReturn({
+     * // Update zero or more Regions and only return the `id`
+     * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
      *   select: { id: true },
      *   where: {
      *     // ... provide filter here
@@ -1971,56 +2100,56 @@ export namespace Prisma {
      * Read more here: https://pris.ly/d/null-undefined
      * 
      */
-    updateManyAndReturn<T extends TopicUpdateManyAndReturnArgs>(args: SelectSubset<T, TopicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>
+    updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>
 
     /**
-     * Create or update one Topic.
-     * @param {TopicUpsertArgs} args - Arguments to update or create a Topic.
+     * Create or update one Region.
+     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
      * @example
-     * // Update or create a Topic
-     * const topic = await prisma.topic.upsert({
+     * // Update or create a Region
+     * const region = await prisma.region.upsert({
      *   create: {
-     *     // ... data to create a Topic
+     *     // ... data to create a Region
      *   },
      *   update: {
      *     // ... in case it already exists, update
      *   },
      *   where: {
-     *     // ... the filter for the Topic we want to update
+     *     // ... the filter for the Region we want to update
      *   }
      * })
      */
-    upsert<T extends TopicUpsertArgs>(args: SelectSubset<T, TopicUpsertArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
 
 
     /**
-     * Count the number of Topics.
+     * Count the number of Regions.
      * Note, that providing `undefined` is treated as the value not being there.
      * Read more here: https://pris.ly/d/null-undefined
-     * @param {TopicCountArgs} args - Arguments to filter Topics to count.
+     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
      * @example
-     * // Count the number of Topics
-     * const count = await prisma.topic.count({
+     * // Count the number of Regions
+     * const count = await prisma.region.count({
      *   where: {
-     *     // ... the filter for the Topics we want to count
+     *     // ... the filter for the Regions we want to count
      *   }
      * })
     **/
-    count<T extends TopicCountArgs>(
-      args?: Subset<T, TopicCountArgs>,
+    count<T extends RegionCountArgs>(
+      args?: Subset<T, RegionCountArgs>,
     ): Prisma.PrismaPromise<
       T extends $Utils.Record<'select', any>
         ? T['select'] extends true
           ? number
-          : GetScalarType<T['select'], TopicCountAggregateOutputType>
+          : GetScalarType<T['select'], RegionCountAggregateOutputType>
         : number
     >
 
     /**
-     * Allows you to perform aggregations operations on a Topic.
+     * Allows you to perform aggregations operations on a Region.
      * Note, that providing `undefined` is treated as the value not being there.
      * Read more here: https://pris.ly/d/null-undefined
-     * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
+     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
      * @example
      * // Ordered by age ascending
      * // Where email contains prisma.io
@@ -2040,13 +2169,13 @@ export namespace Prisma {
      *   take: 10,
      * })
     **/
-    aggregate<T extends TopicAggregateArgs>(args: Subset<T, TopicAggregateArgs>): Prisma.PrismaPromise<GetTopicAggregateType<T>>
+    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>
 
     /**
-     * Group by Topic.
+     * Group by Region.
      * Note, that providing `undefined` is treated as the value not being there.
      * Read more here: https://pris.ly/d/null-undefined
-     * @param {TopicGroupByArgs} args - Group by arguments.
+     * @param {RegionGroupByArgs} args - Group by arguments.
      * @example
      * // Group by city, order by createdAt, get count
      * const result = await prisma.user.groupBy({
@@ -2061,14 +2190,14 @@ export namespace Prisma {
      * 
     **/
     groupBy<
-      T extends TopicGroupByArgs,
+      T extends RegionGroupByArgs,
       HasSelectOrTake extends Or<
         Extends<'skip', Keys<T>>,
         Extends<'take', Keys<T>>
       >,
       OrderByArg extends True extends HasSelectOrTake
-        ? { orderBy: TopicGroupByArgs['orderBy'] }
-        : { orderBy?: TopicGroupByArgs['orderBy'] },
+        ? { orderBy: RegionGroupByArgs['orderBy'] }
+        : { orderBy?: RegionGroupByArgs['orderBy'] },
       OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
       ByFields extends MaybeTupleToUnion<T['by']>,
       ByValid extends Has<ByFields, OrderFields>,
@@ -2117,23 +2246,23 @@ export namespace Prisma {
             ? never
             : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
         }[OrderFields]
-    >(args: SubsetIntersection<T, TopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
+    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
   /**
-   * Fields of the Topic model
+   * Fields of the Region model
    */
-  readonly fields: TopicFieldRefs;
+  readonly fields: RegionFieldRefs;
   }
 
   /**
-   * The delegate class that acts as a "Promise-like" for Topic.
+   * The delegate class that acts as a "Promise-like" for Region.
    * Why is this prefixed with `Prisma__`?
    * Because we want to prevent naming conflicts as mentioned in
    * https://github.com/prisma/prisma-client-js/issues/707
    */
-  export interface Prisma__TopicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
+  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
     readonly [Symbol.toStringTag]: "PrismaPromise"
-    items<T extends Topic$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
-    tags<T extends Topic$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
+    manualItems<T extends Region$manualItemsArgs<ExtArgs> = {}>(args?: Subset<T, Region$manualItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
+    effectiveItems<T extends Region$effectiveItemsArgs<ExtArgs> = {}>(args?: Subset<T, Region$effectiveItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
     /**
      * Attaches callbacks for the resolution and/or rejection of the Promise.
      * @param onfulfilled The callback to execute when the Promise is resolved.
@@ -2160,407 +2289,404 @@ export namespace Prisma {
 
 
   /**
-   * Fields of the Topic model
+   * Fields of the Region model
    */
-  interface TopicFieldRefs {
-    readonly id: FieldRef<"Topic", 'String'>
-    readonly slug: FieldRef<"Topic", 'String'>
-    readonly title: FieldRef<"Topic", 'String'>
-    readonly description: FieldRef<"Topic", 'String'>
-    readonly locale: FieldRef<"Topic", 'Locale'>
-    readonly createdAt: FieldRef<"Topic", 'DateTime'>
-    readonly updatedAt: FieldRef<"Topic", 'DateTime'>
+  interface RegionFieldRefs {
+    readonly id: FieldRef<"Region", 'String'>
+    readonly code: FieldRef<"Region", 'String'>
+    readonly name: FieldRef<"Region", 'String'>
+    readonly level: FieldRef<"Region", 'Int'>
   }
     
 
   // Custom InputTypes
   /**
-   * Topic findUnique
+   * Region findUnique
    */
-  export type TopicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * Filter, which Topic to fetch.
+     * Filter, which Region to fetch.
      */
-    where: TopicWhereUniqueInput
+    where: RegionWhereUniqueInput
   }
 
   /**
-   * Topic findUniqueOrThrow
+   * Region findUniqueOrThrow
    */
-  export type TopicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * Filter, which Topic to fetch.
+     * Filter, which Region to fetch.
      */
-    where: TopicWhereUniqueInput
+    where: RegionWhereUniqueInput
   }
 
   /**
-   * Topic findFirst
+   * Region findFirst
    */
-  export type TopicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * Filter, which Topic to fetch.
+     * Filter, which Region to fetch.
      */
-    where?: TopicWhereInput
+    where?: RegionWhereInput
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
      * 
-     * Determine the order of Topics to fetch.
+     * Determine the order of Regions to fetch.
      */
-    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
+    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
      * 
-     * Sets the position for searching for Topics.
+     * Sets the position for searching for Regions.
      */
-    cursor?: TopicWhereUniqueInput
+    cursor?: RegionWhereUniqueInput
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
      * 
-     * Take `¬±n` Topics from the position of the cursor.
+     * Take `¬±n` Regions from the position of the cursor.
      */
     take?: number
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
      * 
-     * Skip the first `n` Topics.
+     * Skip the first `n` Regions.
      */
     skip?: number
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
      * 
-     * Filter by unique combinations of Topics.
+     * Filter by unique combinations of Regions.
      */
-    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
+    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
   }
 
   /**
-   * Topic findFirstOrThrow
+   * Region findFirstOrThrow
    */
-  export type TopicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * Filter, which Topic to fetch.
+     * Filter, which Region to fetch.
      */
-    where?: TopicWhereInput
+    where?: RegionWhereInput
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
      * 
-     * Determine the order of Topics to fetch.
+     * Determine the order of Regions to fetch.
      */
-    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
+    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
      * 
-     * Sets the position for searching for Topics.
+     * Sets the position for searching for Regions.
      */
-    cursor?: TopicWhereUniqueInput
+    cursor?: RegionWhereUniqueInput
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
      * 
-     * Take `¬±n` Topics from the position of the cursor.
+     * Take `¬±n` Regions from the position of the cursor.
      */
     take?: number
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
      * 
-     * Skip the first `n` Topics.
+     * Skip the first `n` Regions.
      */
     skip?: number
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
      * 
-     * Filter by unique combinations of Topics.
+     * Filter by unique combinations of Regions.
      */
-    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
+    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
   }
 
   /**
-   * Topic findMany
+   * Region findMany
    */
-  export type TopicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * Filter, which Topics to fetch.
+     * Filter, which Regions to fetch.
      */
-    where?: TopicWhereInput
+    where?: RegionWhereInput
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
      * 
-     * Determine the order of Topics to fetch.
+     * Determine the order of Regions to fetch.
      */
-    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
+    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
      * 
-     * Sets the position for listing Topics.
+     * Sets the position for listing Regions.
      */
-    cursor?: TopicWhereUniqueInput
+    cursor?: RegionWhereUniqueInput
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
      * 
-     * Take `¬±n` Topics from the position of the cursor.
+     * Take `¬±n` Regions from the position of the cursor.
      */
     take?: number
     /**
      * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
      * 
-     * Skip the first `n` Topics.
+     * Skip the first `n` Regions.
      */
     skip?: number
-    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
+    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
   }
 
   /**
-   * Topic create
+   * Region create
    */
-  export type TopicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * The data needed to create a Topic.
+     * The data needed to create a Region.
      */
-    data: XOR<TopicCreateInput, TopicUncheckedCreateInput>
+    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
   }
 
   /**
-   * Topic createMany
+   * Region createMany
    */
-  export type TopicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * The data used to create many Topics.
+     * The data used to create many Regions.
      */
-    data: TopicCreateManyInput | TopicCreateManyInput[]
+    data: RegionCreateManyInput | RegionCreateManyInput[]
     skipDuplicates?: boolean
   }
 
   /**
-   * Topic createManyAndReturn
+   * Region createManyAndReturn
    */
-  export type TopicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelectCreateManyAndReturn<ExtArgs> | null
+    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
-     * The data used to create many Topics.
+     * The data used to create many Regions.
      */
-    data: TopicCreateManyInput | TopicCreateManyInput[]
+    data: RegionCreateManyInput | RegionCreateManyInput[]
     skipDuplicates?: boolean
   }
 
   /**
-   * Topic update
+   * Region update
    */
-  export type TopicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * The data needed to update a Topic.
+     * The data needed to update a Region.
      */
-    data: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
+    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
     /**
-     * Choose, which Topic to update.
+     * Choose, which Region to update.
      */
-    where: TopicWhereUniqueInput
+    where: RegionWhereUniqueInput
   }
 
   /**
-   * Topic updateMany
+   * Region updateMany
    */
-  export type TopicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * The data used to update Topics.
+     * The data used to update Regions.
      */
-    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyInput>
+    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
     /**
-     * Filter which Topics to update
+     * Filter which Regions to update
      */
-    where?: TopicWhereInput
+    where?: RegionWhereInput
     /**
-     * Limit how many Topics to update.
+     * Limit how many Regions to update.
      */
     limit?: number
   }
 
   /**
-   * Topic updateManyAndReturn
+   * Region updateManyAndReturn
    */
-  export type TopicUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelectUpdateManyAndReturn<ExtArgs> | null
+    select?: RegionSelectUpdateManyAndReturn<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
-     * The data used to update Topics.
+     * The data used to update Regions.
      */
-    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyInput>
+    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
     /**
-     * Filter which Topics to update
+     * Filter which Regions to update
      */
-    where?: TopicWhereInput
+    where?: RegionWhereInput
     /**
-     * Limit how many Topics to update.
+     * Limit how many Regions to update.
      */
     limit?: number
   }
 
   /**
-   * Topic upsert
+   * Region upsert
    */
-  export type TopicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * The filter to search for the Topic to update in case it exists.
+     * The filter to search for the Region to update in case it exists.
      */
-    where: TopicWhereUniqueInput
+    where: RegionWhereUniqueInput
     /**
-     * In case the Topic found by the `where` argument doesn't exist, create a new Topic with this data.
+     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
      */
-    create: XOR<TopicCreateInput, TopicUncheckedCreateInput>
+    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
     /**
-     * In case the Topic was found with the provided `where` argument, update it with this data.
+     * In case the Region was found with the provided `where` argument, update it with this data.
      */
-    update: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
+    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
   }
 
   /**
-   * Topic delete
+   * Region delete
    */
-  export type TopicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the Topic
+     * Select specific fields to fetch from the Region
      */
-    select?: TopicSelect<ExtArgs> | null
+    select?: RegionSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the Topic
+     * Omit specific fields from the Region
      */
-    omit?: TopicOmit<ExtArgs> | null
+    omit?: RegionOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicInclude<ExtArgs> | null
+    include?: RegionInclude<ExtArgs> | null
     /**
-     * Filter which Topic to delete.
+     * Filter which Region to delete.
      */
-    where: TopicWhereUniqueInput
+    where: RegionWhereUniqueInput
   }
 
   /**
-   * Topic deleteMany
+   * Region deleteMany
    */
-  export type TopicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Filter which Topics to delete
+     * Filter which Regions to delete
      */
-    where?: TopicWhereInput
+    where?: RegionWhereInput
     /**
-     * Limit how many Topics to delete.
+     * Limit how many Regions to delete.
      */
     limit?: number
   }
 
   /**
-   * Topic.items
+   * Region.manualItems
    */
-  export type Topic$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type Region$manualItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
      * Select specific fields to fetch from the ContentItem
      */
@@ -2582,25 +2708,1149 @@ export namespace Prisma {
   }
 
   /**
-   * Topic.tags
+   * Region.effectiveItems
    */
-  export type Topic$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+  export type Region$effectiveItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     /**
-     * Select specific fields to fetch from the TopicTag
+     * Select specific fields to fetch from the ContentItem
      */
-    select?: TopicTagSelect<ExtArgs> | null
+    select?: ContentItemSelect<ExtArgs> | null
     /**
-     * Omit specific fields from the TopicTag
+     * Omit specific fields from the ContentItem
      */
-    omit?: TopicTagOmit<ExtArgs> | null
+    omit?: ContentItemOmit<ExtArgs> | null
     /**
      * Choose, which related nodes to fetch as well
      */
-    include?: TopicTagInclude<ExtArgs> | null
-    where?: TopicTagWhereInput
-    orderBy?: TopicTagOrderByWithRelationInput | TopicTagOrderByWithRelationInput[]
-    cursor?: TopicTagWhereUniqueInput
-    take?: number
+    include?: ContentItemInclude<ExtArgs> | null
+    where?: ContentItemWhereInput
+    orderBy?: ContentItemOrderByWithRelationInput | ContentItemOrderByWithRelationInput[]
+    cursor?: ContentItemWhereUniqueInput
+    take?: number
+    skip?: number
+    distinct?: ContentItemScalarFieldEnum | ContentItemScalarFieldEnum[]
+  }
+
+  /**
+   * Region without action
+   */
+  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Region
+     */
+    select?: RegionSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Region
+     */
+    omit?: RegionOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: RegionInclude<ExtArgs> | null
+  }
+
+
+  /**
+   * Model Topic
+   */
+
+  export type AggregateTopic = {
+    _count: TopicCountAggregateOutputType | null
+    _min: TopicMinAggregateOutputType | null
+    _max: TopicMaxAggregateOutputType | null
+  }
+
+  export type TopicMinAggregateOutputType = {
+    id: string | null
+    slug: string | null
+    title: string | null
+    description: string | null
+    locale: $Enums.Locale | null
+    createdAt: Date | null
+    updatedAt: Date | null
+  }
+
+  export type TopicMaxAggregateOutputType = {
+    id: string | null
+    slug: string | null
+    title: string | null
+    description: string | null
+    locale: $Enums.Locale | null
+    createdAt: Date | null
+    updatedAt: Date | null
+  }
+
+  export type TopicCountAggregateOutputType = {
+    id: number
+    slug: number
+    title: number
+    description: number
+    locale: number
+    createdAt: number
+    updatedAt: number
+    _all: number
+  }
+
+
+  export type TopicMinAggregateInputType = {
+    id?: true
+    slug?: true
+    title?: true
+    description?: true
+    locale?: true
+    createdAt?: true
+    updatedAt?: true
+  }
+
+  export type TopicMaxAggregateInputType = {
+    id?: true
+    slug?: true
+    title?: true
+    description?: true
+    locale?: true
+    createdAt?: true
+    updatedAt?: true
+  }
+
+  export type TopicCountAggregateInputType = {
+    id?: true
+    slug?: true
+    title?: true
+    description?: true
+    locale?: true
+    createdAt?: true
+    updatedAt?: true
+    _all?: true
+  }
+
+  export type TopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Filter which Topic to aggregate.
+     */
+    where?: TopicWhereInput
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
+     * 
+     * Determine the order of Topics to fetch.
+     */
+    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
+     * 
+     * Sets the start position
+     */
+    cursor?: TopicWhereUniqueInput
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
+     * 
+     * Take `¬±n` Topics from the position of the cursor.
+     */
+    take?: number
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
+     * 
+     * Skip the first `n` Topics.
+     */
+    skip?: number
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
+     * 
+     * Count returned Topics
+    **/
+    _count?: true | TopicCountAggregateInputType
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
+     * 
+     * Select which fields to find the minimum value
+    **/
+    _min?: TopicMinAggregateInputType
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
+     * 
+     * Select which fields to find the maximum value
+    **/
+    _max?: TopicMaxAggregateInputType
+  }
+
+  export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
+        [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
+      ? T[P] extends true
+        ? number
+        : GetScalarType<T[P], AggregateTopic[P]>
+      : GetScalarType<T[P], AggregateTopic[P]>
+  }
+
+
+
+
+  export type TopicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    where?: TopicWhereInput
+    orderBy?: TopicOrderByWithAggregationInput | TopicOrderByWithAggregationInput[]
+    by: TopicScalarFieldEnum[] | TopicScalarFieldEnum
+    having?: TopicScalarWhereWithAggregatesInput
+    take?: number
+    skip?: number
+    _count?: TopicCountAggregateInputType | true
+    _min?: TopicMinAggregateInputType
+    _max?: TopicMaxAggregateInputType
+  }
+
+  export type TopicGroupByOutputType = {
+    id: string
+    slug: string
+    title: string
+    description: string | null
+    locale: $Enums.Locale
+    createdAt: Date
+    updatedAt: Date
+    _count: TopicCountAggregateOutputType | null
+    _min: TopicMinAggregateOutputType | null
+    _max: TopicMaxAggregateOutputType | null
+  }
+
+  type GetTopicGroupByPayload<T extends TopicGroupByArgs> = Prisma.PrismaPromise<
+    Array<
+      PickEnumerable<TopicGroupByOutputType, T['by']> &
+        {
+          [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
+            ? T[P] extends boolean
+              ? number
+              : GetScalarType<T[P], TopicGroupByOutputType[P]>
+            : GetScalarType<T[P], TopicGroupByOutputType[P]>
+        }
+      >
+    >
+
+
+  export type TopicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
+    id?: boolean
+    slug?: boolean
+    title?: boolean
+    description?: boolean
+    locale?: boolean
+    createdAt?: boolean
+    updatedAt?: boolean
+    items?: boolean | Topic$itemsArgs<ExtArgs>
+    tags?: boolean | Topic$tagsArgs<ExtArgs>
+    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
+  }, ExtArgs["result"]["topic"]>
+
+  export type TopicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
+    id?: boolean
+    slug?: boolean
+    title?: boolean
+    description?: boolean
+    locale?: boolean
+    createdAt?: boolean
+    updatedAt?: boolean
+  }, ExtArgs["result"]["topic"]>
+
+  export type TopicSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
+    id?: boolean
+    slug?: boolean
+    title?: boolean
+    description?: boolean
+    locale?: boolean
+    createdAt?: boolean
+    updatedAt?: boolean
+  }, ExtArgs["result"]["topic"]>
+
+  export type TopicSelectScalar = {
+    id?: boolean
+    slug?: boolean
+    title?: boolean
+    description?: boolean
+    locale?: boolean
+    createdAt?: boolean
+    updatedAt?: boolean
+  }
+
+  export type TopicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slug" | "title" | "description" | "locale" | "createdAt" | "updatedAt", ExtArgs["result"]["topic"]>
+  export type TopicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    items?: boolean | Topic$itemsArgs<ExtArgs>
+    tags?: boolean | Topic$tagsArgs<ExtArgs>
+    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
+  }
+  export type TopicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
+  export type TopicIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
+
+  export type $TopicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    name: "Topic"
+    objects: {
+      items: Prisma.$ContentItemPayload<ExtArgs>[]
+      tags: Prisma.$TopicTagPayload<ExtArgs>[]
+    }
+    scalars: $Extensions.GetPayloadResult<{
+      id: string
+      slug: string
+      title: string
+      description: string | null
+      locale: $Enums.Locale
+      createdAt: Date
+      updatedAt: Date
+    }, ExtArgs["result"]["topic"]>
+    composites: {}
+  }
+
+  type TopicGetPayload<S extends boolean | null | undefined | TopicDefaultArgs> = $Result.GetResult<Prisma.$TopicPayload, S>
+
+  type TopicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
+    Omit<TopicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
+      select?: TopicCountAggregateInputType | true
+    }
+
+  export interface TopicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
+    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Topic'], meta: { name: 'Topic' } }
+    /**
+     * Find zero or one Topic that matches the filter.
+     * @param {TopicFindUniqueArgs} args - Arguments to find a Topic
+     * @example
+     * // Get one Topic
+     * const topic = await prisma.topic.findUnique({
+     *   where: {
+     *     // ... provide filter here
+     *   }
+     * })
+     */
+    findUnique<T extends TopicFindUniqueArgs>(args: SelectSubset<T, TopicFindUniqueArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
+
+    /**
+     * Find one Topic that matches the filter or throw an error with `error.code='P2025'`
+     * if no matches were found.
+     * @param {TopicFindUniqueOrThrowArgs} args - Arguments to find a Topic
+     * @example
+     * // Get one Topic
+     * const topic = await prisma.topic.findUniqueOrThrow({
+     *   where: {
+     *     // ... provide filter here
+     *   }
+     * })
+     */
+    findUniqueOrThrow<T extends TopicFindUniqueOrThrowArgs>(args: SelectSubset<T, TopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+
+    /**
+     * Find the first Topic that matches the filter.
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * @param {TopicFindFirstArgs} args - Arguments to find a Topic
+     * @example
+     * // Get one Topic
+     * const topic = await prisma.topic.findFirst({
+     *   where: {
+     *     // ... provide filter here
+     *   }
+     * })
+     */
+    findFirst<T extends TopicFindFirstArgs>(args?: SelectSubset<T, TopicFindFirstArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
+
+    /**
+     * Find the first Topic that matches the filter or
+     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * @param {TopicFindFirstOrThrowArgs} args - Arguments to find a Topic
+     * @example
+     * // Get one Topic
+     * const topic = await prisma.topic.findFirstOrThrow({
+     *   where: {
+     *     // ... provide filter here
+     *   }
+     * })
+     */
+    findFirstOrThrow<T extends TopicFindFirstOrThrowArgs>(args?: SelectSubset<T, TopicFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+
+    /**
+     * Find zero or more Topics that matches the filter.
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * @param {TopicFindManyArgs} args - Arguments to filter and select certain fields only.
+     * @example
+     * // Get all Topics
+     * const topics = await prisma.topic.findMany()
+     * 
+     * // Get first 10 Topics
+     * const topics = await prisma.topic.findMany({ take: 10 })
+     * 
+     * // Only select the `id`
+     * const topicWithIdOnly = await prisma.topic.findMany({ select: { id: true } })
+     * 
+     */
+    findMany<T extends TopicFindManyArgs>(args?: SelectSubset<T, TopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>
+
+    /**
+     * Create a Topic.
+     * @param {TopicCreateArgs} args - Arguments to create a Topic.
+     * @example
+     * // Create one Topic
+     * const Topic = await prisma.topic.create({
+     *   data: {
+     *     // ... data to create a Topic
+     *   }
+     * })
+     * 
+     */
+    create<T extends TopicCreateArgs>(args: SelectSubset<T, TopicCreateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+
+    /**
+     * Create many Topics.
+     * @param {TopicCreateManyArgs} args - Arguments to create many Topics.
+     * @example
+     * // Create many Topics
+     * const topic = await prisma.topic.createMany({
+     *   data: [
+     *     // ... provide data here
+     *   ]
+     * })
+     *     
+     */
+    createMany<T extends TopicCreateManyArgs>(args?: SelectSubset<T, TopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
+
+    /**
+     * Create many Topics and returns the data saved in the database.
+     * @param {TopicCreateManyAndReturnArgs} args - Arguments to create many Topics.
+     * @example
+     * // Create many Topics
+     * const topic = await prisma.topic.createManyAndReturn({
+     *   data: [
+     *     // ... provide data here
+     *   ]
+     * })
+     * 
+     * // Create many Topics and only return the `id`
+     * const topicWithIdOnly = await prisma.topic.createManyAndReturn({
+     *   select: { id: true },
+     *   data: [
+     *     // ... provide data here
+     *   ]
+     * })
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * 
+     */
+    createManyAndReturn<T extends TopicCreateManyAndReturnArgs>(args?: SelectSubset<T, TopicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>
+
+    /**
+     * Delete a Topic.
+     * @param {TopicDeleteArgs} args - Arguments to delete one Topic.
+     * @example
+     * // Delete one Topic
+     * const Topic = await prisma.topic.delete({
+     *   where: {
+     *     // ... filter to delete one Topic
+     *   }
+     * })
+     * 
+     */
+    delete<T extends TopicDeleteArgs>(args: SelectSubset<T, TopicDeleteArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+
+    /**
+     * Update one Topic.
+     * @param {TopicUpdateArgs} args - Arguments to update one Topic.
+     * @example
+     * // Update one Topic
+     * const topic = await prisma.topic.update({
+     *   where: {
+     *     // ... provide filter here
+     *   },
+     *   data: {
+     *     // ... provide data here
+     *   }
+     * })
+     * 
+     */
+    update<T extends TopicUpdateArgs>(args: SelectSubset<T, TopicUpdateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+
+    /**
+     * Delete zero or more Topics.
+     * @param {TopicDeleteManyArgs} args - Arguments to filter Topics to delete.
+     * @example
+     * // Delete a few Topics
+     * const { count } = await prisma.topic.deleteMany({
+     *   where: {
+     *     // ... provide filter here
+     *   }
+     * })
+     * 
+     */
+    deleteMany<T extends TopicDeleteManyArgs>(args?: SelectSubset<T, TopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
+
+    /**
+     * Update zero or more Topics.
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * @param {TopicUpdateManyArgs} args - Arguments to update one or more rows.
+     * @example
+     * // Update many Topics
+     * const topic = await prisma.topic.updateMany({
+     *   where: {
+     *     // ... provide filter here
+     *   },
+     *   data: {
+     *     // ... provide data here
+     *   }
+     * })
+     * 
+     */
+    updateMany<T extends TopicUpdateManyArgs>(args: SelectSubset<T, TopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>
+
+    /**
+     * Update zero or more Topics and returns the data updated in the database.
+     * @param {TopicUpdateManyAndReturnArgs} args - Arguments to update many Topics.
+     * @example
+     * // Update many Topics
+     * const topic = await prisma.topic.updateManyAndReturn({
+     *   where: {
+     *     // ... provide filter here
+     *   },
+     *   data: [
+     *     // ... provide data here
+     *   ]
+     * })
+     * 
+     * // Update zero or more Topics and only return the `id`
+     * const topicWithIdOnly = await prisma.topic.updateManyAndReturn({
+     *   select: { id: true },
+     *   where: {
+     *     // ... provide filter here
+     *   },
+     *   data: [
+     *     // ... provide data here
+     *   ]
+     * })
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * 
+     */
+    updateManyAndReturn<T extends TopicUpdateManyAndReturnArgs>(args: SelectSubset<T, TopicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>
+
+    /**
+     * Create or update one Topic.
+     * @param {TopicUpsertArgs} args - Arguments to update or create a Topic.
+     * @example
+     * // Update or create a Topic
+     * const topic = await prisma.topic.upsert({
+     *   create: {
+     *     // ... data to create a Topic
+     *   },
+     *   update: {
+     *     // ... in case it already exists, update
+     *   },
+     *   where: {
+     *     // ... the filter for the Topic we want to update
+     *   }
+     * })
+     */
+    upsert<T extends TopicUpsertArgs>(args: SelectSubset<T, TopicUpsertArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>
+
+
+    /**
+     * Count the number of Topics.
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * @param {TopicCountArgs} args - Arguments to filter Topics to count.
+     * @example
+     * // Count the number of Topics
+     * const count = await prisma.topic.count({
+     *   where: {
+     *     // ... the filter for the Topics we want to count
+     *   }
+     * })
+    **/
+    count<T extends TopicCountArgs>(
+      args?: Subset<T, TopicCountArgs>,
+    ): Prisma.PrismaPromise<
+      T extends $Utils.Record<'select', any>
+        ? T['select'] extends true
+          ? number
+          : GetScalarType<T['select'], TopicCountAggregateOutputType>
+        : number
+    >
+
+    /**
+     * Allows you to perform aggregations operations on a Topic.
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
+     * @example
+     * // Ordered by age ascending
+     * // Where email contains prisma.io
+     * // Limited to the 10 users
+     * const aggregations = await prisma.user.aggregate({
+     *   _avg: {
+     *     age: true,
+     *   },
+     *   where: {
+     *     email: {
+     *       contains: "prisma.io",
+     *     },
+     *   },
+     *   orderBy: {
+     *     age: "asc",
+     *   },
+     *   take: 10,
+     * })
+    **/
+    aggregate<T extends TopicAggregateArgs>(args: Subset<T, TopicAggregateArgs>): Prisma.PrismaPromise<GetTopicAggregateType<T>>
+
+    /**
+     * Group by Topic.
+     * Note, that providing `undefined` is treated as the value not being there.
+     * Read more here: https://pris.ly/d/null-undefined
+     * @param {TopicGroupByArgs} args - Group by arguments.
+     * @example
+     * // Group by city, order by createdAt, get count
+     * const result = await prisma.user.groupBy({
+     *   by: ['city', 'createdAt'],
+     *   orderBy: {
+     *     createdAt: true
+     *   },
+     *   _count: {
+     *     _all: true
+     *   },
+     * })
+     * 
+    **/
+    groupBy<
+      T extends TopicGroupByArgs,
+      HasSelectOrTake extends Or<
+        Extends<'skip', Keys<T>>,
+        Extends<'take', Keys<T>>
+      >,
+      OrderByArg extends True extends HasSelectOrTake
+        ? { orderBy: TopicGroupByArgs['orderBy'] }
+        : { orderBy?: TopicGroupByArgs['orderBy'] },
+      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
+      ByFields extends MaybeTupleToUnion<T['by']>,
+      ByValid extends Has<ByFields, OrderFields>,
+      HavingFields extends GetHavingFields<T['having']>,
+      HavingValid extends Has<ByFields, HavingFields>,
+      ByEmpty extends T['by'] extends never[] ? True : False,
+      InputErrors extends ByEmpty extends True
+      ? `Error: "by" must not be empty.`
+      : HavingValid extends False
+      ? {
+          [P in HavingFields]: P extends ByFields
+            ? never
+            : P extends string
+            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
+            : [
+                Error,
+                'Field ',
+                P,
+                ` in "having" needs to be provided in "by"`,
+              ]
+        }[HavingFields]
+      : 'take' extends Keys<T>
+      ? 'orderBy' extends Keys<T>
+        ? ByValid extends True
+          ? {}
+          : {
+              [P in OrderFields]: P extends ByFields
+                ? never
+                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
+            }[OrderFields]
+        : 'Error: If you provide "take", you also need to provide "orderBy"'
+      : 'skip' extends Keys<T>
+      ? 'orderBy' extends Keys<T>
+        ? ByValid extends True
+          ? {}
+          : {
+              [P in OrderFields]: P extends ByFields
+                ? never
+                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
+            }[OrderFields]
+        : 'Error: If you provide "skip", you also need to provide "orderBy"'
+      : ByValid extends True
+      ? {}
+      : {
+          [P in OrderFields]: P extends ByFields
+            ? never
+            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
+        }[OrderFields]
+    >(args: SubsetIntersection<T, TopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
+  /**
+   * Fields of the Topic model
+   */
+  readonly fields: TopicFieldRefs;
+  }
+
+  /**
+   * The delegate class that acts as a "Promise-like" for Topic.
+   * Why is this prefixed with `Prisma__`?
+   * Because we want to prevent naming conflicts as mentioned in
+   * https://github.com/prisma/prisma-client-js/issues/707
+   */
+  export interface Prisma__TopicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
+    readonly [Symbol.toStringTag]: "PrismaPromise"
+    items<T extends Topic$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
+    tags<T extends Topic$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
+    /**
+     * Attaches callbacks for the resolution and/or rejection of the Promise.
+     * @param onfulfilled The callback to execute when the Promise is resolved.
+     * @param onrejected The callback to execute when the Promise is rejected.
+     * @returns A Promise for the completion of which ever callback is executed.
+     */
+    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
+    /**
+     * Attaches a callback for only the rejection of the Promise.
+     * @param onrejected The callback to execute when the Promise is rejected.
+     * @returns A Promise for the completion of the callback.
+     */
+    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
+    /**
+     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
+     * resolved value cannot be modified from the callback.
+     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
+     * @returns A Promise for the completion of the callback.
+     */
+    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
+  }
+
+
+
+
+  /**
+   * Fields of the Topic model
+   */
+  interface TopicFieldRefs {
+    readonly id: FieldRef<"Topic", 'String'>
+    readonly slug: FieldRef<"Topic", 'String'>
+    readonly title: FieldRef<"Topic", 'String'>
+    readonly description: FieldRef<"Topic", 'String'>
+    readonly locale: FieldRef<"Topic", 'Locale'>
+    readonly createdAt: FieldRef<"Topic", 'DateTime'>
+    readonly updatedAt: FieldRef<"Topic", 'DateTime'>
+  }
+    
+
+  // Custom InputTypes
+  /**
+   * Topic findUnique
+   */
+  export type TopicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * Filter, which Topic to fetch.
+     */
+    where: TopicWhereUniqueInput
+  }
+
+  /**
+   * Topic findUniqueOrThrow
+   */
+  export type TopicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * Filter, which Topic to fetch.
+     */
+    where: TopicWhereUniqueInput
+  }
+
+  /**
+   * Topic findFirst
+   */
+  export type TopicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * Filter, which Topic to fetch.
+     */
+    where?: TopicWhereInput
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
+     * 
+     * Determine the order of Topics to fetch.
+     */
+    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
+     * 
+     * Sets the position for searching for Topics.
+     */
+    cursor?: TopicWhereUniqueInput
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
+     * 
+     * Take `¬±n` Topics from the position of the cursor.
+     */
+    take?: number
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
+     * 
+     * Skip the first `n` Topics.
+     */
+    skip?: number
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
+     * 
+     * Filter by unique combinations of Topics.
+     */
+    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
+  }
+
+  /**
+   * Topic findFirstOrThrow
+   */
+  export type TopicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * Filter, which Topic to fetch.
+     */
+    where?: TopicWhereInput
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
+     * 
+     * Determine the order of Topics to fetch.
+     */
+    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
+     * 
+     * Sets the position for searching for Topics.
+     */
+    cursor?: TopicWhereUniqueInput
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
+     * 
+     * Take `¬±n` Topics from the position of the cursor.
+     */
+    take?: number
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
+     * 
+     * Skip the first `n` Topics.
+     */
+    skip?: number
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
+     * 
+     * Filter by unique combinations of Topics.
+     */
+    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
+  }
+
+  /**
+   * Topic findMany
+   */
+  export type TopicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * Filter, which Topics to fetch.
+     */
+    where?: TopicWhereInput
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
+     * 
+     * Determine the order of Topics to fetch.
+     */
+    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
+     * 
+     * Sets the position for listing Topics.
+     */
+    cursor?: TopicWhereUniqueInput
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
+     * 
+     * Take `¬±n` Topics from the position of the cursor.
+     */
+    take?: number
+    /**
+     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
+     * 
+     * Skip the first `n` Topics.
+     */
+    skip?: number
+    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
+  }
+
+  /**
+   * Topic create
+   */
+  export type TopicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * The data needed to create a Topic.
+     */
+    data: XOR<TopicCreateInput, TopicUncheckedCreateInput>
+  }
+
+  /**
+   * Topic createMany
+   */
+  export type TopicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * The data used to create many Topics.
+     */
+    data: TopicCreateManyInput | TopicCreateManyInput[]
+    skipDuplicates?: boolean
+  }
+
+  /**
+   * Topic createManyAndReturn
+   */
+  export type TopicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelectCreateManyAndReturn<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * The data used to create many Topics.
+     */
+    data: TopicCreateManyInput | TopicCreateManyInput[]
+    skipDuplicates?: boolean
+  }
+
+  /**
+   * Topic update
+   */
+  export type TopicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * The data needed to update a Topic.
+     */
+    data: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
+    /**
+     * Choose, which Topic to update.
+     */
+    where: TopicWhereUniqueInput
+  }
+
+  /**
+   * Topic updateMany
+   */
+  export type TopicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * The data used to update Topics.
+     */
+    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyInput>
+    /**
+     * Filter which Topics to update
+     */
+    where?: TopicWhereInput
+    /**
+     * Limit how many Topics to update.
+     */
+    limit?: number
+  }
+
+  /**
+   * Topic updateManyAndReturn
+   */
+  export type TopicUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelectUpdateManyAndReturn<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * The data used to update Topics.
+     */
+    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyInput>
+    /**
+     * Filter which Topics to update
+     */
+    where?: TopicWhereInput
+    /**
+     * Limit how many Topics to update.
+     */
+    limit?: number
+  }
+
+  /**
+   * Topic upsert
+   */
+  export type TopicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * The filter to search for the Topic to update in case it exists.
+     */
+    where: TopicWhereUniqueInput
+    /**
+     * In case the Topic found by the `where` argument doesn't exist, create a new Topic with this data.
+     */
+    create: XOR<TopicCreateInput, TopicUncheckedCreateInput>
+    /**
+     * In case the Topic was found with the provided `where` argument, update it with this data.
+     */
+    update: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
+  }
+
+  /**
+   * Topic delete
+   */
+  export type TopicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Topic
+     */
+    select?: TopicSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Topic
+     */
+    omit?: TopicOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicInclude<ExtArgs> | null
+    /**
+     * Filter which Topic to delete.
+     */
+    where: TopicWhereUniqueInput
+  }
+
+  /**
+   * Topic deleteMany
+   */
+  export type TopicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Filter which Topics to delete
+     */
+    where?: TopicWhereInput
+    /**
+     * Limit how many Topics to delete.
+     */
+    limit?: number
+  }
+
+  /**
+   * Topic.items
+   */
+  export type Topic$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the ContentItem
+     */
+    select?: ContentItemSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the ContentItem
+     */
+    omit?: ContentItemOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: ContentItemInclude<ExtArgs> | null
+    where?: ContentItemWhereInput
+    orderBy?: ContentItemOrderByWithRelationInput | ContentItemOrderByWithRelationInput[]
+    cursor?: ContentItemWhereUniqueInput
+    take?: number
+    skip?: number
+    distinct?: ContentItemScalarFieldEnum | ContentItemScalarFieldEnum[]
+  }
+
+  /**
+   * Topic.tags
+   */
+  export type Topic$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the TopicTag
+     */
+    select?: TopicTagSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the TopicTag
+     */
+    omit?: TopicTagOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: TopicTagInclude<ExtArgs> | null
+    where?: TopicTagWhereInput
+    orderBy?: TopicTagOrderByWithRelationInput | TopicTagOrderByWithRelationInput[]
+    cursor?: TopicTagWhereUniqueInput
+    take?: number
     skip?: number
     distinct?: TopicTagScalarFieldEnum | TopicTagScalarFieldEnum[]
   }
@@ -6083,6 +7333,8 @@ export namespace Prisma {
     validation?: boolean
     meta?: boolean
     topic?: boolean | TopicDefaultArgs<ExtArgs>
+    regionManual?: boolean | ContentItem$regionManualArgs<ExtArgs>
+    regionEffective?: boolean | ContentItem$regionEffectiveArgs<ExtArgs>
     answerOptions?: boolean | ContentItem$answerOptionsArgs<ExtArgs>
     tags?: boolean | ContentItem$tagsArgs<ExtArgs>
     _count?: boolean | ContentItemCountOutputTypeDefaultArgs<ExtArgs>
@@ -6110,6 +7362,8 @@ export namespace Prisma {
     validation?: boolean
     meta?: boolean
     topic?: boolean | TopicDefaultArgs<ExtArgs>
+    regionManual?: boolean | ContentItem$regionManualArgs<ExtArgs>
+    regionEffective?: boolean | ContentItem$regionEffectiveArgs<ExtArgs>
   }, ExtArgs["result"]["contentItem"]>
 
   export type ContentItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
@@ -6134,6 +7388,8 @@ export namespace Prisma {
     validation?: boolean
     meta?: boolean
     topic?: boolean | TopicDefaultArgs<ExtArgs>
+    regionManual?: boolean | ContentItem$regionManualArgs<ExtArgs>
+    regionEffective?: boolean | ContentItem$regionEffectiveArgs<ExtArgs>
   }, ExtArgs["result"]["contentItem"]>
 
   export type ContentItemSelectScalar = {
@@ -6162,21 +7418,29 @@ export namespace Prisma {
   export type ContentItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "kind" | "topicId" | "locale" | "title" | "text" | "richText" | "sortOrder" | "status" | "authorName" | "createdAt" | "updatedAt" | "publishAt" | "expireAt" | "regionMode" | "regionManualId" | "regionEffectiveId" | "regionAuto" | "validation" | "meta", ExtArgs["result"]["contentItem"]>
   export type ContentItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     topic?: boolean | TopicDefaultArgs<ExtArgs>
+    regionManual?: boolean | ContentItem$regionManualArgs<ExtArgs>
+    regionEffective?: boolean | ContentItem$regionEffectiveArgs<ExtArgs>
     answerOptions?: boolean | ContentItem$answerOptionsArgs<ExtArgs>
     tags?: boolean | ContentItem$tagsArgs<ExtArgs>
     _count?: boolean | ContentItemCountOutputTypeDefaultArgs<ExtArgs>
   }
   export type ContentItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     topic?: boolean | TopicDefaultArgs<ExtArgs>
+    regionManual?: boolean | ContentItem$regionManualArgs<ExtArgs>
+    regionEffective?: boolean | ContentItem$regionEffectiveArgs<ExtArgs>
   }
   export type ContentItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     topic?: boolean | TopicDefaultArgs<ExtArgs>
+    regionManual?: boolean | ContentItem$regionManualArgs<ExtArgs>
+    regionEffective?: boolean | ContentItem$regionEffectiveArgs<ExtArgs>
   }
 
   export type $ContentItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
     name: "ContentItem"
     objects: {
       topic: Prisma.$TopicPayload<ExtArgs>
+      regionManual: Prisma.$RegionPayload<ExtArgs> | null
+      regionEffective: Prisma.$RegionPayload<ExtArgs> | null
       answerOptions: Prisma.$AnswerOptionPayload<ExtArgs>[]
       tags: Prisma.$ItemTagPayload<ExtArgs>[]
     }
@@ -6596,6 +7860,8 @@ export namespace Prisma {
   export interface Prisma__ContentItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
     readonly [Symbol.toStringTag]: "PrismaPromise"
     topic<T extends TopicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TopicDefaultArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
+    regionManual<T extends ContentItem$regionManualArgs<ExtArgs> = {}>(args?: Subset<T, ContentItem$regionManualArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
+    regionEffective<T extends ContentItem$regionEffectiveArgs<ExtArgs> = {}>(args?: Subset<T, ContentItem$regionEffectiveArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
     answerOptions<T extends ContentItem$answerOptionsArgs<ExtArgs> = {}>(args?: Subset<T, ContentItem$answerOptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
     tags<T extends ContentItem$tagsArgs<ExtArgs> = {}>(args?: Subset<T, ContentItem$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
     /**
@@ -7042,6 +8308,44 @@ export namespace Prisma {
     limit?: number
   }
 
+  /**
+   * ContentItem.regionManual
+   */
+  export type ContentItem$regionManualArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Region
+     */
+    select?: RegionSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Region
+     */
+    omit?: RegionOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: RegionInclude<ExtArgs> | null
+    where?: RegionWhereInput
+  }
+
+  /**
+   * ContentItem.regionEffective
+   */
+  export type ContentItem$regionEffectiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
+    /**
+     * Select specific fields to fetch from the Region
+     */
+    select?: RegionSelect<ExtArgs> | null
+    /**
+     * Omit specific fields from the Region
+     */
+    omit?: RegionOmit<ExtArgs> | null
+    /**
+     * Choose, which related nodes to fetch as well
+     */
+    include?: RegionInclude<ExtArgs> | null
+    where?: RegionWhereInput
+  }
+
   /**
    * ContentItem.answerOptions
    */
@@ -8237,6 +9541,16 @@ export namespace Prisma {
   export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]
 
 
+  export const RegionScalarFieldEnum: {
+    id: 'id',
+    code: 'code',
+    name: 'name',
+    level: 'level'
+  };
+
+  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]
+
+
   export const TopicScalarFieldEnum: {
     id: 'id',
     slug: 'slug',
@@ -8377,58 +9691,58 @@ export namespace Prisma {
 
 
   /**
-   * Reference to a field of type 'Locale'
+   * Reference to a field of type 'Int'
    */
-  export type EnumLocaleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Locale'>
+  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
     
 
 
   /**
-   * Reference to a field of type 'Locale[]'
+   * Reference to a field of type 'Int[]'
    */
-  export type ListEnumLocaleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Locale[]'>
+  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
     
 
 
   /**
-   * Reference to a field of type 'DateTime'
+   * Reference to a field of type 'Locale'
    */
-  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
+  export type EnumLocaleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Locale'>
     
 
 
   /**
-   * Reference to a field of type 'DateTime[]'
+   * Reference to a field of type 'Locale[]'
    */
-  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
+  export type ListEnumLocaleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Locale[]'>
     
 
 
   /**
-   * Reference to a field of type 'ContentKind'
+   * Reference to a field of type 'DateTime'
    */
-  export type EnumContentKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContentKind'>
+  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
     
 
 
   /**
-   * Reference to a field of type 'ContentKind[]'
+   * Reference to a field of type 'DateTime[]'
    */
-  export type ListEnumContentKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContentKind[]'>
+  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
     
 
 
   /**
-   * Reference to a field of type 'Int'
+   * Reference to a field of type 'ContentKind'
    */
-  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
+  export type EnumContentKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContentKind'>
     
 
 
   /**
-   * Reference to a field of type 'Int[]'
+   * Reference to a field of type 'ContentKind[]'
    */
-  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
+  export type ListEnumContentKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContentKind[]'>
     
 
 
@@ -8498,6 +9812,61 @@ export namespace Prisma {
    */
 
 
+  export type RegionWhereInput = {
+    AND?: RegionWhereInput | RegionWhereInput[]
+    OR?: RegionWhereInput[]
+    NOT?: RegionWhereInput | RegionWhereInput[]
+    id?: StringFilter<"Region"> | string
+    code?: StringFilter<"Region"> | string
+    name?: StringFilter<"Region"> | string
+    level?: IntFilter<"Region"> | number
+    manualItems?: ContentItemListRelationFilter
+    effectiveItems?: ContentItemListRelationFilter
+  }
+
+  export type RegionOrderByWithRelationInput = {
+    id?: SortOrder
+    code?: SortOrder
+    name?: SortOrder
+    level?: SortOrder
+    manualItems?: ContentItemOrderByRelationAggregateInput
+    effectiveItems?: ContentItemOrderByRelationAggregateInput
+  }
+
+  export type RegionWhereUniqueInput = Prisma.AtLeast<{
+    id?: string
+    code?: string
+    AND?: RegionWhereInput | RegionWhereInput[]
+    OR?: RegionWhereInput[]
+    NOT?: RegionWhereInput | RegionWhereInput[]
+    name?: StringFilter<"Region"> | string
+    level?: IntFilter<"Region"> | number
+    manualItems?: ContentItemListRelationFilter
+    effectiveItems?: ContentItemListRelationFilter
+  }, "id" | "code">
+
+  export type RegionOrderByWithAggregationInput = {
+    id?: SortOrder
+    code?: SortOrder
+    name?: SortOrder
+    level?: SortOrder
+    _count?: RegionCountOrderByAggregateInput
+    _avg?: RegionAvgOrderByAggregateInput
+    _max?: RegionMaxOrderByAggregateInput
+    _min?: RegionMinOrderByAggregateInput
+    _sum?: RegionSumOrderByAggregateInput
+  }
+
+  export type RegionScalarWhereWithAggregatesInput = {
+    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
+    OR?: RegionScalarWhereWithAggregatesInput[]
+    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
+    id?: StringWithAggregatesFilter<"Region"> | string
+    code?: StringWithAggregatesFilter<"Region"> | string
+    name?: StringWithAggregatesFilter<"Region"> | string
+    level?: IntWithAggregatesFilter<"Region"> | number
+  }
+
   export type TopicWhereInput = {
     AND?: TopicWhereInput | TopicWhereInput[]
     OR?: TopicWhereInput[]
@@ -8737,6 +10106,8 @@ export namespace Prisma {
     validation?: JsonNullableFilter<"ContentItem">
     meta?: JsonNullableFilter<"ContentItem">
     topic?: XOR<TopicScalarRelationFilter, TopicWhereInput>
+    regionManual?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
+    regionEffective?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
     answerOptions?: AnswerOptionListRelationFilter
     tags?: ItemTagListRelationFilter
   }
@@ -8763,6 +10134,8 @@ export namespace Prisma {
     validation?: SortOrderInput | SortOrder
     meta?: SortOrderInput | SortOrder
     topic?: TopicOrderByWithRelationInput
+    regionManual?: RegionOrderByWithRelationInput
+    regionEffective?: RegionOrderByWithRelationInput
     answerOptions?: AnswerOptionOrderByRelationAggregateInput
     tags?: ItemTagOrderByRelationAggregateInput
   }
@@ -8792,6 +10165,8 @@ export namespace Prisma {
     validation?: JsonNullableFilter<"ContentItem">
     meta?: JsonNullableFilter<"ContentItem">
     topic?: XOR<TopicScalarRelationFilter, TopicWhereInput>
+    regionManual?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
+    regionEffective?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
     answerOptions?: AnswerOptionListRelationFilter
     tags?: ItemTagListRelationFilter
   }, "id">
@@ -8919,6 +10294,63 @@ export namespace Prisma {
     meta?: JsonNullableWithAggregatesFilter<"AnswerOption">
   }
 
+  export type RegionCreateInput = {
+    id?: string
+    code: string
+    name: string
+    level: number
+    manualItems?: ContentItemCreateNestedManyWithoutRegionManualInput
+    effectiveItems?: ContentItemCreateNestedManyWithoutRegionEffectiveInput
+  }
+
+  export type RegionUncheckedCreateInput = {
+    id?: string
+    code: string
+    name: string
+    level: number
+    manualItems?: ContentItemUncheckedCreateNestedManyWithoutRegionManualInput
+    effectiveItems?: ContentItemUncheckedCreateNestedManyWithoutRegionEffectiveInput
+  }
+
+  export type RegionUpdateInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    code?: StringFieldUpdateOperationsInput | string
+    name?: StringFieldUpdateOperationsInput | string
+    level?: IntFieldUpdateOperationsInput | number
+    manualItems?: ContentItemUpdateManyWithoutRegionManualNestedInput
+    effectiveItems?: ContentItemUpdateManyWithoutRegionEffectiveNestedInput
+  }
+
+  export type RegionUncheckedUpdateInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    code?: StringFieldUpdateOperationsInput | string
+    name?: StringFieldUpdateOperationsInput | string
+    level?: IntFieldUpdateOperationsInput | number
+    manualItems?: ContentItemUncheckedUpdateManyWithoutRegionManualNestedInput
+    effectiveItems?: ContentItemUncheckedUpdateManyWithoutRegionEffectiveNestedInput
+  }
+
+  export type RegionCreateManyInput = {
+    id?: string
+    code: string
+    name: string
+    level: number
+  }
+
+  export type RegionUpdateManyMutationInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    code?: StringFieldUpdateOperationsInput | string
+    name?: StringFieldUpdateOperationsInput | string
+    level?: IntFieldUpdateOperationsInput | number
+  }
+
+  export type RegionUncheckedUpdateManyInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    code?: StringFieldUpdateOperationsInput | string
+    name?: StringFieldUpdateOperationsInput | string
+    level?: IntFieldUpdateOperationsInput | number
+  }
+
   export type TopicCreateInput = {
     id?: string
     slug: string
@@ -9142,12 +10574,12 @@ export namespace Prisma {
     publishAt?: Date | string | null
     expireAt?: Date | string | null
     regionMode?: $Enums.RegionMode
-    regionManualId?: string | null
-    regionEffectiveId?: string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
     topic: TopicCreateNestedOneWithoutItemsInput
+    regionManual?: RegionCreateNestedOneWithoutManualItemsInput
+    regionEffective?: RegionCreateNestedOneWithoutEffectiveItemsInput
     answerOptions?: AnswerOptionCreateNestedManyWithoutItemInput
     tags?: ItemTagCreateNestedManyWithoutItemInput
   }
@@ -9192,12 +10624,12 @@ export namespace Prisma {
     publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
-    regionManualId?: NullableStringFieldUpdateOperationsInput | string | null
-    regionEffectiveId?: NullableStringFieldUpdateOperationsInput | string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
     topic?: TopicUpdateOneRequiredWithoutItemsNestedInput
+    regionManual?: RegionUpdateOneWithoutManualItemsNestedInput
+    regionEffective?: RegionUpdateOneWithoutEffectiveItemsNestedInput
     answerOptions?: AnswerOptionUpdateManyWithoutItemNestedInput
     tags?: ItemTagUpdateManyWithoutItemNestedInput
   }
@@ -9265,8 +10697,6 @@ export namespace Prisma {
     publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
-    regionManualId?: NullableStringFieldUpdateOperationsInput | string | null
-    regionEffectiveId?: NullableStringFieldUpdateOperationsInput | string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
@@ -9379,6 +10809,90 @@ export namespace Prisma {
     not?: NestedStringFilter<$PrismaModel> | string
   }
 
+  export type IntFilter<$PrismaModel = never> = {
+    equals?: number | IntFieldRefInput<$PrismaModel>
+    in?: number[] | ListIntFieldRefInput<$PrismaModel>
+    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
+    lt?: number | IntFieldRefInput<$PrismaModel>
+    lte?: number | IntFieldRefInput<$PrismaModel>
+    gt?: number | IntFieldRefInput<$PrismaModel>
+    gte?: number | IntFieldRefInput<$PrismaModel>
+    not?: NestedIntFilter<$PrismaModel> | number
+  }
+
+  export type ContentItemListRelationFilter = {
+    every?: ContentItemWhereInput
+    some?: ContentItemWhereInput
+    none?: ContentItemWhereInput
+  }
+
+  export type ContentItemOrderByRelationAggregateInput = {
+    _count?: SortOrder
+  }
+
+  export type RegionCountOrderByAggregateInput = {
+    id?: SortOrder
+    code?: SortOrder
+    name?: SortOrder
+    level?: SortOrder
+  }
+
+  export type RegionAvgOrderByAggregateInput = {
+    level?: SortOrder
+  }
+
+  export type RegionMaxOrderByAggregateInput = {
+    id?: SortOrder
+    code?: SortOrder
+    name?: SortOrder
+    level?: SortOrder
+  }
+
+  export type RegionMinOrderByAggregateInput = {
+    id?: SortOrder
+    code?: SortOrder
+    name?: SortOrder
+    level?: SortOrder
+  }
+
+  export type RegionSumOrderByAggregateInput = {
+    level?: SortOrder
+  }
+
+  export type StringWithAggregatesFilter<$PrismaModel = never> = {
+    equals?: string | StringFieldRefInput<$PrismaModel>
+    in?: string[] | ListStringFieldRefInput<$PrismaModel>
+    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
+    lt?: string | StringFieldRefInput<$PrismaModel>
+    lte?: string | StringFieldRefInput<$PrismaModel>
+    gt?: string | StringFieldRefInput<$PrismaModel>
+    gte?: string | StringFieldRefInput<$PrismaModel>
+    contains?: string | StringFieldRefInput<$PrismaModel>
+    startsWith?: string | StringFieldRefInput<$PrismaModel>
+    endsWith?: string | StringFieldRefInput<$PrismaModel>
+    mode?: QueryMode
+    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
+    _count?: NestedIntFilter<$PrismaModel>
+    _min?: NestedStringFilter<$PrismaModel>
+    _max?: NestedStringFilter<$PrismaModel>
+  }
+
+  export type IntWithAggregatesFilter<$PrismaModel = never> = {
+    equals?: number | IntFieldRefInput<$PrismaModel>
+    in?: number[] | ListIntFieldRefInput<$PrismaModel>
+    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
+    lt?: number | IntFieldRefInput<$PrismaModel>
+    lte?: number | IntFieldRefInput<$PrismaModel>
+    gt?: number | IntFieldRefInput<$PrismaModel>
+    gte?: number | IntFieldRefInput<$PrismaModel>
+    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
+    _count?: NestedIntFilter<$PrismaModel>
+    _avg?: NestedFloatFilter<$PrismaModel>
+    _sum?: NestedIntFilter<$PrismaModel>
+    _min?: NestedIntFilter<$PrismaModel>
+    _max?: NestedIntFilter<$PrismaModel>
+  }
+
   export type StringNullableFilter<$PrismaModel = never> = {
     equals?: string | StringFieldRefInput<$PrismaModel> | null
     in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
@@ -9412,12 +10926,6 @@ export namespace Prisma {
     not?: NestedDateTimeFilter<$PrismaModel> | Date | string
   }
 
-  export type ContentItemListRelationFilter = {
-    every?: ContentItemWhereInput
-    some?: ContentItemWhereInput
-    none?: ContentItemWhereInput
-  }
-
   export type TopicTagListRelationFilter = {
     every?: TopicTagWhereInput
     some?: TopicTagWhereInput
@@ -9429,10 +10937,6 @@ export namespace Prisma {
     nulls?: NullsOrder
   }
 
-  export type ContentItemOrderByRelationAggregateInput = {
-    _count?: SortOrder
-  }
-
   export type TopicTagOrderByRelationAggregateInput = {
     _count?: SortOrder
   }
@@ -9467,24 +10971,6 @@ export namespace Prisma {
     updatedAt?: SortOrder
   }
 
-  export type StringWithAggregatesFilter<$PrismaModel = never> = {
-    equals?: string | StringFieldRefInput<$PrismaModel>
-    in?: string[] | ListStringFieldRefInput<$PrismaModel>
-    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
-    lt?: string | StringFieldRefInput<$PrismaModel>
-    lte?: string | StringFieldRefInput<$PrismaModel>
-    gt?: string | StringFieldRefInput<$PrismaModel>
-    gte?: string | StringFieldRefInput<$PrismaModel>
-    contains?: string | StringFieldRefInput<$PrismaModel>
-    startsWith?: string | StringFieldRefInput<$PrismaModel>
-    endsWith?: string | StringFieldRefInput<$PrismaModel>
-    mode?: QueryMode
-    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
-    _count?: NestedIntFilter<$PrismaModel>
-    _min?: NestedStringFilter<$PrismaModel>
-    _max?: NestedStringFilter<$PrismaModel>
-  }
-
   export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
     equals?: string | StringFieldRefInput<$PrismaModel> | null
     in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
@@ -9623,17 +11109,6 @@ export namespace Prisma {
     not?: NestedEnumContentKindFilter<$PrismaModel> | $Enums.ContentKind
   }
 
-  export type IntFilter<$PrismaModel = never> = {
-    equals?: number | IntFieldRefInput<$PrismaModel>
-    in?: number[] | ListIntFieldRefInput<$PrismaModel>
-    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
-    lt?: number | IntFieldRefInput<$PrismaModel>
-    lte?: number | IntFieldRefInput<$PrismaModel>
-    gt?: number | IntFieldRefInput<$PrismaModel>
-    gte?: number | IntFieldRefInput<$PrismaModel>
-    not?: NestedIntFilter<$PrismaModel> | number
-  }
-
   export type EnumPublishStatusFilter<$PrismaModel = never> = {
     equals?: $Enums.PublishStatus | EnumPublishStatusFieldRefInput<$PrismaModel>
     in?: $Enums.PublishStatus[] | ListEnumPublishStatusFieldRefInput<$PrismaModel>
@@ -9682,6 +11157,11 @@ export namespace Prisma {
     not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
   }
 
+  export type RegionNullableScalarRelationFilter = {
+    is?: RegionWhereInput | null
+    isNot?: RegionWhereInput | null
+  }
+
   export type AnswerOptionListRelationFilter = {
     every?: AnswerOptionWhereInput
     some?: AnswerOptionWhereInput
@@ -9773,22 +11253,6 @@ export namespace Prisma {
     _max?: NestedEnumContentKindFilter<$PrismaModel>
   }
 
-  export type IntWithAggregatesFilter<$PrismaModel = never> = {
-    equals?: number | IntFieldRefInput<$PrismaModel>
-    in?: number[] | ListIntFieldRefInput<$PrismaModel>
-    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
-    lt?: number | IntFieldRefInput<$PrismaModel>
-    lte?: number | IntFieldRefInput<$PrismaModel>
-    gt?: number | IntFieldRefInput<$PrismaModel>
-    gte?: number | IntFieldRefInput<$PrismaModel>
-    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
-    _count?: NestedIntFilter<$PrismaModel>
-    _avg?: NestedFloatFilter<$PrismaModel>
-    _sum?: NestedIntFilter<$PrismaModel>
-    _min?: NestedIntFilter<$PrismaModel>
-    _max?: NestedIntFilter<$PrismaModel>
-  }
-
   export type EnumPublishStatusWithAggregatesFilter<$PrismaModel = never> = {
     equals?: $Enums.PublishStatus | EnumPublishStatusFieldRefInput<$PrismaModel>
     in?: $Enums.PublishStatus[] | ListEnumPublishStatusFieldRefInput<$PrismaModel>
@@ -9908,6 +11372,102 @@ export namespace Prisma {
     _max?: NestedBoolFilter<$PrismaModel>
   }
 
+  export type ContentItemCreateNestedManyWithoutRegionManualInput = {
+    create?: XOR<ContentItemCreateWithoutRegionManualInput, ContentItemUncheckedCreateWithoutRegionManualInput> | ContentItemCreateWithoutRegionManualInput[] | ContentItemUncheckedCreateWithoutRegionManualInput[]
+    connectOrCreate?: ContentItemCreateOrConnectWithoutRegionManualInput | ContentItemCreateOrConnectWithoutRegionManualInput[]
+    createMany?: ContentItemCreateManyRegionManualInputEnvelope
+    connect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+  }
+
+  export type ContentItemCreateNestedManyWithoutRegionEffectiveInput = {
+    create?: XOR<ContentItemCreateWithoutRegionEffectiveInput, ContentItemUncheckedCreateWithoutRegionEffectiveInput> | ContentItemCreateWithoutRegionEffectiveInput[] | ContentItemUncheckedCreateWithoutRegionEffectiveInput[]
+    connectOrCreate?: ContentItemCreateOrConnectWithoutRegionEffectiveInput | ContentItemCreateOrConnectWithoutRegionEffectiveInput[]
+    createMany?: ContentItemCreateManyRegionEffectiveInputEnvelope
+    connect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+  }
+
+  export type ContentItemUncheckedCreateNestedManyWithoutRegionManualInput = {
+    create?: XOR<ContentItemCreateWithoutRegionManualInput, ContentItemUncheckedCreateWithoutRegionManualInput> | ContentItemCreateWithoutRegionManualInput[] | ContentItemUncheckedCreateWithoutRegionManualInput[]
+    connectOrCreate?: ContentItemCreateOrConnectWithoutRegionManualInput | ContentItemCreateOrConnectWithoutRegionManualInput[]
+    createMany?: ContentItemCreateManyRegionManualInputEnvelope
+    connect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+  }
+
+  export type ContentItemUncheckedCreateNestedManyWithoutRegionEffectiveInput = {
+    create?: XOR<ContentItemCreateWithoutRegionEffectiveInput, ContentItemUncheckedCreateWithoutRegionEffectiveInput> | ContentItemCreateWithoutRegionEffectiveInput[] | ContentItemUncheckedCreateWithoutRegionEffectiveInput[]
+    connectOrCreate?: ContentItemCreateOrConnectWithoutRegionEffectiveInput | ContentItemCreateOrConnectWithoutRegionEffectiveInput[]
+    createMany?: ContentItemCreateManyRegionEffectiveInputEnvelope
+    connect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+  }
+
+  export type StringFieldUpdateOperationsInput = {
+    set?: string
+  }
+
+  export type IntFieldUpdateOperationsInput = {
+    set?: number
+    increment?: number
+    decrement?: number
+    multiply?: number
+    divide?: number
+  }
+
+  export type ContentItemUpdateManyWithoutRegionManualNestedInput = {
+    create?: XOR<ContentItemCreateWithoutRegionManualInput, ContentItemUncheckedCreateWithoutRegionManualInput> | ContentItemCreateWithoutRegionManualInput[] | ContentItemUncheckedCreateWithoutRegionManualInput[]
+    connectOrCreate?: ContentItemCreateOrConnectWithoutRegionManualInput | ContentItemCreateOrConnectWithoutRegionManualInput[]
+    upsert?: ContentItemUpsertWithWhereUniqueWithoutRegionManualInput | ContentItemUpsertWithWhereUniqueWithoutRegionManualInput[]
+    createMany?: ContentItemCreateManyRegionManualInputEnvelope
+    set?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    disconnect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    delete?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    connect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    update?: ContentItemUpdateWithWhereUniqueWithoutRegionManualInput | ContentItemUpdateWithWhereUniqueWithoutRegionManualInput[]
+    updateMany?: ContentItemUpdateManyWithWhereWithoutRegionManualInput | ContentItemUpdateManyWithWhereWithoutRegionManualInput[]
+    deleteMany?: ContentItemScalarWhereInput | ContentItemScalarWhereInput[]
+  }
+
+  export type ContentItemUpdateManyWithoutRegionEffectiveNestedInput = {
+    create?: XOR<ContentItemCreateWithoutRegionEffectiveInput, ContentItemUncheckedCreateWithoutRegionEffectiveInput> | ContentItemCreateWithoutRegionEffectiveInput[] | ContentItemUncheckedCreateWithoutRegionEffectiveInput[]
+    connectOrCreate?: ContentItemCreateOrConnectWithoutRegionEffectiveInput | ContentItemCreateOrConnectWithoutRegionEffectiveInput[]
+    upsert?: ContentItemUpsertWithWhereUniqueWithoutRegionEffectiveInput | ContentItemUpsertWithWhereUniqueWithoutRegionEffectiveInput[]
+    createMany?: ContentItemCreateManyRegionEffectiveInputEnvelope
+    set?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    disconnect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    delete?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    connect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    update?: ContentItemUpdateWithWhereUniqueWithoutRegionEffectiveInput | ContentItemUpdateWithWhereUniqueWithoutRegionEffectiveInput[]
+    updateMany?: ContentItemUpdateManyWithWhereWithoutRegionEffectiveInput | ContentItemUpdateManyWithWhereWithoutRegionEffectiveInput[]
+    deleteMany?: ContentItemScalarWhereInput | ContentItemScalarWhereInput[]
+  }
+
+  export type ContentItemUncheckedUpdateManyWithoutRegionManualNestedInput = {
+    create?: XOR<ContentItemCreateWithoutRegionManualInput, ContentItemUncheckedCreateWithoutRegionManualInput> | ContentItemCreateWithoutRegionManualInput[] | ContentItemUncheckedCreateWithoutRegionManualInput[]
+    connectOrCreate?: ContentItemCreateOrConnectWithoutRegionManualInput | ContentItemCreateOrConnectWithoutRegionManualInput[]
+    upsert?: ContentItemUpsertWithWhereUniqueWithoutRegionManualInput | ContentItemUpsertWithWhereUniqueWithoutRegionManualInput[]
+    createMany?: ContentItemCreateManyRegionManualInputEnvelope
+    set?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    disconnect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    delete?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    connect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    update?: ContentItemUpdateWithWhereUniqueWithoutRegionManualInput | ContentItemUpdateWithWhereUniqueWithoutRegionManualInput[]
+    updateMany?: ContentItemUpdateManyWithWhereWithoutRegionManualInput | ContentItemUpdateManyWithWhereWithoutRegionManualInput[]
+    deleteMany?: ContentItemScalarWhereInput | ContentItemScalarWhereInput[]
+  }
+
+  export type ContentItemUncheckedUpdateManyWithoutRegionEffectiveNestedInput = {
+    create?: XOR<ContentItemCreateWithoutRegionEffectiveInput, ContentItemUncheckedCreateWithoutRegionEffectiveInput> | ContentItemCreateWithoutRegionEffectiveInput[] | ContentItemUncheckedCreateWithoutRegionEffectiveInput[]
+    connectOrCreate?: ContentItemCreateOrConnectWithoutRegionEffectiveInput | ContentItemCreateOrConnectWithoutRegionEffectiveInput[]
+    upsert?: ContentItemUpsertWithWhereUniqueWithoutRegionEffectiveInput | ContentItemUpsertWithWhereUniqueWithoutRegionEffectiveInput[]
+    createMany?: ContentItemCreateManyRegionEffectiveInputEnvelope
+    set?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    disconnect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    delete?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    connect?: ContentItemWhereUniqueInput | ContentItemWhereUniqueInput[]
+    update?: ContentItemUpdateWithWhereUniqueWithoutRegionEffectiveInput | ContentItemUpdateWithWhereUniqueWithoutRegionEffectiveInput[]
+    updateMany?: ContentItemUpdateManyWithWhereWithoutRegionEffectiveInput | ContentItemUpdateManyWithWhereWithoutRegionEffectiveInput[]
+    deleteMany?: ContentItemScalarWhereInput | ContentItemScalarWhereInput[]
+  }
+
   export type ContentItemCreateNestedManyWithoutTopicInput = {
     create?: XOR<ContentItemCreateWithoutTopicInput, ContentItemUncheckedCreateWithoutTopicInput> | ContentItemCreateWithoutTopicInput[] | ContentItemUncheckedCreateWithoutTopicInput[]
     connectOrCreate?: ContentItemCreateOrConnectWithoutTopicInput | ContentItemCreateOrConnectWithoutTopicInput[]
@@ -9936,10 +11496,6 @@ export namespace Prisma {
     connect?: TopicTagWhereUniqueInput | TopicTagWhereUniqueInput[]
   }
 
-  export type StringFieldUpdateOperationsInput = {
-    set?: string
-  }
-
   export type NullableStringFieldUpdateOperationsInput = {
     set?: string | null
   }
@@ -10154,6 +11710,18 @@ export namespace Prisma {
     connect?: TopicWhereUniqueInput
   }
 
+  export type RegionCreateNestedOneWithoutManualItemsInput = {
+    create?: XOR<RegionCreateWithoutManualItemsInput, RegionUncheckedCreateWithoutManualItemsInput>
+    connectOrCreate?: RegionCreateOrConnectWithoutManualItemsInput
+    connect?: RegionWhereUniqueInput
+  }
+
+  export type RegionCreateNestedOneWithoutEffectiveItemsInput = {
+    create?: XOR<RegionCreateWithoutEffectiveItemsInput, RegionUncheckedCreateWithoutEffectiveItemsInput>
+    connectOrCreate?: RegionCreateOrConnectWithoutEffectiveItemsInput
+    connect?: RegionWhereUniqueInput
+  }
+
   export type AnswerOptionCreateNestedManyWithoutItemInput = {
     create?: XOR<AnswerOptionCreateWithoutItemInput, AnswerOptionUncheckedCreateWithoutItemInput> | AnswerOptionCreateWithoutItemInput[] | AnswerOptionUncheckedCreateWithoutItemInput[]
     connectOrCreate?: AnswerOptionCreateOrConnectWithoutItemInput | AnswerOptionCreateOrConnectWithoutItemInput[]
@@ -10186,14 +11754,6 @@ export namespace Prisma {
     set?: $Enums.ContentKind
   }
 
-  export type IntFieldUpdateOperationsInput = {
-    set?: number
-    increment?: number
-    decrement?: number
-    multiply?: number
-    divide?: number
-  }
-
   export type EnumPublishStatusFieldUpdateOperationsInput = {
     set?: $Enums.PublishStatus
   }
@@ -10214,6 +11774,26 @@ export namespace Prisma {
     update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutItemsInput, TopicUpdateWithoutItemsInput>, TopicUncheckedUpdateWithoutItemsInput>
   }
 
+  export type RegionUpdateOneWithoutManualItemsNestedInput = {
+    create?: XOR<RegionCreateWithoutManualItemsInput, RegionUncheckedCreateWithoutManualItemsInput>
+    connectOrCreate?: RegionCreateOrConnectWithoutManualItemsInput
+    upsert?: RegionUpsertWithoutManualItemsInput
+    disconnect?: RegionWhereInput | boolean
+    delete?: RegionWhereInput | boolean
+    connect?: RegionWhereUniqueInput
+    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutManualItemsInput, RegionUpdateWithoutManualItemsInput>, RegionUncheckedUpdateWithoutManualItemsInput>
+  }
+
+  export type RegionUpdateOneWithoutEffectiveItemsNestedInput = {
+    create?: XOR<RegionCreateWithoutEffectiveItemsInput, RegionUncheckedCreateWithoutEffectiveItemsInput>
+    connectOrCreate?: RegionCreateOrConnectWithoutEffectiveItemsInput
+    upsert?: RegionUpsertWithoutEffectiveItemsInput
+    disconnect?: RegionWhereInput | boolean
+    delete?: RegionWhereInput | boolean
+    connect?: RegionWhereUniqueInput
+    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutEffectiveItemsInput, RegionUpdateWithoutEffectiveItemsInput>, RegionUncheckedUpdateWithoutEffectiveItemsInput>
+  }
+
   export type AnswerOptionUpdateManyWithoutItemNestedInput = {
     create?: XOR<AnswerOptionCreateWithoutItemInput, AnswerOptionUncheckedCreateWithoutItemInput> | AnswerOptionCreateWithoutItemInput[] | AnswerOptionUncheckedCreateWithoutItemInput[]
     connectOrCreate?: AnswerOptionCreateOrConnectWithoutItemInput | AnswerOptionCreateOrConnectWithoutItemInput[]
@@ -10280,15 +11860,40 @@ export namespace Prisma {
     set?: boolean
   }
 
-  export type ContentItemUpdateOneRequiredWithoutAnswerOptionsNestedInput = {
-    create?: XOR<ContentItemCreateWithoutAnswerOptionsInput, ContentItemUncheckedCreateWithoutAnswerOptionsInput>
-    connectOrCreate?: ContentItemCreateOrConnectWithoutAnswerOptionsInput
-    upsert?: ContentItemUpsertWithoutAnswerOptionsInput
-    connect?: ContentItemWhereUniqueInput
-    update?: XOR<XOR<ContentItemUpdateToOneWithWhereWithoutAnswerOptionsInput, ContentItemUpdateWithoutAnswerOptionsInput>, ContentItemUncheckedUpdateWithoutAnswerOptionsInput>
+  export type ContentItemUpdateOneRequiredWithoutAnswerOptionsNestedInput = {
+    create?: XOR<ContentItemCreateWithoutAnswerOptionsInput, ContentItemUncheckedCreateWithoutAnswerOptionsInput>
+    connectOrCreate?: ContentItemCreateOrConnectWithoutAnswerOptionsInput
+    upsert?: ContentItemUpsertWithoutAnswerOptionsInput
+    connect?: ContentItemWhereUniqueInput
+    update?: XOR<XOR<ContentItemUpdateToOneWithWhereWithoutAnswerOptionsInput, ContentItemUpdateWithoutAnswerOptionsInput>, ContentItemUncheckedUpdateWithoutAnswerOptionsInput>
+  }
+
+  export type NestedStringFilter<$PrismaModel = never> = {
+    equals?: string | StringFieldRefInput<$PrismaModel>
+    in?: string[] | ListStringFieldRefInput<$PrismaModel>
+    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
+    lt?: string | StringFieldRefInput<$PrismaModel>
+    lte?: string | StringFieldRefInput<$PrismaModel>
+    gt?: string | StringFieldRefInput<$PrismaModel>
+    gte?: string | StringFieldRefInput<$PrismaModel>
+    contains?: string | StringFieldRefInput<$PrismaModel>
+    startsWith?: string | StringFieldRefInput<$PrismaModel>
+    endsWith?: string | StringFieldRefInput<$PrismaModel>
+    not?: NestedStringFilter<$PrismaModel> | string
+  }
+
+  export type NestedIntFilter<$PrismaModel = never> = {
+    equals?: number | IntFieldRefInput<$PrismaModel>
+    in?: number[] | ListIntFieldRefInput<$PrismaModel>
+    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
+    lt?: number | IntFieldRefInput<$PrismaModel>
+    lte?: number | IntFieldRefInput<$PrismaModel>
+    gt?: number | IntFieldRefInput<$PrismaModel>
+    gte?: number | IntFieldRefInput<$PrismaModel>
+    not?: NestedIntFilter<$PrismaModel> | number
   }
 
-  export type NestedStringFilter<$PrismaModel = never> = {
+  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
     equals?: string | StringFieldRefInput<$PrismaModel>
     in?: string[] | ListStringFieldRefInput<$PrismaModel>
     notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
@@ -10299,7 +11904,37 @@ export namespace Prisma {
     contains?: string | StringFieldRefInput<$PrismaModel>
     startsWith?: string | StringFieldRefInput<$PrismaModel>
     endsWith?: string | StringFieldRefInput<$PrismaModel>
-    not?: NestedStringFilter<$PrismaModel> | string
+    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
+    _count?: NestedIntFilter<$PrismaModel>
+    _min?: NestedStringFilter<$PrismaModel>
+    _max?: NestedStringFilter<$PrismaModel>
+  }
+
+  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
+    equals?: number | IntFieldRefInput<$PrismaModel>
+    in?: number[] | ListIntFieldRefInput<$PrismaModel>
+    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
+    lt?: number | IntFieldRefInput<$PrismaModel>
+    lte?: number | IntFieldRefInput<$PrismaModel>
+    gt?: number | IntFieldRefInput<$PrismaModel>
+    gte?: number | IntFieldRefInput<$PrismaModel>
+    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
+    _count?: NestedIntFilter<$PrismaModel>
+    _avg?: NestedFloatFilter<$PrismaModel>
+    _sum?: NestedIntFilter<$PrismaModel>
+    _min?: NestedIntFilter<$PrismaModel>
+    _max?: NestedIntFilter<$PrismaModel>
+  }
+
+  export type NestedFloatFilter<$PrismaModel = never> = {
+    equals?: number | FloatFieldRefInput<$PrismaModel>
+    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
+    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
+    lt?: number | FloatFieldRefInput<$PrismaModel>
+    lte?: number | FloatFieldRefInput<$PrismaModel>
+    gt?: number | FloatFieldRefInput<$PrismaModel>
+    gte?: number | FloatFieldRefInput<$PrismaModel>
+    not?: NestedFloatFilter<$PrismaModel> | number
   }
 
   export type NestedStringNullableFilter<$PrismaModel = never> = {
@@ -10334,34 +11969,6 @@ export namespace Prisma {
     not?: NestedDateTimeFilter<$PrismaModel> | Date | string
   }
 
-  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
-    equals?: string | StringFieldRefInput<$PrismaModel>
-    in?: string[] | ListStringFieldRefInput<$PrismaModel>
-    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
-    lt?: string | StringFieldRefInput<$PrismaModel>
-    lte?: string | StringFieldRefInput<$PrismaModel>
-    gt?: string | StringFieldRefInput<$PrismaModel>
-    gte?: string | StringFieldRefInput<$PrismaModel>
-    contains?: string | StringFieldRefInput<$PrismaModel>
-    startsWith?: string | StringFieldRefInput<$PrismaModel>
-    endsWith?: string | StringFieldRefInput<$PrismaModel>
-    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
-    _count?: NestedIntFilter<$PrismaModel>
-    _min?: NestedStringFilter<$PrismaModel>
-    _max?: NestedStringFilter<$PrismaModel>
-  }
-
-  export type NestedIntFilter<$PrismaModel = never> = {
-    equals?: number | IntFieldRefInput<$PrismaModel>
-    in?: number[] | ListIntFieldRefInput<$PrismaModel>
-    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
-    lt?: number | IntFieldRefInput<$PrismaModel>
-    lte?: number | IntFieldRefInput<$PrismaModel>
-    gt?: number | IntFieldRefInput<$PrismaModel>
-    gte?: number | IntFieldRefInput<$PrismaModel>
-    not?: NestedIntFilter<$PrismaModel> | number
-  }
-
   export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
     equals?: string | StringFieldRefInput<$PrismaModel> | null
     in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
@@ -10456,33 +12063,6 @@ export namespace Prisma {
     _max?: NestedEnumContentKindFilter<$PrismaModel>
   }
 
-  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
-    equals?: number | IntFieldRefInput<$PrismaModel>
-    in?: number[] | ListIntFieldRefInput<$PrismaModel>
-    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
-    lt?: number | IntFieldRefInput<$PrismaModel>
-    lte?: number | IntFieldRefInput<$PrismaModel>
-    gt?: number | IntFieldRefInput<$PrismaModel>
-    gte?: number | IntFieldRefInput<$PrismaModel>
-    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
-    _count?: NestedIntFilter<$PrismaModel>
-    _avg?: NestedFloatFilter<$PrismaModel>
-    _sum?: NestedIntFilter<$PrismaModel>
-    _min?: NestedIntFilter<$PrismaModel>
-    _max?: NestedIntFilter<$PrismaModel>
-  }
-
-  export type NestedFloatFilter<$PrismaModel = never> = {
-    equals?: number | FloatFieldRefInput<$PrismaModel>
-    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
-    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
-    lt?: number | FloatFieldRefInput<$PrismaModel>
-    lte?: number | FloatFieldRefInput<$PrismaModel>
-    gt?: number | FloatFieldRefInput<$PrismaModel>
-    gte?: number | FloatFieldRefInput<$PrismaModel>
-    not?: NestedFloatFilter<$PrismaModel> | number
-  }
-
   export type NestedEnumPublishStatusWithAggregatesFilter<$PrismaModel = never> = {
     equals?: $Enums.PublishStatus | EnumPublishStatusFieldRefInput<$PrismaModel>
     in?: $Enums.PublishStatus[] | ListEnumPublishStatusFieldRefInput<$PrismaModel>
@@ -10545,12 +12125,186 @@ export namespace Prisma {
     not?: NestedBoolFilter<$PrismaModel> | boolean
   }
 
-  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
-    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
-    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
-    _count?: NestedIntFilter<$PrismaModel>
-    _min?: NestedBoolFilter<$PrismaModel>
-    _max?: NestedBoolFilter<$PrismaModel>
+  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
+    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
+    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
+    _count?: NestedIntFilter<$PrismaModel>
+    _min?: NestedBoolFilter<$PrismaModel>
+    _max?: NestedBoolFilter<$PrismaModel>
+  }
+
+  export type ContentItemCreateWithoutRegionManualInput = {
+    id?: string
+    kind: $Enums.ContentKind
+    locale?: $Enums.Locale
+    title?: string | null
+    text: string
+    richText?: string | null
+    sortOrder?: number
+    status?: $Enums.PublishStatus
+    authorName?: string | null
+    createdAt?: Date | string
+    updatedAt?: Date | string
+    publishAt?: Date | string | null
+    expireAt?: Date | string | null
+    regionMode?: $Enums.RegionMode
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+    topic: TopicCreateNestedOneWithoutItemsInput
+    regionEffective?: RegionCreateNestedOneWithoutEffectiveItemsInput
+    answerOptions?: AnswerOptionCreateNestedManyWithoutItemInput
+    tags?: ItemTagCreateNestedManyWithoutItemInput
+  }
+
+  export type ContentItemUncheckedCreateWithoutRegionManualInput = {
+    id?: string
+    kind: $Enums.ContentKind
+    topicId: string
+    locale?: $Enums.Locale
+    title?: string | null
+    text: string
+    richText?: string | null
+    sortOrder?: number
+    status?: $Enums.PublishStatus
+    authorName?: string | null
+    createdAt?: Date | string
+    updatedAt?: Date | string
+    publishAt?: Date | string | null
+    expireAt?: Date | string | null
+    regionMode?: $Enums.RegionMode
+    regionEffectiveId?: string | null
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+    answerOptions?: AnswerOptionUncheckedCreateNestedManyWithoutItemInput
+    tags?: ItemTagUncheckedCreateNestedManyWithoutItemInput
+  }
+
+  export type ContentItemCreateOrConnectWithoutRegionManualInput = {
+    where: ContentItemWhereUniqueInput
+    create: XOR<ContentItemCreateWithoutRegionManualInput, ContentItemUncheckedCreateWithoutRegionManualInput>
+  }
+
+  export type ContentItemCreateManyRegionManualInputEnvelope = {
+    data: ContentItemCreateManyRegionManualInput | ContentItemCreateManyRegionManualInput[]
+    skipDuplicates?: boolean
+  }
+
+  export type ContentItemCreateWithoutRegionEffectiveInput = {
+    id?: string
+    kind: $Enums.ContentKind
+    locale?: $Enums.Locale
+    title?: string | null
+    text: string
+    richText?: string | null
+    sortOrder?: number
+    status?: $Enums.PublishStatus
+    authorName?: string | null
+    createdAt?: Date | string
+    updatedAt?: Date | string
+    publishAt?: Date | string | null
+    expireAt?: Date | string | null
+    regionMode?: $Enums.RegionMode
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+    topic: TopicCreateNestedOneWithoutItemsInput
+    regionManual?: RegionCreateNestedOneWithoutManualItemsInput
+    answerOptions?: AnswerOptionCreateNestedManyWithoutItemInput
+    tags?: ItemTagCreateNestedManyWithoutItemInput
+  }
+
+  export type ContentItemUncheckedCreateWithoutRegionEffectiveInput = {
+    id?: string
+    kind: $Enums.ContentKind
+    topicId: string
+    locale?: $Enums.Locale
+    title?: string | null
+    text: string
+    richText?: string | null
+    sortOrder?: number
+    status?: $Enums.PublishStatus
+    authorName?: string | null
+    createdAt?: Date | string
+    updatedAt?: Date | string
+    publishAt?: Date | string | null
+    expireAt?: Date | string | null
+    regionMode?: $Enums.RegionMode
+    regionManualId?: string | null
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+    answerOptions?: AnswerOptionUncheckedCreateNestedManyWithoutItemInput
+    tags?: ItemTagUncheckedCreateNestedManyWithoutItemInput
+  }
+
+  export type ContentItemCreateOrConnectWithoutRegionEffectiveInput = {
+    where: ContentItemWhereUniqueInput
+    create: XOR<ContentItemCreateWithoutRegionEffectiveInput, ContentItemUncheckedCreateWithoutRegionEffectiveInput>
+  }
+
+  export type ContentItemCreateManyRegionEffectiveInputEnvelope = {
+    data: ContentItemCreateManyRegionEffectiveInput | ContentItemCreateManyRegionEffectiveInput[]
+    skipDuplicates?: boolean
+  }
+
+  export type ContentItemUpsertWithWhereUniqueWithoutRegionManualInput = {
+    where: ContentItemWhereUniqueInput
+    update: XOR<ContentItemUpdateWithoutRegionManualInput, ContentItemUncheckedUpdateWithoutRegionManualInput>
+    create: XOR<ContentItemCreateWithoutRegionManualInput, ContentItemUncheckedCreateWithoutRegionManualInput>
+  }
+
+  export type ContentItemUpdateWithWhereUniqueWithoutRegionManualInput = {
+    where: ContentItemWhereUniqueInput
+    data: XOR<ContentItemUpdateWithoutRegionManualInput, ContentItemUncheckedUpdateWithoutRegionManualInput>
+  }
+
+  export type ContentItemUpdateManyWithWhereWithoutRegionManualInput = {
+    where: ContentItemScalarWhereInput
+    data: XOR<ContentItemUpdateManyMutationInput, ContentItemUncheckedUpdateManyWithoutRegionManualInput>
+  }
+
+  export type ContentItemScalarWhereInput = {
+    AND?: ContentItemScalarWhereInput | ContentItemScalarWhereInput[]
+    OR?: ContentItemScalarWhereInput[]
+    NOT?: ContentItemScalarWhereInput | ContentItemScalarWhereInput[]
+    id?: StringFilter<"ContentItem"> | string
+    kind?: EnumContentKindFilter<"ContentItem"> | $Enums.ContentKind
+    topicId?: StringFilter<"ContentItem"> | string
+    locale?: EnumLocaleFilter<"ContentItem"> | $Enums.Locale
+    title?: StringNullableFilter<"ContentItem"> | string | null
+    text?: StringFilter<"ContentItem"> | string
+    richText?: StringNullableFilter<"ContentItem"> | string | null
+    sortOrder?: IntFilter<"ContentItem"> | number
+    status?: EnumPublishStatusFilter<"ContentItem"> | $Enums.PublishStatus
+    authorName?: StringNullableFilter<"ContentItem"> | string | null
+    createdAt?: DateTimeFilter<"ContentItem"> | Date | string
+    updatedAt?: DateTimeFilter<"ContentItem"> | Date | string
+    publishAt?: DateTimeNullableFilter<"ContentItem"> | Date | string | null
+    expireAt?: DateTimeNullableFilter<"ContentItem"> | Date | string | null
+    regionMode?: EnumRegionModeFilter<"ContentItem"> | $Enums.RegionMode
+    regionManualId?: StringNullableFilter<"ContentItem"> | string | null
+    regionEffectiveId?: StringNullableFilter<"ContentItem"> | string | null
+    regionAuto?: JsonNullableFilter<"ContentItem">
+    validation?: JsonNullableFilter<"ContentItem">
+    meta?: JsonNullableFilter<"ContentItem">
+  }
+
+  export type ContentItemUpsertWithWhereUniqueWithoutRegionEffectiveInput = {
+    where: ContentItemWhereUniqueInput
+    update: XOR<ContentItemUpdateWithoutRegionEffectiveInput, ContentItemUncheckedUpdateWithoutRegionEffectiveInput>
+    create: XOR<ContentItemCreateWithoutRegionEffectiveInput, ContentItemUncheckedCreateWithoutRegionEffectiveInput>
+  }
+
+  export type ContentItemUpdateWithWhereUniqueWithoutRegionEffectiveInput = {
+    where: ContentItemWhereUniqueInput
+    data: XOR<ContentItemUpdateWithoutRegionEffectiveInput, ContentItemUncheckedUpdateWithoutRegionEffectiveInput>
+  }
+
+  export type ContentItemUpdateManyWithWhereWithoutRegionEffectiveInput = {
+    where: ContentItemScalarWhereInput
+    data: XOR<ContentItemUpdateManyMutationInput, ContentItemUncheckedUpdateManyWithoutRegionEffectiveInput>
   }
 
   export type ContentItemCreateWithoutTopicInput = {
@@ -10568,11 +12322,11 @@ export namespace Prisma {
     publishAt?: Date | string | null
     expireAt?: Date | string | null
     regionMode?: $Enums.RegionMode
-    regionManualId?: string | null
-    regionEffectiveId?: string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
+    regionManual?: RegionCreateNestedOneWithoutManualItemsInput
+    regionEffective?: RegionCreateNestedOneWithoutEffectiveItemsInput
     answerOptions?: AnswerOptionCreateNestedManyWithoutItemInput
     tags?: ItemTagCreateNestedManyWithoutItemInput
   }
@@ -10647,32 +12401,6 @@ export namespace Prisma {
     data: XOR<ContentItemUpdateManyMutationInput, ContentItemUncheckedUpdateManyWithoutTopicInput>
   }
 
-  export type ContentItemScalarWhereInput = {
-    AND?: ContentItemScalarWhereInput | ContentItemScalarWhereInput[]
-    OR?: ContentItemScalarWhereInput[]
-    NOT?: ContentItemScalarWhereInput | ContentItemScalarWhereInput[]
-    id?: StringFilter<"ContentItem"> | string
-    kind?: EnumContentKindFilter<"ContentItem"> | $Enums.ContentKind
-    topicId?: StringFilter<"ContentItem"> | string
-    locale?: EnumLocaleFilter<"ContentItem"> | $Enums.Locale
-    title?: StringNullableFilter<"ContentItem"> | string | null
-    text?: StringFilter<"ContentItem"> | string
-    richText?: StringNullableFilter<"ContentItem"> | string | null
-    sortOrder?: IntFilter<"ContentItem"> | number
-    status?: EnumPublishStatusFilter<"ContentItem"> | $Enums.PublishStatus
-    authorName?: StringNullableFilter<"ContentItem"> | string | null
-    createdAt?: DateTimeFilter<"ContentItem"> | Date | string
-    updatedAt?: DateTimeFilter<"ContentItem"> | Date | string
-    publishAt?: DateTimeNullableFilter<"ContentItem"> | Date | string | null
-    expireAt?: DateTimeNullableFilter<"ContentItem"> | Date | string | null
-    regionMode?: EnumRegionModeFilter<"ContentItem"> | $Enums.RegionMode
-    regionManualId?: StringNullableFilter<"ContentItem"> | string | null
-    regionEffectiveId?: StringNullableFilter<"ContentItem"> | string | null
-    regionAuto?: JsonNullableFilter<"ContentItem">
-    validation?: JsonNullableFilter<"ContentItem">
-    meta?: JsonNullableFilter<"ContentItem">
-  }
-
   export type TopicTagUpsertWithWhereUniqueWithoutTopicInput = {
     where: TopicTagWhereUniqueInput
     update: XOR<TopicTagUpdateWithoutTopicInput, TopicTagUncheckedUpdateWithoutTopicInput>
@@ -10898,12 +12626,12 @@ export namespace Prisma {
     publishAt?: Date | string | null
     expireAt?: Date | string | null
     regionMode?: $Enums.RegionMode
-    regionManualId?: string | null
-    regionEffectiveId?: string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
     topic: TopicCreateNestedOneWithoutItemsInput
+    regionManual?: RegionCreateNestedOneWithoutManualItemsInput
+    regionEffective?: RegionCreateNestedOneWithoutEffectiveItemsInput
     answerOptions?: AnswerOptionCreateNestedManyWithoutItemInput
   }
 
@@ -10981,12 +12709,12 @@ export namespace Prisma {
     publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
-    regionManualId?: NullableStringFieldUpdateOperationsInput | string | null
-    regionEffectiveId?: NullableStringFieldUpdateOperationsInput | string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
     topic?: TopicUpdateOneRequiredWithoutItemsNestedInput
+    regionManual?: RegionUpdateOneWithoutManualItemsNestedInput
+    regionEffective?: RegionUpdateOneWithoutEffectiveItemsNestedInput
     answerOptions?: AnswerOptionUpdateManyWithoutItemNestedInput
   }
 
@@ -11066,6 +12794,48 @@ export namespace Prisma {
     create: XOR<TopicCreateWithoutItemsInput, TopicUncheckedCreateWithoutItemsInput>
   }
 
+  export type RegionCreateWithoutManualItemsInput = {
+    id?: string
+    code: string
+    name: string
+    level: number
+    effectiveItems?: ContentItemCreateNestedManyWithoutRegionEffectiveInput
+  }
+
+  export type RegionUncheckedCreateWithoutManualItemsInput = {
+    id?: string
+    code: string
+    name: string
+    level: number
+    effectiveItems?: ContentItemUncheckedCreateNestedManyWithoutRegionEffectiveInput
+  }
+
+  export type RegionCreateOrConnectWithoutManualItemsInput = {
+    where: RegionWhereUniqueInput
+    create: XOR<RegionCreateWithoutManualItemsInput, RegionUncheckedCreateWithoutManualItemsInput>
+  }
+
+  export type RegionCreateWithoutEffectiveItemsInput = {
+    id?: string
+    code: string
+    name: string
+    level: number
+    manualItems?: ContentItemCreateNestedManyWithoutRegionManualInput
+  }
+
+  export type RegionUncheckedCreateWithoutEffectiveItemsInput = {
+    id?: string
+    code: string
+    name: string
+    level: number
+    manualItems?: ContentItemUncheckedCreateNestedManyWithoutRegionManualInput
+  }
+
+  export type RegionCreateOrConnectWithoutEffectiveItemsInput = {
+    where: RegionWhereUniqueInput
+    create: XOR<RegionCreateWithoutEffectiveItemsInput, RegionUncheckedCreateWithoutEffectiveItemsInput>
+  }
+
   export type AnswerOptionCreateWithoutItemInput = {
     id?: string
     label: string
@@ -11147,6 +12917,60 @@ export namespace Prisma {
     tags?: TopicTagUncheckedUpdateManyWithoutTopicNestedInput
   }
 
+  export type RegionUpsertWithoutManualItemsInput = {
+    update: XOR<RegionUpdateWithoutManualItemsInput, RegionUncheckedUpdateWithoutManualItemsInput>
+    create: XOR<RegionCreateWithoutManualItemsInput, RegionUncheckedCreateWithoutManualItemsInput>
+    where?: RegionWhereInput
+  }
+
+  export type RegionUpdateToOneWithWhereWithoutManualItemsInput = {
+    where?: RegionWhereInput
+    data: XOR<RegionUpdateWithoutManualItemsInput, RegionUncheckedUpdateWithoutManualItemsInput>
+  }
+
+  export type RegionUpdateWithoutManualItemsInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    code?: StringFieldUpdateOperationsInput | string
+    name?: StringFieldUpdateOperationsInput | string
+    level?: IntFieldUpdateOperationsInput | number
+    effectiveItems?: ContentItemUpdateManyWithoutRegionEffectiveNestedInput
+  }
+
+  export type RegionUncheckedUpdateWithoutManualItemsInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    code?: StringFieldUpdateOperationsInput | string
+    name?: StringFieldUpdateOperationsInput | string
+    level?: IntFieldUpdateOperationsInput | number
+    effectiveItems?: ContentItemUncheckedUpdateManyWithoutRegionEffectiveNestedInput
+  }
+
+  export type RegionUpsertWithoutEffectiveItemsInput = {
+    update: XOR<RegionUpdateWithoutEffectiveItemsInput, RegionUncheckedUpdateWithoutEffectiveItemsInput>
+    create: XOR<RegionCreateWithoutEffectiveItemsInput, RegionUncheckedCreateWithoutEffectiveItemsInput>
+    where?: RegionWhereInput
+  }
+
+  export type RegionUpdateToOneWithWhereWithoutEffectiveItemsInput = {
+    where?: RegionWhereInput
+    data: XOR<RegionUpdateWithoutEffectiveItemsInput, RegionUncheckedUpdateWithoutEffectiveItemsInput>
+  }
+
+  export type RegionUpdateWithoutEffectiveItemsInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    code?: StringFieldUpdateOperationsInput | string
+    name?: StringFieldUpdateOperationsInput | string
+    level?: IntFieldUpdateOperationsInput | number
+    manualItems?: ContentItemUpdateManyWithoutRegionManualNestedInput
+  }
+
+  export type RegionUncheckedUpdateWithoutEffectiveItemsInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    code?: StringFieldUpdateOperationsInput | string
+    name?: StringFieldUpdateOperationsInput | string
+    level?: IntFieldUpdateOperationsInput | number
+    manualItems?: ContentItemUncheckedUpdateManyWithoutRegionManualNestedInput
+  }
+
   export type AnswerOptionUpsertWithWhereUniqueWithoutItemInput = {
     where: AnswerOptionWhereUniqueInput
     update: XOR<AnswerOptionUpdateWithoutItemInput, AnswerOptionUncheckedUpdateWithoutItemInput>
@@ -11207,12 +13031,12 @@ export namespace Prisma {
     publishAt?: Date | string | null
     expireAt?: Date | string | null
     regionMode?: $Enums.RegionMode
-    regionManualId?: string | null
-    regionEffectiveId?: string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
     topic: TopicCreateNestedOneWithoutItemsInput
+    regionManual?: RegionCreateNestedOneWithoutManualItemsInput
+    regionEffective?: RegionCreateNestedOneWithoutEffectiveItemsInput
     tags?: ItemTagCreateNestedManyWithoutItemInput
   }
 
@@ -11271,12 +13095,12 @@ export namespace Prisma {
     publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
-    regionManualId?: NullableStringFieldUpdateOperationsInput | string | null
-    regionEffectiveId?: NullableStringFieldUpdateOperationsInput | string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
     topic?: TopicUpdateOneRequiredWithoutItemsNestedInput
+    regionManual?: RegionUpdateOneWithoutManualItemsNestedInput
+    regionEffective?: RegionUpdateOneWithoutEffectiveItemsNestedInput
     tags?: ItemTagUpdateManyWithoutItemNestedInput
   }
 
@@ -11304,6 +13128,190 @@ export namespace Prisma {
     tags?: ItemTagUncheckedUpdateManyWithoutItemNestedInput
   }
 
+  export type ContentItemCreateManyRegionManualInput = {
+    id?: string
+    kind: $Enums.ContentKind
+    topicId: string
+    locale?: $Enums.Locale
+    title?: string | null
+    text: string
+    richText?: string | null
+    sortOrder?: number
+    status?: $Enums.PublishStatus
+    authorName?: string | null
+    createdAt?: Date | string
+    updatedAt?: Date | string
+    publishAt?: Date | string | null
+    expireAt?: Date | string | null
+    regionMode?: $Enums.RegionMode
+    regionEffectiveId?: string | null
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+  }
+
+  export type ContentItemCreateManyRegionEffectiveInput = {
+    id?: string
+    kind: $Enums.ContentKind
+    topicId: string
+    locale?: $Enums.Locale
+    title?: string | null
+    text: string
+    richText?: string | null
+    sortOrder?: number
+    status?: $Enums.PublishStatus
+    authorName?: string | null
+    createdAt?: Date | string
+    updatedAt?: Date | string
+    publishAt?: Date | string | null
+    expireAt?: Date | string | null
+    regionMode?: $Enums.RegionMode
+    regionManualId?: string | null
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+  }
+
+  export type ContentItemUpdateWithoutRegionManualInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    kind?: EnumContentKindFieldUpdateOperationsInput | $Enums.ContentKind
+    locale?: EnumLocaleFieldUpdateOperationsInput | $Enums.Locale
+    title?: NullableStringFieldUpdateOperationsInput | string | null
+    text?: StringFieldUpdateOperationsInput | string
+    richText?: NullableStringFieldUpdateOperationsInput | string | null
+    sortOrder?: IntFieldUpdateOperationsInput | number
+    status?: EnumPublishStatusFieldUpdateOperationsInput | $Enums.PublishStatus
+    authorName?: NullableStringFieldUpdateOperationsInput | string | null
+    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+    topic?: TopicUpdateOneRequiredWithoutItemsNestedInput
+    regionEffective?: RegionUpdateOneWithoutEffectiveItemsNestedInput
+    answerOptions?: AnswerOptionUpdateManyWithoutItemNestedInput
+    tags?: ItemTagUpdateManyWithoutItemNestedInput
+  }
+
+  export type ContentItemUncheckedUpdateWithoutRegionManualInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    kind?: EnumContentKindFieldUpdateOperationsInput | $Enums.ContentKind
+    topicId?: StringFieldUpdateOperationsInput | string
+    locale?: EnumLocaleFieldUpdateOperationsInput | $Enums.Locale
+    title?: NullableStringFieldUpdateOperationsInput | string | null
+    text?: StringFieldUpdateOperationsInput | string
+    richText?: NullableStringFieldUpdateOperationsInput | string | null
+    sortOrder?: IntFieldUpdateOperationsInput | number
+    status?: EnumPublishStatusFieldUpdateOperationsInput | $Enums.PublishStatus
+    authorName?: NullableStringFieldUpdateOperationsInput | string | null
+    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
+    regionEffectiveId?: NullableStringFieldUpdateOperationsInput | string | null
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+    answerOptions?: AnswerOptionUncheckedUpdateManyWithoutItemNestedInput
+    tags?: ItemTagUncheckedUpdateManyWithoutItemNestedInput
+  }
+
+  export type ContentItemUncheckedUpdateManyWithoutRegionManualInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    kind?: EnumContentKindFieldUpdateOperationsInput | $Enums.ContentKind
+    topicId?: StringFieldUpdateOperationsInput | string
+    locale?: EnumLocaleFieldUpdateOperationsInput | $Enums.Locale
+    title?: NullableStringFieldUpdateOperationsInput | string | null
+    text?: StringFieldUpdateOperationsInput | string
+    richText?: NullableStringFieldUpdateOperationsInput | string | null
+    sortOrder?: IntFieldUpdateOperationsInput | number
+    status?: EnumPublishStatusFieldUpdateOperationsInput | $Enums.PublishStatus
+    authorName?: NullableStringFieldUpdateOperationsInput | string | null
+    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
+    regionEffectiveId?: NullableStringFieldUpdateOperationsInput | string | null
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+  }
+
+  export type ContentItemUpdateWithoutRegionEffectiveInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    kind?: EnumContentKindFieldUpdateOperationsInput | $Enums.ContentKind
+    locale?: EnumLocaleFieldUpdateOperationsInput | $Enums.Locale
+    title?: NullableStringFieldUpdateOperationsInput | string | null
+    text?: StringFieldUpdateOperationsInput | string
+    richText?: NullableStringFieldUpdateOperationsInput | string | null
+    sortOrder?: IntFieldUpdateOperationsInput | number
+    status?: EnumPublishStatusFieldUpdateOperationsInput | $Enums.PublishStatus
+    authorName?: NullableStringFieldUpdateOperationsInput | string | null
+    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+    topic?: TopicUpdateOneRequiredWithoutItemsNestedInput
+    regionManual?: RegionUpdateOneWithoutManualItemsNestedInput
+    answerOptions?: AnswerOptionUpdateManyWithoutItemNestedInput
+    tags?: ItemTagUpdateManyWithoutItemNestedInput
+  }
+
+  export type ContentItemUncheckedUpdateWithoutRegionEffectiveInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    kind?: EnumContentKindFieldUpdateOperationsInput | $Enums.ContentKind
+    topicId?: StringFieldUpdateOperationsInput | string
+    locale?: EnumLocaleFieldUpdateOperationsInput | $Enums.Locale
+    title?: NullableStringFieldUpdateOperationsInput | string | null
+    text?: StringFieldUpdateOperationsInput | string
+    richText?: NullableStringFieldUpdateOperationsInput | string | null
+    sortOrder?: IntFieldUpdateOperationsInput | number
+    status?: EnumPublishStatusFieldUpdateOperationsInput | $Enums.PublishStatus
+    authorName?: NullableStringFieldUpdateOperationsInput | string | null
+    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
+    regionManualId?: NullableStringFieldUpdateOperationsInput | string | null
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+    answerOptions?: AnswerOptionUncheckedUpdateManyWithoutItemNestedInput
+    tags?: ItemTagUncheckedUpdateManyWithoutItemNestedInput
+  }
+
+  export type ContentItemUncheckedUpdateManyWithoutRegionEffectiveInput = {
+    id?: StringFieldUpdateOperationsInput | string
+    kind?: EnumContentKindFieldUpdateOperationsInput | $Enums.ContentKind
+    topicId?: StringFieldUpdateOperationsInput | string
+    locale?: EnumLocaleFieldUpdateOperationsInput | $Enums.Locale
+    title?: NullableStringFieldUpdateOperationsInput | string | null
+    text?: StringFieldUpdateOperationsInput | string
+    richText?: NullableStringFieldUpdateOperationsInput | string | null
+    sortOrder?: IntFieldUpdateOperationsInput | number
+    status?: EnumPublishStatusFieldUpdateOperationsInput | $Enums.PublishStatus
+    authorName?: NullableStringFieldUpdateOperationsInput | string | null
+    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
+    publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
+    regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
+    regionManualId?: NullableStringFieldUpdateOperationsInput | string | null
+    regionAuto?: NullableJsonNullValueInput | InputJsonValue
+    validation?: NullableJsonNullValueInput | InputJsonValue
+    meta?: NullableJsonNullValueInput | InputJsonValue
+  }
+
   export type ContentItemCreateManyTopicInput = {
     id?: string
     kind: $Enums.ContentKind
@@ -11346,11 +13354,11 @@ export namespace Prisma {
     publishAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
     regionMode?: EnumRegionModeFieldUpdateOperationsInput | $Enums.RegionMode
-    regionManualId?: NullableStringFieldUpdateOperationsInput | string | null
-    regionEffectiveId?: NullableStringFieldUpdateOperationsInput | string | null
     regionAuto?: NullableJsonNullValueInput | InputJsonValue
     validation?: NullableJsonNullValueInput | InputJsonValue
     meta?: NullableJsonNullValueInput | InputJsonValue
+    regionManual?: RegionUpdateOneWithoutManualItemsNestedInput
+    regionEffective?: RegionUpdateOneWithoutEffectiveItemsNestedInput
     answerOptions?: AnswerOptionUpdateManyWithoutItemNestedInput
     tags?: ItemTagUpdateManyWithoutItemNestedInput
   }
diff --git a/apps/web/src/db/web/index.js b/apps/web/src/db/web/index.js
index 9dfc67df..09398106 100644
--- a/apps/web/src/db/web/index.js
+++ b/apps/web/src/db/web/index.js
@@ -93,6 +93,13 @@ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
   Serializable: 'Serializable'
 });
 
+exports.Prisma.RegionScalarFieldEnum = {
+  id: 'id',
+  code: 'code',
+  name: 'name',
+  level: 'level'
+};
+
 exports.Prisma.TopicScalarFieldEnum = {
   id: 'id',
   slug: 'slug',
@@ -213,6 +220,7 @@ exports.Locale = exports.$Enums.Locale = {
 };
 
 exports.Prisma.ModelName = {
+  Region: 'Region',
   Topic: 'Topic',
   Tag: 'Tag',
   TopicTag: 'TopicTag',
@@ -267,8 +275,8 @@ const config = {
       }
     }
   },
-  "inlineSchema": "// prisma/web/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../apps/web/src/db/web\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"WEB_POSTGRES_URL\") // ggf. an deine ENV anpassen\n}\n\n//\n// ---------- ENUMS ----------\nenum ContentKind {\n  SWIPE\n  EVENT\n  SUNDAY_POLL\n}\n\nenum PublishStatus {\n  draft\n  review\n  published\n  archived\n}\n\nenum RegionMode {\n  AUTO\n  MANUAL\n}\n\nenum Locale {\n  de\n  en\n  fr\n  it\n  es\n  pl\n  uk\n  ru\n  tr\n  hi\n  zh\n  ar\n}\n\n//\n// ---------- CONTENT / TOPIC / TAG ----------\nmodel Topic {\n  id          String   @id @default(cuid())\n  slug        String   @unique\n  title       String\n  description String?\n  locale      Locale   @default(de)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  items ContentItem[]\n  tags  TopicTag[]\n\n  @@index([locale])\n  @@index([createdAt])\n}\n\nmodel Tag {\n  id     String     @id @default(cuid())\n  slug   String     @unique\n  label  String\n  topics TopicTag[]\n  items  ItemTag[]\n}\n\nmodel TopicTag {\n  id      String @id @default(cuid())\n  topicId String\n  tagId   String\n\n  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([topicId, tagId])\n  @@index([topicId])\n  @@index([tagId])\n}\n\nmodel ItemTag {\n  id     String @id @default(cuid())\n  itemId String\n  tagId  String\n\n  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([itemId, tagId])\n  @@index([itemId])\n  @@index([tagId])\n}\n\nmodel ContentItem {\n  id   String      @id @default(cuid())\n  kind ContentKind\n\n  topicId String\n  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  locale    Locale  @default(de)\n  title     String?\n  text      String\n  richText  String?\n  sortOrder Int     @default(0) @map(\"order\") // statt \"order\"\n\n  status     PublishStatus @default(draft)\n  authorName String?\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  publishAt DateTime?\n  expireAt  DateTime?\n\n  regionMode        RegionMode @default(AUTO)\n  regionManualId    String?\n  regionEffectiveId String?\n  regionAuto        Json?\n\n  validation Json?\n  meta       Json?\n\n  answerOptions AnswerOption[]\n  tags          ItemTag[]\n\n  @@index([kind, status, locale])\n  @@index([publishAt])\n  @@index([topicId])\n  @@index([createdAt])\n}\n\nmodel AnswerOption {\n  id        String      @id @default(cuid())\n  itemId    String\n  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  label     String\n  value     String\n  sortOrder Int         @default(0) @map(\"order\")\n  exclusive Boolean     @default(false)\n  meta      Json?\n\n  @@unique([itemId, sortOrder])\n  @@unique([itemId, value])\n}\n",
-  "inlineSchemaHash": "01a7d69ab5c4fe913d0d7565ffc54b2d48b631bfa3c7755714e7f6a7a422d74e",
+  "inlineSchema": "// prisma/web/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../apps/web/src/db/web\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"WEB_POSTGRES_URL\") // ggf. ENV anpassen\n}\n\n//\n// ---------- ENUMS ----------\nenum ContentKind {\n  SWIPE\n  EVENT\n  SUNDAY_POLL\n}\n\nenum PublishStatus {\n  draft\n  review\n  published\n  archived\n}\n\nenum RegionMode {\n  AUTO\n  MANUAL\n}\n\nenum Locale {\n  de\n  en\n  fr\n  it\n  es\n  pl\n  uk\n  ru\n  tr\n  hi\n  zh\n  ar\n}\n\n//\n// ---------- REGION ----------\nmodel Region {\n  id    String @id @default(cuid())\n  code  String @unique\n  name  String\n  level Int\n\n  // Back-Relations zu ContentItem (klar benannte Relationen!)\n  manualItems    ContentItem[] @relation(\"ContentItemRegionManual\")\n  effectiveItems ContentItem[] @relation(\"ContentItemRegionEffective\")\n\n  @@index([code])\n}\n\n//\n// ---------- CONTENT / TOPIC / TAG ----------\nmodel Topic {\n  id          String   @id @default(cuid())\n  slug        String   @unique\n  title       String\n  description String?\n  locale      Locale   @default(de)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  items ContentItem[]\n  tags  TopicTag[]\n\n  @@index([locale])\n  @@index([createdAt])\n}\n\nmodel Tag {\n  id     String     @id @default(cuid())\n  slug   String     @unique\n  label  String\n  topics TopicTag[]\n  items  ItemTag[]\n}\n\nmodel TopicTag {\n  id      String @id @default(cuid())\n  topicId String\n  tagId   String\n\n  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([topicId, tagId])\n  @@index([topicId])\n  @@index([tagId])\n}\n\nmodel ItemTag {\n  id     String @id @default(cuid())\n  itemId String\n  tagId  String\n\n  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([itemId, tagId])\n  @@index([itemId])\n  @@index([tagId])\n}\n\nmodel ContentItem {\n  id   String      @id @default(cuid())\n  kind ContentKind\n\n  topicId String\n  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  locale    Locale  @default(de)\n  title     String?\n  text      String\n  richText  String?\n  sortOrder Int     @default(0) @map(\"order\") // statt \"order\"\n\n  status     PublishStatus @default(draft)\n  authorName String?\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  publishAt DateTime?\n  expireAt  DateTime?\n\n  regionMode        RegionMode @default(AUTO)\n  regionManualId    String?\n  regionEffectiveId String?\n  regionAuto        Json?\n\n  // --- KORREKTE, BENANNTE RELATIONEN ZU Region ---\n  regionManual    Region? @relation(\"ContentItemRegionManual\", fields: [regionManualId], references: [id])\n  regionEffective Region? @relation(\"ContentItemRegionEffective\", fields: [regionEffectiveId], references: [id])\n\n  validation Json?\n  meta       Json?\n\n  answerOptions AnswerOption[]\n  tags          ItemTag[]\n\n  @@index([kind, status, locale])\n  @@index([publishAt])\n  @@index([topicId])\n  @@index([createdAt])\n  @@index([regionManualId])\n  @@index([regionEffectiveId])\n}\n\nmodel AnswerOption {\n  id        String      @id @default(cuid())\n  itemId    String\n  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  label     String\n  value     String\n  sortOrder Int         @default(0) @map(\"order\")\n  exclusive Boolean     @default(false)\n  meta      Json?\n\n  @@unique([itemId, sortOrder])\n  @@unique([itemId, value])\n}\n",
+  "inlineSchemaHash": "20ac4b05e2e5b03e08f6cf8fb35c644f55fe4f8070d4d299b68cdd352ad95f47",
   "copyEngine": true
 }
 
@@ -277,8 +285,8 @@ const fs = require('fs')
 config.dirname = __dirname
 if (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {
   const alternativePaths = [
-    "src/db/web",
-    "db/web",
+    "apps/web/src/db/web",
+    "web/src/db/web",
   ]
   
   const alternativePath = alternativePaths.find((altPath) => {
@@ -289,7 +297,7 @@ if (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {
   config.isBundled = true
 }
 
-config.runtimeDataModel = JSON.parse("{\"models\":{\"Topic\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locale\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Locale\",\"nativeType\":null,\"default\":\"de\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"items\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemToTopic\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tags\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"TopicTag\",\"nativeType\":null,\"relationName\":\"TopicToTopicTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Tag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topics\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"TopicTag\",\"nativeType\":null,\"relationName\":\"TagToTopicTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"items\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ItemTag\",\"nativeType\":null,\"relationName\":\"ItemTagToTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"TopicTag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topicId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tagId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topic\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Topic\",\"nativeType\":null,\"relationName\":\"TopicToTopicTag\",\"relationFromFields\":[\"topicId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tag\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Tag\",\"nativeType\":null,\"relationName\":\"TagToTopicTag\",\"relationFromFields\":[\"tagId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"topicId\",\"tagId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"topicId\",\"tagId\"]}],\"isGenerated\":false},\"ItemTag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"itemId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tagId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"item\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemToItemTag\",\"relationFromFields\":[\"itemId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tag\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Tag\",\"nativeType\":null,\"relationName\":\"ItemTagToTag\",\"relationFromFields\":[\"tagId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"itemId\",\"tagId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"itemId\",\"tagId\"]}],\"isGenerated\":false},\"ContentItem\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"kind\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentKind\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topicId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topic\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Topic\",\"nativeType\":null,\"relationName\":\"ContentItemToTopic\",\"relationFromFields\":[\"topicId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locale\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Locale\",\"nativeType\":null,\"default\":\"de\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"text\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"richText\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sortOrder\",\"dbName\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"status\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"PublishStatus\",\"nativeType\":null,\"default\":\"draft\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"authorName\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"publishAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"expireAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionMode\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"RegionMode\",\"nativeType\":null,\"default\":\"AUTO\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionManualId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionEffectiveId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionAuto\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"validation\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"meta\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"answerOptions\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"AnswerOption\",\"nativeType\":null,\"relationName\":\"AnswerOptionToContentItem\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tags\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ItemTag\",\"nativeType\":null,\"relationName\":\"ContentItemToItemTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"AnswerOption\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"itemId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"item\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"AnswerOptionToContentItem\",\"relationFromFields\":[\"itemId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"value\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sortOrder\",\"dbName\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"exclusive\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"meta\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"itemId\",\"sortOrder\"],[\"itemId\",\"value\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"itemId\",\"sortOrder\"]},{\"name\":null,\"fields\":[\"itemId\",\"value\"]}],\"isGenerated\":false}},\"enums\":{\"ContentKind\":{\"values\":[{\"name\":\"SWIPE\",\"dbName\":null},{\"name\":\"EVENT\",\"dbName\":null},{\"name\":\"SUNDAY_POLL\",\"dbName\":null}],\"dbName\":null},\"PublishStatus\":{\"values\":[{\"name\":\"draft\",\"dbName\":null},{\"name\":\"review\",\"dbName\":null},{\"name\":\"published\",\"dbName\":null},{\"name\":\"archived\",\"dbName\":null}],\"dbName\":null},\"RegionMode\":{\"values\":[{\"name\":\"AUTO\",\"dbName\":null},{\"name\":\"MANUAL\",\"dbName\":null}],\"dbName\":null},\"Locale\":{\"values\":[{\"name\":\"de\",\"dbName\":null},{\"name\":\"en\",\"dbName\":null},{\"name\":\"fr\",\"dbName\":null},{\"name\":\"it\",\"dbName\":null},{\"name\":\"es\",\"dbName\":null},{\"name\":\"pl\",\"dbName\":null},{\"name\":\"uk\",\"dbName\":null},{\"name\":\"ru\",\"dbName\":null},{\"name\":\"tr\",\"dbName\":null},{\"name\":\"hi\",\"dbName\":null},{\"name\":\"zh\",\"dbName\":null},{\"name\":\"ar\",\"dbName\":null}],\"dbName\":null}},\"types\":{}}")
+config.runtimeDataModel = JSON.parse("{\"models\":{\"Region\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"code\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"level\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"manualItems\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemRegionManual\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"effectiveItems\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemRegionEffective\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Topic\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locale\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Locale\",\"nativeType\":null,\"default\":\"de\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"items\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemToTopic\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tags\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"TopicTag\",\"nativeType\":null,\"relationName\":\"TopicToTopicTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Tag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topics\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"TopicTag\",\"nativeType\":null,\"relationName\":\"TagToTopicTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"items\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ItemTag\",\"nativeType\":null,\"relationName\":\"ItemTagToTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"TopicTag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topicId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tagId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topic\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Topic\",\"nativeType\":null,\"relationName\":\"TopicToTopicTag\",\"relationFromFields\":[\"topicId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tag\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Tag\",\"nativeType\":null,\"relationName\":\"TagToTopicTag\",\"relationFromFields\":[\"tagId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"topicId\",\"tagId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"topicId\",\"tagId\"]}],\"isGenerated\":false},\"ItemTag\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"itemId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tagId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"item\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"ContentItemToItemTag\",\"relationFromFields\":[\"itemId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tag\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Tag\",\"nativeType\":null,\"relationName\":\"ItemTagToTag\",\"relationFromFields\":[\"tagId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"itemId\",\"tagId\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"itemId\",\"tagId\"]}],\"isGenerated\":false},\"ContentItem\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"kind\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentKind\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topicId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topic\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Topic\",\"nativeType\":null,\"relationName\":\"ContentItemToTopic\",\"relationFromFields\":[\"topicId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Restrict\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"locale\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Locale\",\"nativeType\":null,\"default\":\"de\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"text\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"richText\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sortOrder\",\"dbName\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"status\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"PublishStatus\",\"nativeType\":null,\"default\":\"draft\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"authorName\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"publishAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"expireAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionMode\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"RegionMode\",\"nativeType\":null,\"default\":\"AUTO\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionManualId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionEffectiveId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionAuto\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionManual\",\"kind\":\"object\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Region\",\"nativeType\":null,\"relationName\":\"ContentItemRegionManual\",\"relationFromFields\":[\"regionManualId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"regionEffective\",\"kind\":\"object\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Region\",\"nativeType\":null,\"relationName\":\"ContentItemRegionEffective\",\"relationFromFields\":[\"regionEffectiveId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"validation\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"meta\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"answerOptions\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"AnswerOption\",\"nativeType\":null,\"relationName\":\"AnswerOptionToContentItem\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"tags\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ItemTag\",\"nativeType\":null,\"relationName\":\"ContentItemToItemTag\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"AnswerOption\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":null,\"default\":{\"name\":\"cuid\",\"args\":[1]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"itemId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"item\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"ContentItem\",\"nativeType\":null,\"relationName\":\"AnswerOptionToContentItem\",\"relationFromFields\":[\"itemId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"relationOnUpdate\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"label\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"value\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sortOrder\",\"dbName\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Int\",\"nativeType\":null,\"default\":0,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"exclusive\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Boolean\",\"nativeType\":null,\"default\":false,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"meta\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Json\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[[\"itemId\",\"sortOrder\"],[\"itemId\",\"value\"]],\"uniqueIndexes\":[{\"name\":null,\"fields\":[\"itemId\",\"sortOrder\"]},{\"name\":null,\"fields\":[\"itemId\",\"value\"]}],\"isGenerated\":false}},\"enums\":{\"ContentKind\":{\"values\":[{\"name\":\"SWIPE\",\"dbName\":null},{\"name\":\"EVENT\",\"dbName\":null},{\"name\":\"SUNDAY_POLL\",\"dbName\":null}],\"dbName\":null},\"PublishStatus\":{\"values\":[{\"name\":\"draft\",\"dbName\":null},{\"name\":\"review\",\"dbName\":null},{\"name\":\"published\",\"dbName\":null},{\"name\":\"archived\",\"dbName\":null}],\"dbName\":null},\"RegionMode\":{\"values\":[{\"name\":\"AUTO\",\"dbName\":null},{\"name\":\"MANUAL\",\"dbName\":null}],\"dbName\":null},\"Locale\":{\"values\":[{\"name\":\"de\",\"dbName\":null},{\"name\":\"en\",\"dbName\":null},{\"name\":\"fr\",\"dbName\":null},{\"name\":\"it\",\"dbName\":null},{\"name\":\"es\",\"dbName\":null},{\"name\":\"pl\",\"dbName\":null},{\"name\":\"uk\",\"dbName\":null},{\"name\":\"ru\",\"dbName\":null},{\"name\":\"tr\",\"dbName\":null},{\"name\":\"hi\",\"dbName\":null},{\"name\":\"zh\",\"dbName\":null},{\"name\":\"ar\",\"dbName\":null}],\"dbName\":null}},\"types\":{}}")
 defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
 config.engineWasm = undefined
 config.compilerWasm = undefined
@@ -308,7 +316,7 @@ Object.assign(exports, Prisma)
 
 // file annotations for bundling tools to include these files
 path.join(__dirname, "libquery_engine-darwin-arm64.dylib.node");
-path.join(process.cwd(), "src/db/web/libquery_engine-darwin-arm64.dylib.node")
+path.join(process.cwd(), "apps/web/src/db/web/libquery_engine-darwin-arm64.dylib.node")
 // file annotations for bundling tools to include these files
 path.join(__dirname, "schema.prisma");
-path.join(process.cwd(), "src/db/web/schema.prisma")
+path.join(process.cwd(), "apps/web/src/db/web/schema.prisma")
diff --git a/apps/web/src/db/web/package.json b/apps/web/src/db/web/package.json
index 10d14ec9..9e145477 100644
--- a/apps/web/src/db/web/package.json
+++ b/apps/web/src/db/web/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "prisma-client-04cd145b13fa6171398200d69f3e3e069863005f443e8393c27f01a62ff6d925",
+  "name": "prisma-client-9f1320b550e8a3a9e2be77871903876b86627a4c56ac67865f0e5ea83494ed4e",
   "main": "index.js",
   "types": "index.d.ts",
   "browser": "default.js",
diff --git a/apps/web/src/db/web/wasm.js b/apps/web/src/db/web/wasm.js
index aedd7f9a..62637871 100644
--- a/apps/web/src/db/web/wasm.js
+++ b/apps/web/src/db/web/wasm.js
@@ -92,6 +92,13 @@ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
   Serializable: 'Serializable'
 });
 
+exports.Prisma.RegionScalarFieldEnum = {
+  id: 'id',
+  code: 'code',
+  name: 'name',
+  level: 'level'
+};
+
 exports.Prisma.TopicScalarFieldEnum = {
   id: 'id',
   slug: 'slug',
@@ -212,6 +219,7 @@ exports.Locale = exports.$Enums.Locale = {
 };
 
 exports.Prisma.ModelName = {
+  Region: 'Region',
   Topic: 'Topic',
   Tag: 'Tag',
   TopicTag: 'TopicTag',
@@ -266,13 +274,13 @@ const config = {
       }
     }
   },
-  "inlineSchema": "// prisma/web/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../apps/web/src/db/web\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"WEB_POSTGRES_URL\") // ggf. an deine ENV anpassen\n}\n\n//\n// ---------- ENUMS ----------\nenum ContentKind {\n  SWIPE\n  EVENT\n  SUNDAY_POLL\n}\n\nenum PublishStatus {\n  draft\n  review\n  published\n  archived\n}\n\nenum RegionMode {\n  AUTO\n  MANUAL\n}\n\nenum Locale {\n  de\n  en\n  fr\n  it\n  es\n  pl\n  uk\n  ru\n  tr\n  hi\n  zh\n  ar\n}\n\n//\n// ---------- CONTENT / TOPIC / TAG ----------\nmodel Topic {\n  id          String   @id @default(cuid())\n  slug        String   @unique\n  title       String\n  description String?\n  locale      Locale   @default(de)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  items ContentItem[]\n  tags  TopicTag[]\n\n  @@index([locale])\n  @@index([createdAt])\n}\n\nmodel Tag {\n  id     String     @id @default(cuid())\n  slug   String     @unique\n  label  String\n  topics TopicTag[]\n  items  ItemTag[]\n}\n\nmodel TopicTag {\n  id      String @id @default(cuid())\n  topicId String\n  tagId   String\n\n  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([topicId, tagId])\n  @@index([topicId])\n  @@index([tagId])\n}\n\nmodel ItemTag {\n  id     String @id @default(cuid())\n  itemId String\n  tagId  String\n\n  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([itemId, tagId])\n  @@index([itemId])\n  @@index([tagId])\n}\n\nmodel ContentItem {\n  id   String      @id @default(cuid())\n  kind ContentKind\n\n  topicId String\n  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  locale    Locale  @default(de)\n  title     String?\n  text      String\n  richText  String?\n  sortOrder Int     @default(0) @map(\"order\") // statt \"order\"\n\n  status     PublishStatus @default(draft)\n  authorName String?\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  publishAt DateTime?\n  expireAt  DateTime?\n\n  regionMode        RegionMode @default(AUTO)\n  regionManualId    String?\n  regionEffectiveId String?\n  regionAuto        Json?\n\n  validation Json?\n  meta       Json?\n\n  answerOptions AnswerOption[]\n  tags          ItemTag[]\n\n  @@index([kind, status, locale])\n  @@index([publishAt])\n  @@index([topicId])\n  @@index([createdAt])\n}\n\nmodel AnswerOption {\n  id        String      @id @default(cuid())\n  itemId    String\n  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  label     String\n  value     String\n  sortOrder Int         @default(0) @map(\"order\")\n  exclusive Boolean     @default(false)\n  meta      Json?\n\n  @@unique([itemId, sortOrder])\n  @@unique([itemId, value])\n}\n",
-  "inlineSchemaHash": "01a7d69ab5c4fe913d0d7565ffc54b2d48b631bfa3c7755714e7f6a7a422d74e",
+  "inlineSchema": "// prisma/web/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../apps/web/src/db/web\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"WEB_POSTGRES_URL\") // ggf. ENV anpassen\n}\n\n//\n// ---------- ENUMS ----------\nenum ContentKind {\n  SWIPE\n  EVENT\n  SUNDAY_POLL\n}\n\nenum PublishStatus {\n  draft\n  review\n  published\n  archived\n}\n\nenum RegionMode {\n  AUTO\n  MANUAL\n}\n\nenum Locale {\n  de\n  en\n  fr\n  it\n  es\n  pl\n  uk\n  ru\n  tr\n  hi\n  zh\n  ar\n}\n\n//\n// ---------- REGION ----------\nmodel Region {\n  id    String @id @default(cuid())\n  code  String @unique\n  name  String\n  level Int\n\n  // Back-Relations zu ContentItem (klar benannte Relationen!)\n  manualItems    ContentItem[] @relation(\"ContentItemRegionManual\")\n  effectiveItems ContentItem[] @relation(\"ContentItemRegionEffective\")\n\n  @@index([code])\n}\n\n//\n// ---------- CONTENT / TOPIC / TAG ----------\nmodel Topic {\n  id          String   @id @default(cuid())\n  slug        String   @unique\n  title       String\n  description String?\n  locale      Locale   @default(de)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  items ContentItem[]\n  tags  TopicTag[]\n\n  @@index([locale])\n  @@index([createdAt])\n}\n\nmodel Tag {\n  id     String     @id @default(cuid())\n  slug   String     @unique\n  label  String\n  topics TopicTag[]\n  items  ItemTag[]\n}\n\nmodel TopicTag {\n  id      String @id @default(cuid())\n  topicId String\n  tagId   String\n\n  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([topicId, tagId])\n  @@index([topicId])\n  @@index([tagId])\n}\n\nmodel ItemTag {\n  id     String @id @default(cuid())\n  itemId String\n  tagId  String\n\n  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([itemId, tagId])\n  @@index([itemId])\n  @@index([tagId])\n}\n\nmodel ContentItem {\n  id   String      @id @default(cuid())\n  kind ContentKind\n\n  topicId String\n  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  locale    Locale  @default(de)\n  title     String?\n  text      String\n  richText  String?\n  sortOrder Int     @default(0) @map(\"order\") // statt \"order\"\n\n  status     PublishStatus @default(draft)\n  authorName String?\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  publishAt DateTime?\n  expireAt  DateTime?\n\n  regionMode        RegionMode @default(AUTO)\n  regionManualId    String?\n  regionEffectiveId String?\n  regionAuto        Json?\n\n  // --- KORREKTE, BENANNTE RELATIONEN ZU Region ---\n  regionManual    Region? @relation(\"ContentItemRegionManual\", fields: [regionManualId], references: [id])\n  regionEffective Region? @relation(\"ContentItemRegionEffective\", fields: [regionEffectiveId], references: [id])\n\n  validation Json?\n  meta       Json?\n\n  answerOptions AnswerOption[]\n  tags          ItemTag[]\n\n  @@index([kind, status, locale])\n  @@index([publishAt])\n  @@index([topicId])\n  @@index([createdAt])\n  @@index([regionManualId])\n  @@index([regionEffectiveId])\n}\n\nmodel AnswerOption {\n  id        String      @id @default(cuid())\n  itemId    String\n  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  label     String\n  value     String\n  sortOrder Int         @default(0) @map(\"order\")\n  exclusive Boolean     @default(false)\n  meta      Json?\n\n  @@unique([itemId, sortOrder])\n  @@unique([itemId, value])\n}\n",
+  "inlineSchemaHash": "20ac4b05e2e5b03e08f6cf8fb35c644f55fe4f8070d4d299b68cdd352ad95f47",
   "copyEngine": true
 }
 config.dirname = '/'
 
-config.runtimeDataModel = JSON.parse("{\"models\":{\"Topic\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"locale\",\"kind\":\"enum\",\"type\":\"Locale\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToTopic\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"TopicTag\",\"relationName\":\"TopicToTopicTag\"}],\"dbName\":null},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topics\",\"kind\":\"object\",\"type\":\"TopicTag\",\"relationName\":\"TagToTopicTag\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ItemTag\",\"relationName\":\"ItemTagToTag\"}],\"dbName\":null},\"TopicTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"TopicToTopicTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"TagToTopicTag\"}],\"dbName\":null},\"ItemTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToItemTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"ItemTagToTag\"}],\"dbName\":null},\"ContentItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kind\",\"kind\":\"enum\",\"type\":\"ContentKind\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"ContentItemToTopic\"},{\"name\":\"locale\",\"kind\":\"enum\",\"type\":\"Locale\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"richText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PublishStatus\"},{\"name\":\"authorName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"publishAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expireAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"regionMode\",\"kind\":\"enum\",\"type\":\"RegionMode\"},{\"name\":\"regionManualId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regionEffectiveId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regionAuto\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"validation\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"answerOptions\",\"kind\":\"object\",\"type\":\"AnswerOption\",\"relationName\":\"AnswerOptionToContentItem\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"ItemTag\",\"relationName\":\"ContentItemToItemTag\"}],\"dbName\":null},\"AnswerOption\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"AnswerOptionToContentItem\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order\"},{\"name\":\"exclusive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
+config.runtimeDataModel = JSON.parse("{\"models\":{\"Region\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"manualItems\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemRegionManual\"},{\"name\":\"effectiveItems\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemRegionEffective\"}],\"dbName\":null},\"Topic\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"locale\",\"kind\":\"enum\",\"type\":\"Locale\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToTopic\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"TopicTag\",\"relationName\":\"TopicToTopicTag\"}],\"dbName\":null},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topics\",\"kind\":\"object\",\"type\":\"TopicTag\",\"relationName\":\"TagToTopicTag\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ItemTag\",\"relationName\":\"ItemTagToTag\"}],\"dbName\":null},\"TopicTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"TopicToTopicTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"TagToTopicTag\"}],\"dbName\":null},\"ItemTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToItemTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"ItemTagToTag\"}],\"dbName\":null},\"ContentItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kind\",\"kind\":\"enum\",\"type\":\"ContentKind\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"ContentItemToTopic\"},{\"name\":\"locale\",\"kind\":\"enum\",\"type\":\"Locale\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"richText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PublishStatus\"},{\"name\":\"authorName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"publishAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expireAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"regionMode\",\"kind\":\"enum\",\"type\":\"RegionMode\"},{\"name\":\"regionManualId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regionEffectiveId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regionAuto\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"regionManual\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"ContentItemRegionManual\"},{\"name\":\"regionEffective\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"ContentItemRegionEffective\"},{\"name\":\"validation\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"answerOptions\",\"kind\":\"object\",\"type\":\"AnswerOption\",\"relationName\":\"AnswerOptionToContentItem\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"ItemTag\",\"relationName\":\"ContentItemToItemTag\"}],\"dbName\":null},\"AnswerOption\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"AnswerOptionToContentItem\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order\"},{\"name\":\"exclusive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
 defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
 config.engineWasm = {
   getRuntime: async () => require('./query_engine_bg.js'),
diff --git a/apps/web/src/lib/auth/getServerUser.ts b/apps/web/src/lib/auth/getServerUser.ts
index 2a122b1e..bfb25483 100644
--- a/apps/web/src/lib/auth/getServerUser.ts
+++ b/apps/web/src/lib/auth/getServerUser.ts
@@ -1,23 +1,44 @@
-import { cookies, headers } from "next/headers";
-import { jwtVerify } from "jose";
+// apps/web/src/lib/auth/getServerUser.ts
+export const runtime = "nodejs";
 
-type User = { id: string; verified?: boolean };
+import { getCookie, getHeader } from "@/lib/http/typedCookies";
+import { jwtVerify, JWTPayload } from "jose";
 
-export async function getServerUser(): Promise<User | null> {
-  // 1) JWT aus Cookie
-  const token = cookies().get("auth_token")?.value;
-  const secret = process.env.JWT_SECRET;
-  if (token && secret) {
-    try {
-      const { payload } = await jwtVerify(token, new TextEncoder().encode(secret));
-      const id = String(payload.sub || payload.id);
-      return { id, verified: Boolean(payload.verified) };
-    } catch {}
-  }
-  // 2) Dev-Fallback √ºber Header (nur nicht-Prod)
+export type ServerUser = { id: string; verified?: boolean };
+
+/** Helper: Cookie/Header-Helper k√∂nnen string ODER { value } liefern. */
+function toVal(v: unknown): string | undefined {
+  if (!v) return undefined;
+  return typeof v === "string" ? v : (v as any)?.value;
+}
+
+export async function getServerUser(): Promise<ServerUser | null> {
+  // --- Dev-Fallback via Header (nur nicht-Prod) ---
   if (process.env.NODE_ENV !== "production") {
-    const h = headers().get("x-dev-user-id");
-    if (h) return { id: h, verified: headers().get("x-dev-verified") === "true" };
+    const devId = toVal(await getHeader("x-dev-user-id"));
+    if (devId) {
+      const devVerified = toVal(await getHeader("x-dev-verified")) === "true";
+      return { id: devId, verified: devVerified };
+    }
+  }
+
+  // --- JWT aus Cookie lesen ---
+  const token = toVal(await getCookie("auth_token"));
+  if (!token) return null;
+
+  const secret = process.env.JWT_SECRET;
+  if (!secret) return null;
+
+  try {
+    const { payload } = await jwtVerify(token, new TextEncoder().encode(secret));
+    // id aus sub bevorzugen, sonst fallback auf id
+    const id = String((payload as JWTPayload & { id?: string }).sub ?? (payload as any).id ?? "");
+    if (!id) return null;
+
+    const verified = Boolean((payload as any).verified);
+    return { id, verified };
+  } catch {
+    // ung√ºltig/abgelaufen o.√§.
+    return null;
   }
-  return null;
 }
diff --git a/apps/web/src/lib/auth/index.ts b/apps/web/src/lib/auth/index.ts
index e69de29b..d702a82a 100644
--- a/apps/web/src/lib/auth/index.ts
+++ b/apps/web/src/lib/auth/index.ts
@@ -0,0 +1,170 @@
+// apps/web/src/lib/auth/index.ts
+import type { NextAuthOptions } from "next-auth";
+import Credentials from "next-auth/providers/credentials";
+import bcrypt from "bcryptjs";
+
+// triMongo: wir lesen Nutzer aus der PII-DB (kein Mongoose)
+import { piiCol } from "@core/triMongo";
+
+// Optional: Deine bestehende TOTP-Verify-Funktion
+let verifyTotp: ((code?: string, secret?: string) => boolean) | null = null;
+try {
+  // falls vorhanden (bei dir: @features/utils/totp)
+  // Signatur soll true/false liefern
+  // eslint-disable-next-line @typescript-eslint/no-var-requires
+  verifyTotp = require("@features/utils/totp").verifyTotp ?? null;
+} catch {
+  verifyTotp = null; // totp optional
+}
+
+type PiiUser = {
+  _id: any;
+  email: string;
+  username?: string;
+  roles?: string[];
+  verification?: string;
+  premium?: boolean;
+  passwordHash?: string;
+  mfaEnabled?: boolean;
+  // beliebiger Name f√ºr dein verschl√ºsseltes Secret-Feld:
+  mfaSecretEncrypted?: string; 
+  // oder plain text, wenn du das bereits entschl√ºsselst (nicht empfohlen):
+  mfaSecretPlain?: string;
+};
+
+async function getUserByEmail(email: string) {
+  const col = await piiCol<PiiUser>("user_profiles");
+  const user = await col.findOne(
+    { email: email.toLowerCase() },
+    {
+      projection: {
+        _id: 1, email: 1, username: 1, roles: 1, verification: 1, premium: 1,
+        passwordHash: 1, mfaEnabled: 1, mfaSecretEncrypted: 1, mfaSecretPlain: 1,
+      },
+    }
+  );
+  return user || null;
+}
+
+/** Falls du eine Entschl√ºsselung brauchst ‚Äì hier einklinken (sonst plaintext verwenden). */
+function getDecryptedMfaSecret(u: PiiUser): string | undefined {
+  if (u.mfaSecretPlain) return u.mfaSecretPlain;
+  // TODO: hier deine Entschl√ºsselung einf√ºgen, wenn mfaSecretEncrypted benutzt wird.
+  // z.B. decrypt(u.mfaSecretEncrypted, process.env.MFA_KEY)
+  return undefined;
+}
+
+export const authOptions: NextAuthOptions = {
+  secret: process.env.NEXTAUTH_SECRET,
+  session: { strategy: "jwt", maxAge: 60 * 60 * 12 }, // 12h
+  useSecureCookies: process.env.NODE_ENV === "production",
+  cookies: {
+    sessionToken: {
+      name:
+        process.env.NODE_ENV === "production"
+          ? "__Secure-next-auth.session-token"
+          : "next-auth.session-token",
+      options: {
+        httpOnly: true,
+        sameSite: "lax",
+        path: "/",
+        secure: process.env.NODE_ENV === "production",
+      },
+    },
+  },
+
+  // **Keine** OAuth-Provider ‚Äì nur Credentials
+  providers: [
+    Credentials({
+      name: "Credentials",
+      credentials: {
+        email: { label: "E-Mail", type: "email" },
+        password: { label: "Passwort", type: "password" },
+        totp: { label: "TOTP", type: "text", placeholder: "123 456", optional: true as any },
+      },
+      async authorize(creds) {
+        const email = (creds?.email || "").toString().trim().toLowerCase();
+        const password = (creds?.password || "").toString();
+        const totp = (creds?.totp || "").toString().replace(/\s+/g, "");
+
+        if (!email || !password) throw new Error("Missing credentials");
+
+        const user = await getUserByEmail(email);
+        if (!user?.passwordHash) throw new Error("Invalid credentials");
+
+        const ok = await bcrypt.compare(password, user.passwordHash);
+        if (!ok) throw new Error("Invalid credentials");
+
+        if (user.mfaEnabled) {
+          if (!verifyTotp) throw new Error("MFA required but TOTP not configured");
+          const secret = getDecryptedMfaSecret(user);
+          if (!secret || !verifyTotp(totp, secret)) throw new Error("Invalid MFA code");
+        }
+
+        // Nur minimal erlaubte Daten in 'user' zur√ºckgeben ‚Äì Rest kommt via JWT-Callback
+        return {
+          id: String(user._id),
+          username: user.username,
+          email: user.email,
+          roles: user.roles || [],
+          verification: user.verification || "none",
+          premium: !!user.premium,
+        } as any;
+      },
+    }),
+  ],
+
+  callbacks: {
+    async jwt({ token, user }) {
+      if (user) {
+        token.uid = (user as any).id;
+        token.username = (user as any).username;
+        token.roles = (user as any).roles;
+        token.verification = (user as any).verification;
+        token.premium = (user as any).premium;
+      }
+      return token;
+    },
+    async session({ session, token }) {
+      (session.user as any) = {
+        ...(session.user || {}),
+        id: (token as any).uid ?? token.sub ?? null,
+        username: (token as any).username ?? null,
+        roles: (token as any).roles || [],
+        verification: (token as any).verification || "none",
+        premium: !!(token as any).premium,
+        email: session.user?.email || null,
+      };
+      return session;
+    },
+  },
+
+  pages: { signIn: "/login" },
+};
+
+export default authOptions;
+
+/* ---------- (optional) TS-Augmentation f√ºr bessere Types ---------- */
+declare module "next-auth" {
+  interface Session {
+    user: {
+      id: string | null;
+      username?: string | null;
+      email?: string | null;
+      roles?: string[];
+      verification?: string;
+      premium?: boolean;
+      image?: string | null;
+      name?: string | null;
+    };
+  }
+}
+declare module "next-auth/jwt" {
+  interface JWT {
+    uid?: string;
+    username?: string;
+    roles?: string[];
+    verification?: string;
+    premium?: boolean;
+  }
+}
diff --git a/apps/web/src/lib/contribution/analyzeContribution.ts b/apps/web/src/lib/contribution/analyzeContribution.ts
index 42dd7c22..dd376aea 100644
--- a/apps/web/src/lib/contribution/analyzeContribution.ts
+++ b/apps/web/src/lib/contribution/analyzeContribution.ts
@@ -1,74 +1,170 @@
-// apps/web/src/lib/contribution/analyzeAndTranslate.ts
-import { analyzeContribution } from "@/lib/contribution/analyzeContribution";
-import { extractStatementsFromText } from "@/lib/contribution/extractStatements";
-import { translateAndCache } from "@/lib/contribution/translateAndCache";
-import type { AnalyzedStatement, TopicScore } from "@/types/contribution";
-import type { ContributionAnalysisRequest } from "@/types/contribution";
-
-export type AnalyzeAndTranslateOutput = {
-  region: string | null;
-  topics: TopicScore[];
-  statements: AnalyzedStatement[];
-  suggestions: string[];
-  translations?: Record<string, string[]>; // pro Sprache: Liste in der Reihenfolge von statements
-  saved?: { id: string } | null;
+// apps/web/src/lib/contribution/analyzeContribution.ts
+// V1-kompatibler Analyzer (Heuristik-first, optional KI-Boost-Hooks)
+// Nutzt die "leichte" Analyse-Typdatei aus "@/types/contribution"
+
+import type {
+  ContributionAnalysisRequest,
+  ContributionAnalysisResponse,
+  TopicScore,
+  AnalyzedStatement,
+  Polarity,
+  StatementType,
+} from "@/types/contribution";
+
+/** Optionale Boost-Hooks (z. B. Orchestrator/LLM) */
+type BoostHooks = {
+  aiTopics?: (text: string) => Promise<TopicScore[]>;                 // 0..1 confidence
+  aiRegion?: (body: ContributionAnalysisRequest) => Promise<string | null>;
+  aiSuggestions?: (text: string) => Promise<string[]>;
+};
+
+let BOOST_HOOKS: BoostHooks | null = null;
+
+/** Von au√üen aktivierbar, ohne Call-Sites anzupassen */
+export function enableAnalyzeContributionBoost(hooks: BoostHooks) {
+  BOOST_HOOKS = hooks;
+}
+
+/** ---------- Heuristik-Bausteine ---------- **/
+
+function inferRegion(body: ContributionAnalysisRequest): string | null {
+  if (body.region) return body.region;
+  if (body.userProfile?.region) return body.userProfile.region;
+
+  const t = body.text.toLowerCase();
+  if (/\bdeutschland\b|\bberlin\b|\bde\b/.test(t)) return "DE";
+  if (/\bfrance\b|\bparis\b|\bfr\b/.test(t)) return "FR";
+  if (/\bitalia\b|\broma\b|\bit\b/.test(t)) return "IT";
+  if (/\bespa√±a\b|\bmadrid\b|\bes\b/.test(t)) return "ES";
+  if (/\bpolska\b|\bwarszawa\b|\bpl\b/.test(t)) return "PL";
+  return null;
+}
+
+const TOPIC_KEYWORDS: Record<string, string[]> = {
+  "Demokratie & Wahlen": ["wahl", "abstimmung", "b√ºrger", "direkte demokratie", "petition"],
+  Bildung: ["schule", "bildung", "universit√§t", "lehrer", "studium"],
+  Gesundheit: ["klinik", "gesundheit", "krankenhaus", "pflege", "arzt", "kasse"],
+  "Mobilit√§t & Verkehr": ["bahn", "bus", "verkehr", "auto", "fahrrad", "√∂pnv", "tickets"],
+  "Sicherheit & Justiz": ["polizei", "kriminalit√§t", "gericht", "justiz", "sicherheit"],
+  "Energie & Klima": ["energie", "co2", "klima", "strom", "heizung", "w√§rmepumpe", "wind"],
+  "Wirtschaft & Arbeit": ["wirtschaft", "arbeit", "gehalt", "unternehmen", "mittelstand"],
+  "Digitales & Verwaltung": ["digital", "verwaltung", "online", "formular", "it", "internet"],
+  "Soziales & Wohnen": ["miete", "wohnung", "sozial", "kita", "familie", "rente"],
 };
 
-function dedupeStatements(items: AnalyzedStatement[], cap = 10) {
-  const seen = new Set<string>(); const out: AnalyzedStatement[] = [];
+function scoreTopicsHeuristic(text: string, cap = 5): TopicScore[] {
+  const lower = text.toLowerCase();
+  const raw: Array<{ name: string; hits: number }> = [];
+
+  for (const [name, kws] of Object.entries(TOPIC_KEYWORDS)) {
+    let hits = 0;
+    for (const kw of kws) {
+      const re = new RegExp(`\\b${kw.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}\\b`, "g");
+      hits += (lower.match(re)?.length ?? 0);
+    }
+    if (hits > 0) raw.push({ name, hits });
+  }
+
+  const max = raw.reduce((m, x) => Math.max(m, x.hits), 0) || 1;
+
+  return raw
+    .map(({ name, hits }) => ({
+      name,
+      confidence: Number((hits / max).toFixed(4)), // 0..1
+    }))
+    .sort((a, b) => b.confidence - a.confidence)
+    .slice(0, cap);
+}
+
+function makeSuggestionsHeuristic(text: string): string[] {
+  const s: string[] = [];
+  const t = text.trim();
+  const len = t.length;
+
+  if (len < 80) s.push("Bitte gib mehr Kontext: Wer ist betroffen, welches Ziel, warum jetzt?");
+  if (len > 1500) s.push("Der Text ist lang. Erstelle eine kurze Zusammenfassung (3‚Äì5 S√§tze).");
+  if (!/[.!?]$/.test(t)) s.push("Schlie√üe mit einem klaren Satz und Punkt.");
+  if (!/\b(https?:\/\/|www\.)/.test(t) && /quelle|beleg|nachweis/i.test(t))
+    s.push("F√ºge ggf. eine Quelle/URL als Nachweis hinzu.");
+  return s;
+}
+
+/** Merge: Heuristik + AI (max confidence, Dedupe per name) */
+function mergeTopics(a: TopicScore[], b: TopicScore[], cap = 5): TopicScore[] {
+  const map = new Map<string, TopicScore>();
+  const put = (x: TopicScore) => {
+    const key = x.name.toLowerCase();
+    const prev = map.get(key);
+    if (!prev) map.set(key, x);
+    else map.set(key, { name: x.name, confidence: Math.max(prev.confidence, x.confidence) });
+  };
+  a.forEach(put);
+  b.forEach(put);
+
+  const arr = [...map.values()];
+  const max = arr.reduce((m, x) => Math.max(m, x.confidence), 0) || 1;
+  return arr
+    .map((x) => ({ ...x, confidence: Number((x.confidence / max).toFixed(4)) }))
+    .sort((x, y) => y.confidence - x.confidence)
+    .slice(0, cap);
+}
+
+function dedupeStrings(items: string[]): string[] {
+  const seen = new Set<string>();
+  const out: string[] = [];
   for (const s of items) {
-    const k = s.text.trim().toLowerCase();
-    if (!k || seen.has(k)) continue;
-    seen.add(k); out.push(s);
-    if (out.length >= cap) break;
+    const k = s.trim();
+    if (!k) continue;
+    const key = k.toLowerCase();
+    if (seen.has(key)) continue;
+    seen.add(key);
+    out.push(k);
   }
   return out;
 }
 
-/** end-to-end helper f√ºr routes, workers, tests */
-export async function analyzeAndTranslate(
-  body: ContributionAnalysisRequest & {
-    translateTo?: string[];
-    fromLang?: string | null;
-    extractMax?: number;
-    extractMinChars?: number;
-    translateConcurrency?: number;
-    skipNoop?: boolean;
-  }
-): Promise<AnalyzeAndTranslateOutput> {
-  // 1) Analyse (GPT-Boost + Heuristik-Merge)
-  const base = await analyzeContribution(body);
-
-  // 2) zus√§tzliche S√§tze aus Originaltext ziehen
-  const extra = extractStatementsFromText(body.text, {
-    max: body.extractMax ?? Number(process.env.EXTRACT_MAX_STATEMENTS ?? 8),
-    minChars: body.extractMinChars ?? Number(process.env.EXTRACT_MIN_CHARS ?? 12),
-  });
-
-  // 3) zusammenf√ºhren & deckeln
-  const statements = dedupeStatements([...(base.statements ?? []), ...extra], 10);
-
-  // 4) √úbersetzen (optional)
-  let translations: Record<string, string[]> | undefined;
-  const langs = body.translateTo && body.translateTo.length ? body.translateTo : [];
-  if (langs.length) {
-    translations = await translateAndCache(
-      statements.map(s => s.text),
-      langs,
-      {
-        from: body.fromLang ?? null,
-        skipNoop: true,
-        concurrency: body.translateConcurrency ?? Number(process.env.TRANSLATE_CONCURRENCY ?? 6),
-      }
-    );
+/** Platzhalter: Statements erzeugen wir hier NICHT (macht extractStatementsFromText) */
+function emptyStatements(): AnalyzedStatement[] {
+  return [];
+}
+
+/** ---------- Hauptfunktion ---------- **/
+export async function analyzeContribution(
+  body: ContributionAnalysisRequest
+): Promise<ContributionAnalysisResponse> {
+  const text = String(body?.text ?? "").trim();
+
+  // Heuristik
+  const regionH = inferRegion(body);
+  const topicsH = scoreTopicsHeuristic(text);
+  const suggestionsH = makeSuggestionsHeuristic(text);
+
+  // Optional: AI-Boost
+  let region = regionH;
+  let topics = topicsH;
+  let suggestions = suggestionsH;
+
+  if (BOOST_HOOKS) {
+    const [aiRegion, aiTopics, aiSug] = await Promise.all([
+      BOOST_HOOKS.aiRegion ? BOOST_HOOKS.aiRegion(body).catch(() => null) : Promise.resolve(null),
+      BOOST_HOOKS.aiTopics ? BOOST_HOOKS.aiTopics(text).catch(() => []) : Promise.resolve([]),
+      BOOST_HOOKS.aiSuggestions ? BOOST_HOOKS.aiSuggestions(text).catch(() => []) : Promise.resolve([]),
+    ]);
+
+    if (aiRegion) region = aiRegion;
+    if (aiTopics?.length) topics = mergeTopics(topicsH, aiTopics, 5);
+    if (aiSug?.length) suggestions = dedupeStrings([...suggestionsH, ...aiSug]);
   }
 
+  // V1-Fluss: Statements leer; Extraktion passiert in analyzeAndTranslate via extractStatementsFromText
+  const statements: AnalyzedStatement[] = emptyStatements();
+
   return {
-    region: base.region ?? null,
-    topics: base.topics,
+    region: region ?? null,
+    topics,
     statements,
-    suggestions: base.suggestions,
-    translations,
-    saved: (base as any).saved ?? null,
+    suggestions,
+    isNewContext: true, // Heuristik: bei sp√§terer Persistenz/Cache-Erkennung auf false setzen
+    saved: null,
   };
 }
diff --git a/apps/web/src/lib/contribution/extractStatements.ts b/apps/web/src/lib/contribution/extractStatements.ts
index 36637435..8b0a689c 100644
--- a/apps/web/src/lib/contribution/extractStatements.ts
+++ b/apps/web/src/lib/contribution/extractStatements.ts
@@ -1,7 +1,62 @@
-export async function extractStatements(gptResponse: string): Promise<string[]> {
-    return gptResponse
-      .split("\n")
-      .map((line) => line.trim())
-      .filter((line) => line.length > 10);
+// apps/web/src/lib/contribution/extractStatements.ts
+import type { AnalyzedStatement, Polarity, StatementType } from "@/types/contribution";
+
+export type ExtractOpts = { max?: number; minChars?: number };
+
+/**
+ * Heuristik-Extraktor aus Rohtext (S√§tze/Zeilen).
+ * - Splittet an Zeilenumbr√ºchen und Satzende (. ! ?)
+ * - trimmt, dedupliziert (case-insensitive)
+ * - filtert zu kurze Segmente
+ * - deckelt auf `max`
+ */
+export function extractStatementsFromText(
+  text: string,
+  opts: ExtractOpts = {}
+): { text: string }[] {
+  const max = Number.isFinite(opts.max) ? (opts.max as number) : 10;
+  const min = Number.isFinite(opts.minChars) ? (opts.minChars as number) : 12;
+
+  const parts = text
+    .split(/\r?\n|(?<=[.!?])\s+/g)
+    .map((s) => s.trim())
+    .filter(Boolean)
+    .filter((s) => s.length >= min);
+
+  const out: { text: string }[] = [];
+  const seen = new Set<string>();
+
+  for (const p of parts) {
+    const k = p.toLowerCase();
+    if (seen.has(k)) continue;
+    seen.add(k);
+    out.push({ text: p });
+    if (out.length >= max) break;
   }
-  
\ No newline at end of file
+  return out;
+}
+
+/**
+ * Kompatibilit√§ts-Variante:
+ * Nimmt eine typische GPT-Listen-Antwort (Zeilen) und liefert reine Strings.
+ */
+export async function extractStatements(gptResponse: string): Promise<string[]> {
+  return gptResponse
+    .split("\n")
+    .map((line) => line.trim())
+    .filter((line) => line.length > 10);
+}
+
+/**
+ * Optionaler Helper:
+ * Upcast von {text}[] zu AnalyzedStatement[] mit Defaults.
+ * So kannst du bei Bedarf schnell auf dein strengeres Typmodell gehen.
+ */
+export function upcastToAnalyzedStatements(
+  items: { text: string }[],
+  defaults?: { type?: StatementType; polarity?: Polarity }
+): AnalyzedStatement[] {
+  const type: StatementType = defaults?.type ?? "frei";
+  const polarity: Polarity = defaults?.polarity ?? "mittel";
+  return items.map((s) => ({ text: s.text, type, polarity }));
+}
diff --git a/apps/web/src/lib/contribution/translateAndCache.ts b/apps/web/src/lib/contribution/translateAndCache.ts
index f3bc6f9a..a2664166 100644
--- a/apps/web/src/lib/contribution/translateAndCache.ts
+++ b/apps/web/src/lib/contribution/translateAndCache.ts
@@ -1,19 +1,30 @@
-import { gptTranslate } from "@/utils/gptTranslator";
-import { cacheTranslation } from "@/utils/translationCache";
+// apps/web/src/lib/contribution/translateAndCache.ts
+import { fetchGptTranslation } from "@/utils/gptTranslator";
+import { translationCache } from "@/utils/translationCache";
 
-export async function translateAndCache(texts: string[], targetLanguages: string[]) {
+/**
+ * √úbersetzt eine Liste von Texten in mehrere Zielsprachen und cached die Ergebnisse.
+ * R√ºckgabeform: { [text]: { [lang]: translation } }
+ */
+export async function translateAndCache(
+  texts: string[],
+  targetLanguages: string[]
+): Promise<Record<string, Record<string, string>>> {
   const result: Record<string, Record<string, string>> = {};
 
   for (const text of texts) {
     result[text] = {};
+
     for (const lang of targetLanguages) {
-      const cached = cacheTranslation.get(text, lang);
+      const cached = translationCache.get(text, lang);
       if (cached) {
         result[text][lang] = cached;
         continue;
       }
-      const translation = await gptTranslate(text, lang);
-      cacheTranslation.set(text, lang, translation);
+
+      // Wichtig: KORREKTER Funktionsname + await ‚Üí string, kein Promise<string>
+      const translation = await fetchGptTranslation(text, lang);
+      translationCache.set(text, lang, translation);
       result[text][lang] = translation;
     }
   }
diff --git a/apps/web/src/lib/db/core.ts b/apps/web/src/lib/db/core.ts
deleted file mode 100644
index 394a4658..00000000
--- a/apps/web/src/lib/db/core.ts
+++ /dev/null
@@ -1,79 +0,0 @@
-// apps/web/src/lib/db/core.ts
-import mongoose, { Connection } from "mongoose";
-import { ENV } from "../../utils/env.server";
-
-// In Dev kann das Modul wegen HMR mehrfach geladen werden.
-// => Connection in globalThis cachen.
-declare global {
-  // eslint-disable-next-line no-var
-  var __coreConn: Connection | null | undefined;
-  // eslint-disable-next-line no-var
-  var __coreConnBoundEvents: boolean | undefined;
-}
-const g = globalThis as typeof globalThis & {
-  __coreConn?: Connection | null;
-  __coreConnBoundEvents?: boolean;
-};
-
-function maskUri(uri?: string) {
-  if (!uri) return "(unset)";
-  try {
-    const u = new URL(uri);
-    const host = u.host;
-    const hasCreds = Boolean(u.username || u.password);
-    return `${u.protocol}//${hasCreds ? "***@" : ""}${host}${u.pathname || "/"}`;
-  } catch { return "(invalid URI)"; }
-}
-
-export function coreConn(): Connection {
-  if (g.__coreConn && g.__coreConn.readyState === 1) return g.__coreConn;
-
-  const uri = ENV.CORE_MONGODB_URI;              // z.B. mongodb+srv://‚Ä¶
-  const dbName = ENV.CORE_DB_NAME ?? "core_prod"; // falls in URI kein /dbname
-  if (!uri) throw new Error("CORE_MONGODB_URI missing");
-
-  // Hinweis: Bei Atlas mit mongodb+srv ist TLS automatisch, KEINE extra tls-Option setzen.
-  const conn = mongoose.createConnection(uri, {
-    dbName,
-    maxPoolSize: 20,
-    serverSelectionTimeoutMS: 10_000,
-    // ggf. hilfreich bei IPv6-Problemen: family: 4
-    // family: 4,
-  });
-
-  // Einmalige Event-Logs (nur beim ersten Aufbau binden)
-  if (!g.__coreConnBoundEvents) {
-    conn.on("connected", () => {
-      console.log(`[coreConn] connected ‚Üí ${maskUri(uri)} db=${dbName}`);
-    });
-    conn.on("error", (err) => {
-      console.error("[coreConn] error:", err);
-    });
-    conn.on("disconnected", () => {
-      console.warn("[coreConn] disconnected");
-    });
-    g.__coreConnBoundEvents = true;
-  }
-
-  g.__coreConn = conn;
-  return conn;
-}
-
-// F√ºr Scripts, die warten m√ºssen, bis die Verbindung ‚Äúopen‚Äù ist
-export async function coreConnReady(): Promise<Connection> {
-  const c = coreConn();
-  if (c.readyState === 1) return c;
-  await new Promise<void>((resolve, reject) => {
-    c.once("open", () => resolve());
-    c.once("error", (e) => reject(e));
-  });
-  return c;
-}
-
-// Optional: sauber schlie√üen (z. B. in CLI-Scripts/Tests)
-export async function coreConnClose(): Promise<void> {
-  if (g.__coreConn) {
-    await g.__coreConn.close().catch(() => {});
-    g.__coreConn = null;
-  }
-}
diff --git a/apps/web/src/lib/db/index.ts b/apps/web/src/lib/db/index.ts
index 6a143d09..53e4dd0f 100644
--- a/apps/web/src/lib/db/index.ts
+++ b/apps/web/src/lib/db/index.ts
@@ -1,6 +1,6 @@
 // apps/web/src/lib/db/index.ts
 import { MongoClient } from "mongodb";
-export { coreCol, votesCol, piiCol, pingAll } from "src/utils/triMongo";
+export { coreCol, votesCol, piiCol, pingAll } from "@core/triMongo";
 
 declare global {
   // eslint-disable-next-line no-var
diff --git a/apps/web/src/lib/db/mongo.ts b/apps/web/src/lib/db/mongo.ts
deleted file mode 100644
index 4049bd95..00000000
--- a/apps/web/src/lib/db/mongo.ts
+++ /dev/null
@@ -1,46 +0,0 @@
-import { MongoClient, Db } from "mongodb";
-
-type MongoKey = "core" | "votes" | "pii" | "ai_core_reader";
-
-type Cfg = {
-  uri: string | undefined;
-  dbName: string | undefined;
-};
-
-const cfg: Record<MongoKey, Cfg> = {
-  core:          { uri: process.env.CORE_MONGODB_URI,          dbName: process.env.CORE_DB_NAME },
-  votes:         { uri: process.env.VOTES_MONGODB_URI,         dbName: process.env.VOTES_DB_NAME },
-  pii:           { uri: process.env.PII_MONGODB_URI,           dbName: process.env.PII_DB_NAME },
-  ai_core_reader:{ uri: process.env.AI_CORE_READER_MONGODB_URI,dbName: process.env.AI_CORE_READER_DB_NAME },
-};
-
-declare global {
-  // eslint-disable-next-line no-var
-  var __mongoClients: Partial<Record<MongoKey, MongoClient>> | undefined;
-}
-global.__mongoClients ||= {};
-
-function getClient(key: MongoKey): MongoClient | null {
-  const { uri } = cfg[key];
-  if (!uri) return null;
-  if (!global.__mongoClients![key]) {
-    global.__mongoClients![key] = new MongoClient(uri);
-  }
-  return global.__mongoClients![key]!;
-}
-
-export function getDb(key: MongoKey): Db | null {
-  const c = getClient(key);
-  const name = cfg[key].dbName;
-  if (!c || !name) return null;
-  return c.db(name);
-}
-
-export async function pingMongo(key: MongoKey) {
-  const db = getDb(key);
-  if (!db) throw new Error(`${key}_client_or_db_missing`);
-  return db.admin().ping();
-}
-
-/** F√ºr Health */
-export const mongoKeys: MongoKey[] = ["core", "votes", "pii", "ai_core_reader"];
diff --git a/apps/web/src/lib/dbWeb.ts b/apps/web/src/lib/dbWeb.ts
index 470e8f84..412f8600 100644
--- a/apps/web/src/lib/dbWeb.ts
+++ b/apps/web/src/lib/dbWeb.ts
@@ -1,5 +1,3 @@
-// apps/web/src/lib/dbWeb.ts  (Postgres)
-import { PrismaClient } from "@/db/web";
-const g = globalThis as any;
-export const prismaWeb = g.__prismaWeb ?? new PrismaClient({ log: process.env.NODE_ENV === "development" ? ["warn","error"] : ["error"] });
-if (process.env.NODE_ENV !== "production") g.__prismaWeb = prismaWeb;
+// apps/web/src/lib/dbWeb.ts  (nur sauberer Re-Export)
+export { prisma as prismaWeb } from "@db-web";
+export type { Prisma } from "@db-web";
diff --git a/apps/web/src/lib/mongo.ts b/apps/web/src/lib/mongo.ts
deleted file mode 100644
index c6946c43..00000000
--- a/apps/web/src/lib/mongo.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-// apps/web/src/lib/mongo.ts
-// import { MongoClient } from "mongodb";
-// const uri = process.env.MONGODB_URI!;
-// if (!uri) throw new Error("MONGODB_URI missing");
-// let client: MongoClient | null = null;
-//export async function getDb() {
-//  if (!client) client = new MongoClient(uri);
-//  if (!client.topology?.isConnected()) await client.connect();
-//  return client.db(); // default DB aus URI
-//}
-
-
-// apps/web/src/lib/mongo.ts
-export { getDb, getCol, getMongoClient } from "@/utils/mongoClient";
diff --git a/apps/web/src/lib/prisma.ts b/apps/web/src/lib/prisma.ts
index c408e9de..ef5e9c4a 100644
--- a/apps/web/src/lib/prisma.ts
+++ b/apps/web/src/lib/prisma.ts
@@ -1,15 +1,4 @@
-import { PrismaClient } from "@/db/web";
-import { __wbindgen_bigint_get_as_i64 } from "@/db/web/query_engine_bg";
-
-declare global {
-  // eslint-disable-next-line no-var
-  var __web_prisma: PrismaClient | undefined;
-}
-
-export const prisma =
-  global.__web_prisma ?? new PrismaClient({ log: ["warn", "error"] });
-
-if (process.env.NODE_ENV !== "production") {
-  global.__web_prisma = prisma;
-}
-
+// apps/web/src/lib/prisma.ts  ‚Üí via Wrapper, keine direkten @prisma/client-Imports
+export { prisma } from "@db-web";
+export { ContentKind, PublishStatus, RegionMode, Locale } from "@db-web";
+export type { Prisma } from "@db-web";
diff --git a/apps/web/src/lib/redis.ts b/apps/web/src/lib/redis.ts
index 45cb33b9..85d33442 100644
--- a/apps/web/src/lib/redis.ts
+++ b/apps/web/src/lib/redis.ts
@@ -1,21 +1,16 @@
 // apps/web/src/lib/redis.ts
-/**
- * Redis Hybrid Helper (Upstash HTTP + node-redis TCP)
- * - Node Runtime only (kein Edge)
- * - Lazy connect, globale Singletons
- * - Dedizierte Publisher/Subscriber-Verbindungen bei TCP
- * - In Serverless nur Publish/Point-ops; Subscribe NUR in dauerhaften Prozessen (Worker)
- */
 import type { RedisClientType } from "redis";
 
 export const VOTE_CH_PREFIX = "votes";
 export const voteChannel = (statementId: string) => `${VOTE_CH_PREFIX}:${statementId}`;
 
-const isUpstash = !!process.env.UPSTASH_REDIS_REST_URL;
+const isUpstash = !!process.env.UPSTASH_REDIS_REST_URL && !!process.env.UPSTASH_REDIS_REST_TOKEN;
 
 // ---------- Upstash (HTTP) ----------
-let upstashClient: import("@upstash/redis").Redis | null = null;
-async function getUpstash(): Promise<import("@upstash/redis").Redis> {
+type UpstashRedis = import("@upstash/redis").Redis;
+let upstashClient: UpstashRedis | null = null;
+
+async function getUpstash(): Promise<UpstashRedis> {
   if (!upstashClient) {
     const { Redis } = await import("@upstash/redis");
     upstashClient = new Redis({
@@ -73,47 +68,41 @@ async function getNodeSubscriber(): Promise<RedisClientType> {
 }
 
 // ---------- Public API ----------
-export async function redisPing(): Promise<"PONG" | "OK"> {
+export async function redisPing(): Promise<string> {
   if (isUpstash) {
     const up = await getUpstash();
-    // @upstash/redis -> "PONG"
-    return (await up.ping()) as any;
+    // Upstash gibt i.d.R. "PONG" zur√ºck
+    return up.ping();
   }
   const cli = await getNodeClient();
-  return cli.ping();
+  return cli.ping(); // Promise<string>
 }
 
 export async function redisPublish(channel: string, message: string): Promise<number> {
   if (isUpstash) {
     const up = await getUpstash();
-    return up.publish(channel, message);
+    return up.publish(channel, message); // number
   }
   const pub = await getNodePublisher();
-  return pub.publish(channel, message);
+  return pub.publish(channel, message); // number
 }
 
-/**
- * Subscribe nur in dauerhaften Umgebungen (Worker, Node runtime),
- * NICHT in Serverless (Vercel Functions).
- * R√ºckgabe: Unsubscribe-Funktion.
- */
 export async function redisSubscribe(
   channel: string,
   onMessage: (msg: string) => void
 ): Promise<() => Promise<void>> {
   if (isUpstash) {
-    throw new Error("HTTP/Upstash Subscribe hier bewusst nicht implementiert. Verwende Worker/WebSockets.");
+    throw new Error("Upstash(HTTP) Subscribe ist hier nicht implementiert. Nutze Worker/WebSockets.");
   }
   const sub = await getNodeSubscriber();
   await sub.subscribe(channel, (payload) => onMessage(String(payload)));
   return async () => {
-    try { await sub.unsubscribe(channel); } catch { /* noop */ }
+    try { await sub.unsubscribe(channel); } catch {}
   };
 }
 
-// Optional: Call an langlebigen Prozessen (Worker) verwenden.
 export async function redisCloseAll(): Promise<void> {
-  if (isUpstash) return; // Upstash HTTP hat keine offenen Sockets
+  if (isUpstash) return;
   const closes: Promise<any>[] = [];
   if (global.__redisSub?.isOpen) closes.push(global.__redisSub.quit());
   if (global.__redisPub?.isOpen) closes.push(global.__redisPub.quit());
diff --git a/apps/web/src/lib/region/effective.ts b/apps/web/src/lib/region/effective.ts
index 8d42d048..50a626e4 100644
--- a/apps/web/src/lib/region/effective.ts
+++ b/apps/web/src/lib/region/effective.ts
@@ -1,10 +1,18 @@
 // apps/web/src/lib/region/effective.ts
-import { cookies } from "next/headers";
+export const runtime = "nodejs";
+
+import { getCookie } from "@/lib/http/typedCookies";
 import { getServerSession } from "next-auth";
 import { authOptions } from "@/lib/auth";
-import { prismaWeb } from "@/lib/dbWeb";
+import { prisma } from "@db-web";
 
-export type RegionLevel = "country" | "state" | "county" | "city" | "nuts" | "custom";
+export type RegionLevel =
+  | "country"
+  | "state"
+  | "county"
+  | "city"
+  | "nuts"
+  | "custom";
 
 export interface RegionDTO {
   id: string;
@@ -21,14 +29,26 @@ export interface EffectiveRegionResult {
   userId?: string | null;
 }
 
+/** Liest den Wert des u_region-Cookies asynchron (z. B. DE-BE-BERLIN). */
+export async function readRegionCookie(): Promise<string | undefined> {
+  const raw = await getCookie("u_region");
+  return typeof raw === "string" ? raw : (raw as any)?.value;
+}
+
+/**
+ * Liefert die effektiv aktive Region:
+ * 1. falls User eingeloggt ‚Üí Profil.Region
+ * 2. sonst Cookie
+ * 3. sonst Fallback (keine Region)
+ */
 export async function getEffectiveRegion(): Promise<EffectiveRegionResult> {
-  // 1) Profil (NextAuth optional, still & freundlich)
+  // 1) Versuch: √ºber Profil (NextAuth optional)
   try {
     const session = await getServerSession(authOptions);
     const userId = session?.user?.id ?? null;
 
     if (userId) {
-      const prof = await prismaWeb.userProfile.findUnique({
+      const prof = await prisma.userProfile.findUnique({
         where: { userId },
         include: { region: true },
       });
@@ -45,37 +65,50 @@ export async function getEffectiveRegion(): Promise<EffectiveRegionResult> {
           userId,
         };
       }
-      // f√§llt durch zu Cookie
-      return { region: await fromCookie(), source: (await hasCookie()) ? "cookie" : "none", userId };
+
+      // kein Profil-Regionseintrag ‚Üí Cookie pr√ºfen
+      const c = await readRegionCookie();
+      if (c) {
+        const region = await prisma.region.findUnique({ where: { code: c } });
+        if (region) {
+          return {
+            region: {
+              id: region.id,
+              code: region.code,
+              name: region.name,
+              level: region.level as RegionLevel,
+            },
+            source: "cookie",
+            userId,
+          };
+        }
+      }
+
+      // kein Cookie ‚Üí none
+      return { region: null, source: "none", userId };
     }
   } catch {
-    // NextAuth nicht verkabelt ‚Üí still und freundlich ignorieren
+    // NextAuth evtl. nicht aktiviert ‚Üí still ignorieren
   }
 
-  // 2) Cookie (auch ohne Login)
-  const r = await fromCookie();
-  if (r) return { region: r, source: "cookie", userId: null };
+  // 2) Nur Cookie (auch ohne Login)
+  const cookieVal = await readRegionCookie();
+  if (cookieVal) {
+    const region = await prisma.region.findUnique({ where: { code: cookieVal } });
+    if (region) {
+      return {
+        region: {
+          id: region.id,
+          code: region.code,
+          name: region.name,
+          level: region.level as RegionLevel,
+        },
+        source: "cookie",
+        userId: null,
+      };
+    }
+  }
 
-  // 3) Nichts gesetzt
+  // 3) Kein Profil & kein Cookie ‚Üí none
   return { region: null, source: "none", userId: null };
 }
-
-async function hasCookie() {
-  const c = cookies().get("u_region");
-  return !!c?.value;
-}
-
-async function fromCookie(): Promise<RegionDTO | null> {
-  const c = cookies().get("u_region");
-  if (!c?.value) return null;
-
-  const region = await prismaWeb.region.findUnique({ where: { code: c.value } });
-  if (!region) return null;
-
-  return {
-    id: region.id,
-    code: region.code,
-    name: region.name,
-    level: region.level as RegionLevel,
-  };
-}
diff --git a/apps/web/src/lib/validation/contentValidation.ts b/apps/web/src/lib/validation/contentValidation.ts
index 34360c94..48fc8d15 100644
--- a/apps/web/src/lib/validation/contentValidation.ts
+++ b/apps/web/src/lib/validation/contentValidation.ts
@@ -1,19 +1,23 @@
 // apps/web/src/lib/validation/contentValidation.ts
-import type { ContentKind, RegionMode } from "@prisma/client";
-import {
-  validateItemDraft,
-  type ValidationResult,
-} from "@/server/validation/contentValidation";
-
-// Typen exportieren, damit Call-Sites sie weiterverwenden k√∂nnen
-export type { ValidationResult } from "@/server/validation/contentValidation";
-
-/**
- * Kompatible Wrapper-Funktion: bisheriger Import erwartet meist
- * `validateContentItem`/`validateCreateItem`/`validateUpdateItem`.
- * Intern delegieren wir auf deine Server-Validierung `validateItemDraft`.
- */
-export function validateContentItem(input: {
+import { ContentKind, RegionMode, Locale } from "@db-web";
+
+// ---- Types ----
+export type AnswerOptionInput = {
+  id?: string;
+  label: string;
+  value: string;
+  exclusive?: boolean;
+  order?: number;
+};
+
+export interface ValidationResult {
+  ok: boolean;
+  errors?: Array<{ field: string; code: string; message: string }>;
+  // abgeleitete Felder f√ºr Auto-Regionen etc.
+  regionAuto?: { country?: string | null; regionCode?: string | null } | null;
+}
+
+export interface ItemDraftInput {
   kind: ContentKind;
   text: string;
   topicId: string;
@@ -21,29 +25,103 @@ export function validateContentItem(input: {
   regionManualId?: string | null;
   publishAt?: string | Date | null;
   expireAt?: string | Date | null;
-  locale?: string;
-  answerOptions?: Array<{
-    id?: string;
-    label: string;
-    value: string;
-    exclusive?: boolean;
-    order?: number;
-  }>;
-}): Promise<ValidationResult> {
-  return validateItemDraft(input);
+  locale?: Locale | string;
+  answerOptions?: AnswerOptionInput[];
 }
 
-// Alias-Namen, die ggf. an anderen Stellen genutzt werden
+// ---- Helpers ----
+function toDate(v: unknown): Date | null {
+  if (!v) return null;
+  const d = v instanceof Date ? v : new Date(String(v));
+  return isNaN(d.getTime()) ? null : d;
+}
+function isNonEmpty(s: unknown): s is string {
+  return typeof s === "string" && s.trim().length > 0;
+}
+function uniq<T>(arr: T[]): T[] {
+  return Array.from(new Set(arr));
+}
+
+// ---- Core validation ----
+export async function validateItemDraft(input: ItemDraftInput): Promise<ValidationResult> {
+  const errors: ValidationResult["errors"] = [];
+
+  // kind
+  if (!Object.values(ContentKind).includes(input.kind)) {
+    errors.push({ field: "kind", code: "INVALID_KIND", message: "Ung√ºltiger Content-Typ." });
+  }
+
+  // text
+  if (!isNonEmpty(input.text)) {
+    errors.push({ field: "text", code: "REQUIRED", message: "Text darf nicht leer sein." });
+  } else if (input.text.length > 10_000) {
+    errors.push({ field: "text", code: "TOO_LONG", message: "Text ist zu lang (max. 10.000 Zeichen)." });
+  }
+
+  // topicId
+  if (!isNonEmpty(input.topicId)) {
+    errors.push({ field: "topicId", code: "REQUIRED", message: "Topic ist erforderlich." });
+  }
+
+  // region
+  if (!Object.values(RegionMode).includes(input.regionMode)) {
+    errors.push({ field: "regionMode", code: "INVALID_REGION_MODE", message: "Ung√ºltiger Regionsmodus." });
+  }
+  if (input.regionMode === RegionMode.MANUAL && !isNonEmpty(input.regionManualId)) {
+    errors.push({ field: "regionManualId", code: "REQUIRED", message: "Manuelle Region ist erforderlich." });
+  }
+
+  // publish/expire
+  const publishAt = toDate(input.publishAt);
+  const expireAt = toDate(input.expireAt);
+  if (publishAt && expireAt && publishAt.getTime() >= expireAt.getTime()) {
+    errors.push({ field: "expireAt", code: "RANGE", message: "expireAt muss nach publishAt liegen." });
+  }
+
+  // locale (optional, aber wenn gesetzt, pr√ºfen)
+  if (input.locale && !Object.values(Locale as any).includes(input.locale as any)) {
+    errors.push({ field: "locale", code: "INVALID_LOCALE", message: "Ung√ºltiges Locale." });
+  }
+
+  // answerOptions (f√ºr SWIPE/SUNDAY_POLL etc. sinnvoll)
+  if (Array.isArray(input.answerOptions)) {
+    const opts = input.answerOptions;
+    if (opts.length === 0) {
+      errors.push({ field: "answerOptions", code: "EMPTY", message: "Mindestens eine Option erforderlich." });
+    }
+    const vals = opts.map(o => (o.value ?? "").toString().trim()).filter(Boolean);
+    const labels = opts.map(o => (o.label ?? "").toString().trim()).filter(Boolean);
+    if (uniq(vals).length !== vals.length) {
+      errors.push({ field: "answerOptions", code: "DUP_VALUE", message: "Option-Werte m√ºssen eindeutig sein." });
+    }
+    if (uniq(labels).length !== labels.length) {
+      errors.push({ field: "answerOptions", code: "DUP_LABEL", message: "Option-Labels m√ºssen eindeutig sein." });
+    }
+  }
+
+  // regionAuto ‚Äì hier ggf. Geo-Logik einh√§ngen; Dummy vorerst:
+  const regionAuto = input.regionMode === RegionMode.AUTO ? { country: null, regionCode: null } : null;
+
+  return {
+    ok: !errors.length,
+    errors: errors.length ? errors : undefined,
+    regionAuto,
+  };
+}
+
+// ---- Wrapper, damit bestehende Call-Sites kompatibel bleiben ----
+export function validateContentItem(input: ItemDraftInput): Promise<ValidationResult> {
+  return validateItemDraft(input);
+}
 export const validateCreateItem = validateContentItem;
 export const validateUpdateItem = validateContentItem;
 
-// Falls Call-Sites etwas ‚Äûsanitizen‚Äú wollen ‚Äì no-op passt meist
 export function sanitizeContentItem<T>(x: T): T {
   return x;
 }
 
-// default + named Exports, deckt beide Import-Stile ab
 export default {
+  validateItemDraft,
   validateContentItem,
   validateCreateItem,
   validateUpdateItem,
diff --git a/apps/web/src/models/core/Event.ts b/apps/web/src/models/core/Event.ts
index 9e401cb3..6da82c38 100644
--- a/apps/web/src/models/core/Event.ts
+++ b/apps/web/src/models/core/Event.ts
@@ -1,38 +1,65 @@
-//apps/web/src/models/core/Event.ts
+// apps/web/src/models/core/Event.ts
+import { mongoose, mongo } from "@core/mongoose";
 
-import mongoose, { Schema, Document } from "mongoose";
-import { coreConn } from "src/lib/db/core";
-
-export interface EventDoc extends Document {
+/** Plain-Datenform (kein Document-Mix, damit die Typen klar bleiben) */
+export interface EventDoc {
   title: string;
   description?: string;
   startAt: Date;
   endAt?: Date;
   tags?: string[];
   organizationId?: string;
+  /** GeoJSON Point (lng, lat) */
   location?: { type: "Point"; coordinates: [number, number] };
-  createdAt: Date;
-  updatedAt: Date;
+  createdAt?: Date;
+  updatedAt?: Date;
 }
 
-const conn = coreConn();
-
-const EventSchema = new Schema<EventDoc>({
-  title: { type: String, required: true, trim: true, maxlength: 200 },
-  description: { type: String, trim: true, maxlength: 4000 },
-  startAt: { type: Date, required: true, index: true },
-  endAt: { type: Date },
-  tags: [String],
-  organizationId: { type: String, index: true },
-  location: {
-    type: { type: String, enum: ["Point"] },
-    coordinates: { type: [Number], validate: (v: number[]) => v.length === 2 }
+const EventSchema = new mongoose.Schema<EventDoc>(
+  {
+    title: { type: String, required: true, trim: true, maxlength: 200 },
+    description: { type: String, trim: true, maxlength: 4000 },
+
+    startAt: { type: Date, required: true, index: true },
+    endAt: { type: Date },
+
+    tags: { type: [String], default: undefined },
+    organizationId: { type: String, index: true },
+
+    // GeoJSON (optional)
+    location: {
+      type: {
+        type: String,
+        enum: ["Point"],
+        default: undefined // optionales Feld
+      },
+      coordinates: {
+        type: [Number],
+        validate: {
+          validator: (v: number[]) => Array.isArray(v) && v.length === 2,
+          message: "coordinates must be [lng, lat]"
+        },
+        default: undefined // optional
+      }
+    }
   },
-  createdAt: { type: Date, default: Date.now, index: true },
-  updatedAt: { type: Date, default: Date.now }
-});
+  {
+    timestamps: true, // createdAt/updatedAt automatisch
+    minimize: true,
+    versionKey: false
+  }
+);
+
+// Indizes
+EventSchema.index({ location: "2dsphere" });
+EventSchema.index({ organizationId: 1, startAt: -1 });
 
-EventSchema.index({ "location": "2dsphere" });
+// Optional: JSON-Output h√ºbscher
+EventSchema.set("toJSON", { versionKey: false, virtuals: true });
 
-export default (conn.models.Event as mongoose.Model<EventDoc>) ||
-  conn.model<EventDoc>("Event", EventSchema);
+/** Idempotentes Model (nutzt bestehende Connection, baut sie bei Bedarf auf) */
+export async function EventModel(): Promise<mongoose.Model<EventDoc>> {
+  await mongo(); // stellt sicher, dass verbunden ist
+  const existing = mongoose.models.Event as mongoose.Model<EventDoc> | undefined;
+  return existing ?? mongoose.model<EventDoc>("Event", EventSchema);
+}
diff --git a/apps/web/src/models/core/Source.ts b/apps/web/src/models/core/Source.ts
index b14ccccc..77ed39b0 100644
--- a/apps/web/src/models/core/Source.ts
+++ b/apps/web/src/models/core/Source.ts
@@ -1,5 +1,5 @@
 import { Schema, Document } from "mongoose";
-import { coreConn } from "src/lib/db/core";
+import { coreConn } from "@core/triMongo";
 import { modelOn } from "src/lib/db/modelOn";
 
 export type SourceType =
diff --git a/apps/web/src/models/core/Statement.ts b/apps/web/src/models/core/Statement.ts
index 012bc2ad..2b3e958a 100644
--- a/apps/web/src/models/core/Statement.ts
+++ b/apps/web/src/models/core/Statement.ts
@@ -1,5 +1,6 @@
+// apps/web/src/models/core/Statement.ts
 import mongoose, { Schema, Document } from "mongoose";
-import { coreConn } from "src/lib/db/core";
+import { coreConn } from "@core/triMongo";
 
 export interface VotesSummary {
   agree: number;
@@ -31,10 +32,10 @@ export interface FactcheckError {
 
 export interface FactcheckMeta {
   jobId?: string;
-  provider?: string;       // z.B. "openai:gpt-4o-mini"
+  provider?: string; // z.B. "openai:gpt-4o-mini"
   startedAt?: Date;
   finishedAt?: Date;
-  progress?: number;       // 0..100
+  progress?: number; // 0..100
   error?: FactcheckError;
   result?: FactcheckResult;
 }
@@ -76,9 +77,9 @@ export interface StatementDoc extends Document {
   relatedStatements?: string[];
   relatedReports?: string[];
 
-  visibility?: string;   // public / private
-  status?: string;       // active / archived / draft
-  importance?: string;   // low/medium/high
+  visibility?: string; // public / private
+  status?: string; // active / archived / draft
+  importance?: string; // low/medium/high
 
   votes: VotesSummary;
   userId?: string | null;
@@ -106,16 +107,20 @@ const StatementSchema = new Schema<StatementDoc>({
   regionScope: [Schema.Types.Mixed],
 
   source: { name: String, url: String, trustScore: Number },
-  impactLogic: [{
-    type: { type: String, trim: true },
-    description: { einfach: String, eloquent: String }
-  }],
-  alternatives: [{
-    text: String,
-    type: String,
-    impact: String,
-    votes: { agree: Number, neutral: Number, disagree: Number }
-  }],
+  impactLogic: [
+    {
+      type: { type: String, trim: true },
+      description: { einfach: String, eloquent: String },
+    },
+  ],
+  alternatives: [
+    {
+      text: String,
+      type: String,
+      impact: String,
+      votes: { agree: Number, neutral: Number, disagree: Number },
+    },
+  ],
   arguments: { pro: [String], contra: [String] },
   summary: { einfach: String, eloquent: String },
   recommendation: { einfach: String, eloquent: String },
@@ -123,7 +128,7 @@ const StatementSchema = new Schema<StatementDoc>({
 
   location: {
     type: { type: String, enum: ["Point"] },
-    coordinates: { type: [Number], validate: (v: number[]) => v.length === 2 }
+    coordinates: { type: [Number], validate: (v: number[]) => v.length === 2 },
   },
 
   aiAnnotations: { toxicity: Number, sentiment: String, subjectAreas: [String] },
@@ -140,7 +145,7 @@ const StatementSchema = new Schema<StatementDoc>({
     agree: { type: Number, default: 0 },
     neutral: { type: Number, default: 0 },
     disagree: { type: Number, default: 0 },
-    requiredMajority: { type: Number, default: 50 }
+    requiredMajority: { type: Number, default: 50 },
   },
 
   userId: { type: String, default: null },
@@ -153,7 +158,7 @@ const StatementSchema = new Schema<StatementDoc>({
   // ---- Neu: Factcheck vollst√§ndige Struktur ----
   factcheck: {
     jobId: { type: String },
-    provider: { type: String },   // z.B. "openai:gpt-4o-mini"
+    provider: { type: String }, // z.B. "openai:gpt-4o-mini"
     startedAt: { type: Date },
     finishedAt: { type: Date },
     progress: { type: Number, min: 0, max: 100, default: 0 },
@@ -164,23 +169,59 @@ const StatementSchema = new Schema<StatementDoc>({
     result: {
       verdict: { type: String, enum: ["true", "false", "uncertain"] },
       confidence: { type: Number },
-      claims: [{
-        text: { type: String },
-        verdict: { type: String, enum: ["true", "false", "uncertain"] },
-        evidence: [{ title: String, url: String, snippet: String }]
-      }],
-      summary: { type: String }
-    }
-  }
+      claims: [
+        {
+          text: { type: String },
+          verdict: { type: String, enum: ["true", "false", "uncertain"] },
+          evidence: [{ title: String, url: String, snippet: String }],
+        },
+      ],
+      summary: { type: String },
+    },
+  },
 });
 
-// Indizes
-StatementSchema.index({ category: 1, createdAt: -1 });
-StatementSchema.index({ language: 1, createdAt: -1 });
-StatementSchema.index({ status: 1, publishedAt: -1 });
-StatementSchema.index({ factcheckStatus: 1, "factcheck.startedAt": -1 });
-StatementSchema.index({ "factcheck.provider": 1, createdAt: -1 });
-StatementSchema.index({ location: "2dsphere" });
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ * Indexe (V2) ‚Äî benannt, partiell wo sinnvoll, ohne Duplikate
+ * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+// Bestehende hilfreiche Indexe behalten:
+StatementSchema.index({ category: 1, createdAt: -1 }, { name: "statement_category_createdAt" });
+StatementSchema.index({ language: 1, createdAt: -1 }, { name: "statement_language_createdAt" });
+StatementSchema.index({ factcheckStatus: 1, "factcheck.startedAt": -1 }, { name: "statement_factcheckStatus_startedAt" });
+StatementSchema.index({ "factcheck.provider": 1, createdAt: -1 }, { name: "statement_factcheckProvider_createdAt" });
+StatementSchema.index({ location: "2dsphere" }, { name: "statement_location_2dsphere" });
+
+// üîÅ ERSETZT den alten unbenannten { status: 1, publishedAt: -1 }-Index:
+StatementSchema.index(
+  { status: 1, publishedAt: -1 },
+  {
+    name: "statement_status_publishedAt",
+    partialFilterExpression: { publishedAt: { $exists: true } },
+  }
+);
+
+// Einzelfelder f√ºr schnelle Filter
+StatementSchema.index({ category: 1 }, { name: "statement_category_1" });
+StatementSchema.index({ status: 1 }, { name: "statement_status_1" });
+
+// Nur ver√∂ffentlichte Dokumente (spart Platz, Sortierung √ºber Index m√∂glich)
+StatementSchema.index(
+  { publishedAt: -1 },
+  {
+    name: "statement_publishedAt_desc",
+    partialFilterExpression: { publishedAt: { $exists: true } },
+  }
+);
+
+// H√§ufig: Filter (category,status) + Sort (publishedAt desc)
+StatementSchema.index(
+  { category: 1, status: 1, publishedAt: -1 },
+  {
+    name: "statement_cat_status_publishedAt",
+    partialFilterExpression: { publishedAt: { $exists: true } },
+  }
+);
 
 export default (conn.models.Statement as mongoose.Model<StatementDoc>) ||
   conn.model<StatementDoc>("Statement", StatementSchema);
diff --git a/apps/web/src/models/pii/UserProfile.ts b/apps/web/src/models/pii/UserProfile.ts
index fb67dbba..9ff5b5be 100644
--- a/apps/web/src/models/pii/UserProfile.ts
+++ b/apps/web/src/models/pii/UserProfile.ts
@@ -1,4 +1,4 @@
-// models/pii/UserProfile.ts
+// models/pii/UserProfile.ts  l√∂schen
 import crypto from "node:crypto";
 import { Schema, Document } from "mongoose";
 import { piiConn } from "@lib/db/pii";
diff --git a/apps/web/src/pages/api/auth/[...nextauth].ts b/apps/web/src/pages/api/auth/[...nextauth].ts
deleted file mode 100644
index 05d8fa05..00000000
--- a/apps/web/src/pages/api/auth/[...nextauth].ts
+++ /dev/null
@@ -1,69 +0,0 @@
-// apps/web/src/pages/api/auth/[...nextauth].ts
-import NextAuth from "next-auth";
-import CredentialsProvider from "next-auth/providers/credentials";
-import bcrypt from "bcryptjs";
-import UserProfile from "@/models/pii/UserProfile";
-import { verifyTotp } from "@features/utils/totp"; // deine TOTP-Verify-Funktion
-import dbConnect from "@/src/lib/db";
-
-export default NextAuth({
-  session: { strategy: "jwt", maxAge: 60 * 60 * 12 }, // 12h
-  useSecureCookies: process.env.NODE_ENV === "production",
-  cookies: {
-    sessionToken: {
-      name: process.env.NODE_ENV === "production" ? "__Secure-next-auth.session-token" : "next-auth.session-token",
-      options: { httpOnly: true, sameSite: "lax", path: "/", secure: process.env.NODE_ENV === "production" },
-    },
-  },
-  providers: [
-    CredentialsProvider({
-      name: "Credentials",
-      credentials: { email: {}, password: {}, totp: {} },
-      async authorize(credentials) {
-        await dbConnect();
-        const user = await UserProfile.findOne({ email: credentials?.email }).select("+mfaSecret");
-        if (!user) throw new Error("Invalid credentials");
-        const ok = await bcrypt.compare(credentials!.password, (user as any).passwordHash);
-        if (!ok) throw new Error("Invalid credentials");
-
-        if (user.mfaEnabled) {
-          const totpOk = verifyTotp(credentials!.totp, user.getDecryptedMfaSecret());
-          if (!totpOk) throw new Error("Invalid MFA code");
-        }
-        // nur minimale, erlaubte Daten
-        return {
-          id: user._id.toString(),
-          username: user.username,
-          email: user.email,
-          roles: user.roles,
-          verification: user.verification,
-          premium: user.premium,
-        };
-      },
-    }),
-  ],
-  callbacks: {
-    async jwt({ token, user }) {
-      if (user) {
-        token.uid = (user as any).id;
-        token.username = (user as any).username;
-        token.roles = (user as any).roles;
-        token.verification = (user as any).verification;
-        token.premium = (user as any).premium;
-      }
-      return token;
-    },
-    async session({ session, token }) {
-      session.user = {
-        id: token.uid as string,
-        username: token.username as string,
-        roles: (token.roles as any[]) || [],
-        verification: (token.verification as string) || "none",
-        premium: !!token.premium,
-        email: (session.user?.email as string) || "",
-      } as any;
-      return session;
-    },
-  },
-  pages: { signIn: "/login" },
-});
diff --git a/apps/web/src/types/contribution.ts b/apps/web/src/types/contribution.ts
index e892b23e..e9396d2a 100644
--- a/apps/web/src/types/contribution.ts
+++ b/apps/web/src/types/contribution.ts
@@ -1,16 +1,23 @@
 // apps/web/src/types/contribution.ts
+// Leichtgewichtige, runtime-nahe Typen f√ºr Analyse-/Pipelineschritte
+
 export type Polarity = "niedrig" | "mittel" | "hoch";
 export type StatementType = "ja/nein" | "skala" | "frei";
 
+/**
+ * TopicScore ‚Äì Analyseform (keine DB-IDs)
+ * - name: menschenlesbarer Topic-Name / Slug
+ * - confidence: 0..1 (Relevanz)
+ */
 export interface TopicScore {
   name: string;
   confidence: number; // 0..1
 }
 
 export interface UserProfileHint {
-  region?: string;      // z.B. "Sachsen-Anhalt" oder Code
-  interests?: string[]; // z.B. ["Umwelt", "Teilhabe"]
-  roles?: string[];     // z.B. ["B√ºrgerin"]
+  region?: string;       // z.B. "Sachsen-Anhalt" oder ISO/Custom-Code
+  interests?: string[];  // z.B. ["Umwelt", "Teilhabe"]
+  roles?: string[];      // z.B. ["B√ºrgerin"]
 }
 
 export interface ContributionAnalysisRequest {
@@ -28,10 +35,10 @@ export interface AnalyzedStatement {
 }
 
 export interface ContributionAnalysisResponse {
-  region: string | null;            // z.B. "Sachsen-Anhalt" oder Code
+  region: string | null;          // z.B. "Sachsen-Anhalt" oder Code
   topics: TopicScore[];
   statements: AnalyzedStatement[];
   suggestions: string[];
   isNewContext: boolean;
-  saved?: { id: string } | null;    // falls gespeichert
+  saved?: { id: string } | null;  // falls gespeichert
 }
diff --git a/apps/web/src/types/optional-mods.d.ts b/apps/web/src/types/optional-mods.d.ts
index 84bbb2ce..4a2d149c 100644
--- a/apps/web/src/types/optional-mods.d.ts
+++ b/apps/web/src/types/optional-mods.d.ts
@@ -1,12 +1,8 @@
 // apps/web/src/types/optional-mods.d.ts
-declare module "ioredis" {
-    const Redis: any;
-    export default Redis;
-  }
-  declare module "neo4j-driver" {
-    export const auth: any;
-    export const driver: any;
-    const _default: any;
-    export default _default;
-  }
-  
\ No newline at end of file
+declare module "maplibre-gl";
+declare module "xlsx";
+declare module "arangojs";
+declare module "ioredis";
+declare module "redis";
+declare module "react-icons/*";
+declare module "lucide-react";
diff --git a/apps/web/src/utils/log.ts b/apps/web/src/utils/log.ts
index da51d48c..8f322695 100644
--- a/apps/web/src/utils/log.ts
+++ b/apps/web/src/utils/log.ts
@@ -1,4 +1,4 @@
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 
 export async function logError(msg: string, ctx?: any) {
   // Mongo (persist)
diff --git a/apps/web/src/utils/mongo/votes.ts b/apps/web/src/utils/mongo/votes.ts
index 1eb311b9..22de28ce 100644
--- a/apps/web/src/utils/mongo/votes.ts
+++ b/apps/web/src/utils/mongo/votes.ts
@@ -1,6 +1,6 @@
 // Kompat-Wrapper f√ºr √§ltere Importe wie  "@/utils/mongo/votes"
 import type { Collection } from "mongodb";
-import { votesCol } from "@src/utils/triMongo";
+import { votesCol } from "@core/triMongo";
 
 // Falls irgendwo getVotesDb().collection("‚Ä¶") benutzt wird:
 export async function getVotesDb() {
diff --git a/apps/web/src/utils/mongoClient.ts b/apps/web/src/utils/mongoClient.ts
deleted file mode 100644
index 81f2a4a5..00000000
--- a/apps/web/src/utils/mongoClient.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-// apps/web/src/utils/mongoClient.ts
-import { MongoClient, Db } from "mongodb";
-
-type Alias = "core" | "votes" | "pii";
-
-const URIS: Record<Alias, string> = {
-  core:  process.env.CORE_MONGODB_URI  || process.env.MONGODB_URI || "",
-  votes: process.env.VOTES_MONGODB_URI || process.env.MONGODB_URI || "",
-  pii:   process.env.PII_MONGODB_URI   || process.env.MONGODB_URI || "",
-};
-
-const DBS: Record<Alias, string> = {
-  core:  process.env.CORE_MONGODB_DB  || process.env.MONGODB_DB || "vog",
-  votes: process.env.VOTES_MONGODB_DB || process.env.MONGODB_DB || "vog",
-  pii:   process.env.PII_MONGODB_DB   || process.env.MONGODB_DB || "vog",
-};
-
-const clients: Partial<Record<Alias, MongoClient>> = {};
-
-export async function getDb(alias: Alias = "core"): Promise<Db> {
-  const uri = URIS[alias];
-  if (!uri) throw new Error(`Mongo URI for ${alias} missing`);
-  if (!clients[alias]) {
-    clients[alias] = new MongoClient(uri, { maxPoolSize: 8 });
-    await clients[alias]!.connect();
-  }
-  return clients[alias]!.db(DBS[alias]);
-}
diff --git a/apps/web/src/utils/mongoClient.ts.bak.20250831183211 b/apps/web/src/utils/mongoClient.ts.bak.20250831183211
deleted file mode 100644
index 82462d17..00000000
--- a/apps/web/src/utils/mongoClient.ts.bak.20250831183211
+++ /dev/null
@@ -1,19 +0,0 @@
-// apps/web/src/utils/mongoClient.ts
-import "server-only";
-import type { Db, Collection } from "mongodb";
-import { getCoreDb, coreCol, piiCol } from "@/utils/triMongo";
-
-const PII_NAMES = new Set(["users", "tokens", "sessions"]);
-
-export async function getDb(): Promise<Db> {
-  return getCoreDb();
-}
-
-export async function getCol<T = any>(name: string): Promise<Collection<T>> {
-  return PII_NAMES.has(name) ? piiCol<T>(name) : coreCol<T>(name);
-}
-
-// Legacy ‚Äì absichtlich nicht unterst√ºtzt
-export async function getMongoClient(): Promise<never> {
-  throw new Error("getMongoClient is not exposed under triMongo. Use getCol/coreCol/piiCol.");
-}
diff --git a/apps/web/src/utils/rateLimit.ts.bak.20250831183211 b/apps/web/src/utils/rateLimit.ts.bak.20250831183211
index d1fad724..d345b06c 100644
--- a/apps/web/src/utils/rateLimit.ts.bak.20250831183211
+++ b/apps/web/src/utils/rateLimit.ts.bak.20250831183211
@@ -1,5 +1,5 @@
 import "server-only";
-import { coreCol } from "@/utils/triMongo";
+import { coreCol } from "@core/db/triMongo";
 
 /** Mongo-basierter Rate-Limiter (pro key/window) mit TTL-Index in CORE */
 export async function rateLimit(key: string, max: number, windowMs: number) {
diff --git a/apps/web/src/utils/session.ts b/apps/web/src/utils/session.ts
index ba179471..f4fcf7d2 100644
--- a/apps/web/src/utils/session.ts
+++ b/apps/web/src/utils/session.ts
@@ -1,13 +1,24 @@
 // apps/web/src/utils/session.ts
+export const runtime = "nodejs";
 import "server-only";
+
 import { cookies } from "next/headers";
-import crypto from "crypto";
+import { getCookie } from "@/lib/http/typedCookies";
+import crypto from "node:crypto";
 
-const COOKIE_NAME = "session";
+const COOKIE_NAME = "session_token";
 const TTL_DAYS = Number(process.env.SESSION_TTL_DAYS ?? 7);
 const JWT_SECRET = process.env.JWT_SECRET;
 if (!JWT_SECRET) throw new Error("JWT_SECRET missing");
 
+export type SessionPayload = {
+  uid: string;
+  roles?: string[];
+  iat: number; // ms epoch
+  exp: number; // ms epoch
+};
+
+// ---------- intern: JWT (HS256) ----------
 function b64url(input: Buffer | string) {
   const b = Buffer.isBuffer(input) ? input : Buffer.from(input);
   return b.toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
@@ -18,18 +29,18 @@ function sign(payload: Record<string, any>) {
   const h = b64url(JSON.stringify(header));
   const p = b64url(JSON.stringify(payload));
   const data = `${h}.${p}`;
-  const sig = crypto.createHmac("sha256", JWT_SECRET).update(data).digest();
+  const sig = crypto.createHmac("sha256", JWT_SECRET!).update(data).digest();
   return `${data}.${b64url(sig)}`;
 }
 
-function verify(token: string): any | null {
+function verify(token: string): SessionPayload | null {
   const [h, p, s] = token.split(".");
   if (!h || !p || !s) return null;
   const data = `${h}.${p}`;
-  const expected = b64url(crypto.createHmac("sha256", JWT_SECRET).update(data).digest());
+  const expected = b64url(crypto.createHmac("sha256", JWT_SECRET!).update(data).digest());
   if (expected !== s) return null;
   try {
-    const obj = JSON.parse(Buffer.from(p, "base64").toString("utf8"));
+    const obj = JSON.parse(Buffer.from(p, "base64").toString("utf8")) as SessionPayload;
     if (obj.exp && Date.now() >= obj.exp) return null;
     return obj;
   } catch {
@@ -37,12 +48,23 @@ function verify(token: string): any | null {
   }
 }
 
-export type SessionPayload = { uid: string; roles?: string[]; iat: number; exp: number };
+// ---------- Helpers ----------
+function toVal(v: unknown): string | undefined {
+  return typeof v === "string" ? v : (v as any)?.value;
+}
+
+// ---------- API ----------
+/** Nur Token lesen (ohne Decode) ‚Äì via async Cookie-Helper. */
+export async function getSessionToken(): Promise<string | undefined> {
+  return toVal(await getCookie(COOKIE_NAME));
+}
 
+/** Session erzeugen, signieren und HttpOnly-Cookie setzen. */
 export function createSession(uid: string, roles: string[] = []) {
   const now = Date.now();
   const exp = now + TTL_DAYS * 24 * 60 * 60 * 1000;
   const token = sign({ uid, roles, iat: now, exp });
+
   cookies().set({
     name: COOKIE_NAME,
     value: token,
@@ -52,15 +74,18 @@ export function createSession(uid: string, roles: string[] = []) {
     secure: process.env.NODE_ENV === "production",
     maxAge: Math.floor((exp - now) / 1000),
   });
+
   return token;
 }
 
-export function readSession(): SessionPayload | null {
-  const t = cookies().get(COOKIE_NAME)?.value;
+/** Session-Payload lesen & verifizieren. */
+export async function readSession(): Promise<SessionPayload | null> {
+  const t = await getSessionToken();
   if (!t) return null;
   return verify(t);
 }
 
+/** Session-Cookie l√∂schen. */
 export function clearSession() {
   cookies().set({
     name: COOKIE_NAME,
@@ -72,3 +97,8 @@ export function clearSession() {
     maxAge: 0,
   });
 }
+
+/** Optional: externes Verify f√ºr bereits vorliegende Tokens. */
+export function verifySessionToken(token: string): SessionPayload | null {
+  return verify(token);
+}
diff --git a/apps/web/src/utils/tokens.ts b/apps/web/src/utils/tokens.ts
index 757d67ae..b1e40680 100644
--- a/apps/web/src/utils/tokens.ts
+++ b/apps/web/src/utils/tokens.ts
@@ -1,7 +1,7 @@
 // apps/web/src/utils/tokens.ts
 import "server-only";
 import crypto from "crypto";
-import { getCol } from "@/utils/mongoClient";
+import { getCol } from "@core/db/triMongo";
 
 type TokenType = "verify" | "reset";
 
diff --git a/apps/web/src/utils/translationCache.ts b/apps/web/src/utils/translationCache.ts
index 84b99352..6e6c1f3b 100644
--- a/apps/web/src/utils/translationCache.ts
+++ b/apps/web/src/utils/translationCache.ts
@@ -1,17 +1,23 @@
-// src/utils/translationCache.ts
-const memoryCache: Record<string, string> = {};
+// apps/web/src/utils/translationCache.ts
+// Synchroner In-Memory-Cache (dev/edge-safe). Keine Promises n√∂tig.
 
-function createKey(text: string, to: string) {
-  return `${text}_${to}`.toLowerCase();
+type Key = string;
+
+function makeKey(text: string, lang: string): Key {
+  // normalize: lower-case, collapse whitespace
+  const t = text.trim().toLowerCase().replace(/\s+/g, " ");
+  const l = lang.trim().toLowerCase();
+  return `${l}::${t}`;
 }
 
-export const cacheTranslation = {
-  get: async (text: string, to: string) => {
-    const key = createKey(text, to);
-    return memoryCache[key];
+export const translationCache = {
+  _m: new Map<Key, string>(),
+
+  get(text: string, lang: string): string | undefined {
+    return this._m.get(makeKey(text, lang));
   },
-  set: async (text: string, to: string, translated: string) => {
-    const key = createKey(text, to);
-    memoryCache[key] = translated;
+
+  set(text: string, lang: string, translated: string): void {
+    this._m.set(makeKey(text, lang), translated);
   },
 };
diff --git a/apps/web/src/utils/triMongo.ts b/apps/web/src/utils/triMongo.ts
deleted file mode 100644
index cf302329..00000000
--- a/apps/web/src/utils/triMongo.ts
+++ /dev/null
@@ -1,111 +0,0 @@
-// apps/web/src/utils/triMongo.ts
-import {
-  MongoClient,
-  Db,
-  Collection,
-  type Document as MongoDoc, // ‚¨ÖÔ∏è wichtig: Mongo-Dokumenttyp, nicht DOM-Document
-} from "mongodb";
-
-type ClusterKey = "core" | "votes" | "pii" | "ai_core_reader";
-
-const CFG: Record<ClusterKey, { uri?: string; db?: string }> = {
-  core:           { uri: process.env.CORE_MONGODB_URI,           db: process.env.CORE_DB_NAME },
-  votes:          { uri: process.env.VOTES_MONGODB_URI,          db: process.env.VOTES_DB_NAME },
-  pii:            { uri: process.env.PII_MONGODB_URI,            db: process.env.PII_DB_NAME },
-  ai_core_reader: { uri: process.env.AI_CORE_READER_MONGODB_URI, db: process.env.AI_CORE_READER_DB_NAME },
-};
-
-/** Hot-reload-sicherer Global-Store (Next.js dev) */
-type Store = {
-  clients: Partial<Record<ClusterKey, MongoClient>>;
-  dbs: Partial<Record<ClusterKey, Db>>;
-  connecting: Partial<Record<ClusterKey, Promise<MongoClient>>>;
-};
-
-declare global {
-  // eslint-disable-next-line no-var
-  var __triMongo: Store | undefined;
-}
-globalThis.__triMongo ||= { clients: {}, dbs: {}, connecting: {} };
-const store = globalThis.__triMongo as Store;
-
-/** URI & DB-Name mit Fallback: ai_core_reader ‚Üí core */
-function uriFor(key: ClusterKey): string | undefined {
-  if (key === "ai_core_reader") return CFG.ai_core_reader.uri || CFG.core.uri;
-  return CFG[key].uri;
-}
-function dbNameFor(key: ClusterKey): string | undefined {
-  if (key === "ai_core_reader") return CFG.ai_core_reader.db || CFG.core.db;
-  return CFG[key].db;
-}
-
-async function getClient(key: ClusterKey): Promise<MongoClient> {
-  if (store.clients[key]) return store.clients[key]!;
-  if (store.connecting[key]) return store.connecting[key]!;
-
-  const uri = uriFor(key);
-  if (!uri) throw new Error(`${key}_mongodb_uri_missing`);
-
-  const p = MongoClient.connect(uri);
-  store.connecting[key] = p;
-  const client = await p;
-  store.clients[key] = client;
-  return client;
-}
-
-async function getDb(key: ClusterKey): Promise<Db> {
-  if (store.dbs[key]) return store.dbs[key]!;
-  const name = dbNameFor(key);
-  if (!name) throw new Error(`${key}_db_name_missing`);
-  const client = await getClient(key);
-  const db = client.db(name);
-  store.dbs[key] = db;
-  return db;
-}
-
-/** Collection-Helper (generisch) ‚Äî T muss ein Mongo-Dokument sein */
-async function col<T extends MongoDoc = MongoDoc>(key: ClusterKey, name: string): Promise<Collection<T>> {
-  const db = await getDb(key);
-  return db.collection<T>(name);
-}
-
-/** √ñffentliche Helfer */
-export async function coreCol<T extends MongoDoc = MongoDoc>(name: string) {
-  return col<T>("core", name);
-}
-export async function votesCol<T extends MongoDoc = MongoDoc>(name: string) {
-  return col<T>("votes", name);
-}
-export async function piiCol<T extends MongoDoc = MongoDoc>(name: string) {
-  return col<T>("pii", name);
-}
-/** AI Core Reader: eigener Cluster ODER Fallback ‚Üí CORE */
-export async function aiReaderCol<T extends MongoDoc = MongoDoc>(name: string) {
-  return col<T>("ai_core_reader", name);
-}
-
-/** Health */
-export async function pingMongo(key: ClusterKey) {
-  const db = await getDb(key);
-  await db.command({ ping: 1 });
-  return { ok: true };
-}
-
-export async function pingAll(keys: ClusterKey[] = ["core", "votes", "pii", "ai_core_reader"]) {
-  const out: Record<string, { ok: boolean; error?: string; usingFallback?: boolean }> = {};
-  await Promise.all(
-    keys.map(async (k) => {
-      try {
-        const usingFallback =
-          k === "ai_core_reader" &&
-          (!CFG.ai_core_reader.uri || !CFG.ai_core_reader.db) &&
-          !!(CFG.core.uri && CFG.core.db);
-        await pingMongo(k);
-        out[k] = { ok: true, ...(usingFallback ? { usingFallback: true } : {}) };
-      } catch (e: any) {
-        out[k] = { ok: false, error: e?.message || String(e) };
-      }
-    })
-  );
-  return out;
-}
diff --git a/apps/web/src/utils/useTranslation.ts b/apps/web/src/utils/useTranslation.ts
index 05bf70c8..48fc56ab 100644
--- a/apps/web/src/utils/useTranslation.ts
+++ b/apps/web/src/utils/useTranslation.ts
@@ -1,15 +1,20 @@
-import { absUrl } from "@/utils/serverBaseUrl";
-// src/utils/useTranslation.ts
-import { useLang } from "@/context/LanguageContext";
+// apps/web/src/utils/useTranslation.ts
+"use client";
 
-export async function translateText(text: string): Promise<string> {
-  const lang = useLang().lang;
+import { useMemo } from "react";
 
-  const res = await fetch(absUrl("/api/translate", {
-    method: "POST",
-    body: JSON.stringify({ text, to: lang }),
-  });
+type Dict = Record<string, string>;
+const dictionaries: Record<string, Dict> = {
+  de: {},
+  en: {},
+};
 
-  const data = await res.json();
-  return data.result || text;
+export function useTranslation(lang: string = "de") {
+  const dict = useMemo(() => dictionaries[lang] ?? {}, [lang]);
+
+  function t(key: string, fallback?: string) {
+    return dict[key] ?? fallback ?? key;
+  }
+
+  return { t, lang };
 }
diff --git a/apps/web/tests/vote.stats.test.ts b/apps/web/tests/vote.stats.test.ts
index 36fb184a..92934867 100644
--- a/apps/web/tests/vote.stats.test.ts
+++ b/apps/web/tests/vote.stats.test.ts
@@ -1,7 +1,7 @@
 import { getVoteStats } from "@/lib/vote/stats";
 import { VoteModel } from "@/models/Vote";
 import mongoose from "mongoose";
-import { mongo } from "@/lib/db/mongoose";
+import { mongo } from "@core/mongoose";
 
 describe("vote stats", () => {
   beforeAll(async () => {
diff --git a/apps/web/tsconfig.json b/apps/web/tsconfig.json
index 07c637b9..e76f61af 100644
--- a/apps/web/tsconfig.json
+++ b/apps/web/tsconfig.json
@@ -3,21 +3,16 @@
   "compilerOptions": {
     "baseUrl": ".",
     "paths": {
-      "@/*": ["apps/web/src/*"],
-      "@lib/*": ["src/lib/*"],
-      "@components/*": ["src/components/*"],
-      "@/models/*": ["apps/web/src/models/*"],
-      "@data/*": ["src/data/*"],
-
+      "@core/triMongo": ["../../core/db/triMongo.ts"],
+      "@/*": ["src/*"],
       "@features/*": ["../../features/*"],
-      "@features/graph": ["src/graph/index.ts"],
-      "@features/graph/*": ["src/graph/*"],
-      "@core/*": ["core/*"],
- 
+      "@core/*": ["../../core/*"],
+      "@db-web": ["../../packages/db-web/src/client.ts"],
+      "@db-web/*": ["../../packages/db-web/src/*"],
       "@vog/ui": ["../../packages/ui/dist/index.d.ts"],
       "@vog/ui/*": ["../../packages/ui/dist/*"]
     },
-    "moduleResolution": "bundler",
+    "moduleResolution": "Bundler",
     "incremental": true,
     "noEmit": true,
     "skipLibCheck": true,
@@ -25,6 +20,14 @@
     "types": ["node"],
     "plugins": [{ "name": "next" }]
   },
-  "include": ["next-env.d.ts", "src/**/*", ".next/types/**/*.ts", "next.config.*"],
+  "include": [
+    "next-env.d.ts",
+    "src/**/*",
+    "types/**/*.d.ts",
+    "../../features/**/*",
+    "../../core/**/*",
+    "../../packages/ui/dist/**/*.d.ts",
+    "next.config.*"
+  ],
   "exclude": ["node_modules", ".next", "dist", "coverage"]
 }
diff --git a/apps/worker/src/queues/factcheck.worker.ts b/apps/worker/src/queues/factcheck.worker.ts
index cfd066ff..2b8ea9b5 100644
--- a/apps/worker/src/queues/factcheck.worker.ts
+++ b/apps/worker/src/queues/factcheck.worker.ts
@@ -2,7 +2,7 @@
 
 import { Worker, QueueEvents, Job } from "bullmq";
 import IORedis from "ioredis";
-import { prisma } from "@core/db/prisma";
+import { prisma } from "@db-core";
 import { logger } from "@core/observability/logger";
 import { splitIntoClaims } from "@core/factcheck/claimDecompose";
 import { detectFrames, detectRhetoric, isFalsifiable } from "@core/factcheck/narrative";
diff --git a/core/db/mongo.ts b/core/db/mongo.ts
deleted file mode 100644
index b970afef..00000000
--- a/core/db/mongo.ts
+++ /dev/null
@@ -1,34 +0,0 @@
-// core/db/mongo.ts
-import { MongoClient } from "mongodb";
-import type { Db, Collection, Document } from "mongodb";
-
-let _client: MongoClient | null = null;
-let _db: Db | null = null;
-
-const URI = process.env.CORE_MONGODB_URI || process.env.MONGODB_URI || "";
-const DB_NAME = process.env.CORE_DB_NAME || "core";
-
-export async function getCoreDb(): Promise<Db> {
-  if (!_client) {
-    if (!URI) throw new Error("CORE_MONGODB_URI/MONGODB_URI is not set");
-    _client = new MongoClient(URI);
-    await _client.connect();
-    _db = _client.db(DB_NAME);
-  }
-  return _db!;
-}
-
-/**
- * Streng typisiert: T muss ein Mongo-Document sein.
- * Wenn du nichts angibst, ist der Default "Document".
- */
-export async function coreCol<T extends Document = Document>(name: string): Promise<Collection<T>> {
-  const db = await getCoreDb();
-  return db.collection<T>(name);
-}
-
-export async function closeCoreDb() {
-  await _client?.close();
-  _client = null;
-  _db = null;
-}
diff --git a/core/db/prisma.ts b/core/db/prisma.ts
deleted file mode 100644
index b9228200..00000000
--- a/core/db/prisma.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-// core/db/prisma.ts
-import { PrismaClient } from "@prisma/client";
-declare global { // HMR-safe
-  // eslint-disable-next-line no-var
-  var __prisma__: PrismaClient | undefined;
-}
-const prisma = globalThis.__prisma__ ?? new PrismaClient();
-if (process.env.NODE_ENV !== "production") globalThis.__prisma__ = prisma;
-export { prisma };
diff --git a/core/factcheck/extractAndPersist.ts b/core/factcheck/extractAndPersist.ts
index 5f259c95..209f7d93 100644
--- a/core/factcheck/extractAndPersist.ts
+++ b/core/factcheck/extractAndPersist.ts
@@ -1,5 +1,5 @@
 // core/factcheck/extractAndPersist.ts
-import { prisma } from "@/prisma";
+import { prisma } from "@db-core";
 import { extractUnits } from "./classify";
 import { canonicalKey, normalizeText } from "./canonical";
 import { shouldWatchlist } from "./triage";
diff --git a/core/factcheck/trust.ts b/core/factcheck/trust.ts
index 7b608739..8d9a5fd3 100644
--- a/core/factcheck/trust.ts
+++ b/core/factcheck/trust.ts
@@ -1,4 +1,4 @@
-import { prisma } from "@core/db/prisma";
+import { prisma } from "@db-core";
 
 export async function getDomain(url: string): Promise<string> {
   try {
diff --git a/core/queue/factcheckQueue.ts b/core/queue/factcheckQueue.ts
index 875be3f9..9c6a5bbf 100644
--- a/core/queue/factcheckQueue.ts
+++ b/core/queue/factcheckQueue.ts
@@ -3,7 +3,7 @@ import { Queue, QueueEvents, Worker as BullmqWorker, Job } from "bullmq";
 import type { JobsOptions } from "bullmq";           // <= type-only (fix f√ºr ts1484)
 import IORedis, { Redis } from "ioredis";
 import { ObjectId } from "mongodb";
-import { coreCol } from "../db/mongo";
+import { coreCol } from "@core/db/triMongo";
 
 export const FACTCHECK_QUEUE = "factcheck";
 const REDIS_URL = process.env.REDIS_URL || "redis://127.0.0.1:6379";
diff --git a/features/auth/hooks/useAuth.ts b/features/auth/hooks/useAuth.ts
index bba15a93..16397429 100644
--- a/features/auth/hooks/useAuth.ts
+++ b/features/auth/hooks/useAuth.ts
@@ -1,10 +1,11 @@
+// features/auth/hooks/useAuth.ts
 import { useState } from "react";
-import { IUserProfile } from "../models/UserProfile";
+import type { UserType as IUserProfileDTO } from "../../user/types/UserType";
 
 type LoginParams = { email: string; password: string };
 
 export function useAuth() {
-  const [user, setUser] = useState<IUserProfile | null>(null);
+  const [user, setUser] = useState<IUserProfileDTO | null>(null);
   const [isLoading, setLoading] = useState(false);
   const [error, setError] = useState<null | { message: string }>(null);
 
@@ -17,10 +18,14 @@ export function useAuth() {
         headers: { "Content-Type": "application/json" },
         body: JSON.stringify({ email, password }),
       });
-      if (!res.ok) throw new Error((await res.json()).error || "Login fehlgeschlagen");
-      setUser(await res.json());
+      if (!res.ok) {
+        const j = await res.json().catch(() => ({}));
+        throw new Error(j.error || "Login fehlgeschlagen");
+      }
+      const dto: IUserProfileDTO = await res.json();
+      setUser(dto);
     } catch (e: any) {
-      setError({ message: e.message || "Unbekannter Fehler" });
+      setError({ message: e?.message || "Unbekannter Fehler" });
     } finally {
       setLoading(false);
     }
diff --git a/features/contribution/types/ContributionType.ts b/features/contribution/types/ContributionType.ts
index 98b18578..deb62f14 100644
--- a/features/contribution/types/ContributionType.ts
+++ b/features/contribution/types/ContributionType.ts
@@ -1,3 +1,6 @@
+// features/contribution/types/ContributionType.ts
+// Persistente Dom√§nen-Typen einer Contribution (DB/Transport)
+
 import { FactBoxEntry } from "./FactBoxEntry";
 import { GamificationStats } from "./GamificationStats";
 import { ModAction } from "../../common/types/ModAction";
@@ -5,35 +8,62 @@ import { QRCodeEntry } from "./QRCodeEntry";
 import { FeedReference } from "./FeedReference";
 import { PoliticalArea } from "./PoliticalArea";
 
-export type ContributionStatus = 'offen' | 'geschlossen' | 'review' | 'archiviert';
+export type ContributionStatus = "offen" | "geschlossen" | "review" | "archiviert";
 
 export interface Contribution {
   _id?: string;
-  authorIds: string[];                   // Haupt- & Co-Autoren (User-IDs)
+
+  // Autorenschaft
+  authorIds: string[]; // Haupt- & Co-Autoren (User-IDs)
+  roles: { [userId: string]: "autor" | "coautor" | "redaktion" | "kurator" | "gast" };
+
+  // Inhalte
   title: string;
   summary?: string;
   content: string;
   topicTags: string[];
+
+  // Kontext
   region: PoliticalArea;
   language: string;
+
+  // Medien
   media?: {
     image?: string;
     video?: string;
     externalLink?: string;
   };
+
+  // Meta
   createdAt?: string;
   updatedAt?: string;
   status: ContributionStatus;
-  roles: { [userId: string]: 'autor' | 'coautor' | 'redaktion' | 'kurator' | 'gast' };
+  version?: number;
+
+  // Beziehungen
   relatedContributionIds?: string[];
+  parentContributionId?: string;
+  organizationId?: string;
+
+  // Externe Quelle
   externalSource?: {
     name: string;
     url: string;
-    reviewStatus: 'gepr√ºft' | 'unbest√§tigt' | 'umstritten' | 'fehlt';
+    reviewStatus: "gepr√ºft" | "unbest√§tigt" | "umstritten" | "fehlt";
     tendency?: string;
   };
+
+  // Zusatzinfos
   factsBox?: FactBoxEntry[];
-  reportId?: string;
+  qrCodes?: QRCodeEntry[];
+  feedReferences?: FeedReference[];
+
+  // Moderation / Gamification
+  modLog?: ModAction[];
+  gamificationStats?: GamificationStats;
+
+  // Interaktion
+  commentsEnabled?: boolean;
   engagementStats: {
     votes: number;
     swipes: number;
@@ -42,19 +72,16 @@ export interface Contribution {
     shares: number;
     trending: boolean;
   };
-  gamificationStats?: GamificationStats;
-  modLog?: ModAction[];
-  feedReferences?: FeedReference[];
-  isInfoOnly?: boolean;
-  parentContributionId?: string;
-  commentsEnabled?: boolean;
-  politicalTendency?: string;                 // KI-/Redaktions-Tendenz
-  qrCodes?: QRCodeEntry[];
+
+  // Analyse / Statistik
   demographicStats?: { [key: string]: number };
   statementIds?: string[];
-  organizationId?: string;
+  politicalTendency?: string; // KI-/Redaktions-Tendenz
+
+  // Lifecycle
   archived?: boolean;
   deleted?: boolean;
-  version?: number;
+
+  // Flags
+  isInfoOnly?: boolean;
 }
- 
\ No newline at end of file
diff --git a/features/dashboard/components/admin/SidebarNavAdmin.ts b/features/dashboard/components/admin/SidebarNavAdmin.ts
deleted file mode 100644
index fd96be80..00000000
--- a/features/dashboard/components/admin/SidebarNavAdmin.ts
+++ /dev/null
@@ -1,32 +0,0 @@
-// apps/web/src/components/admin/SidebarNavAdmin.tsx
-"use client";
-
-import Link from "next/link";
-import { useUser } from "@features/user/context/UserContext";
-import { ADMIN_MODULES } from "@/app/admin/config/adminConfig";
-
-export default function SidebarNavAdmin() {
-  const { role, roleCompat } = useUser();
-
-  const visible = ADMIN_MODULES.filter((mod) => {
-    const roles = mod.roles ?? [];
-    return roles.includes(role) || roles.includes(roleCompat);
-  });
-
-  if (visible.length === 0) return null;
-
-  return (
-    <aside className="w-56 bg-white shadow flex flex-col gap-1 p-4 dark:bg-neutral-900">
-      <div className="mb-4 font-bold text-xl">Admin</div>
-      {visible.map((nav) => (
-        <Link
-          key={nav.href}
-          href={nav.href}
-          className="block px-3 py-2 rounded hover:bg-violet-100 text-gray-800 dark:text-neutral-100 dark:hover:bg-neutral-800"
-        >
-          {nav.label}
-        </Link>
-      ))}
-    </aside>
-  );
-}
diff --git a/features/dashboard/components/admin/SidebarNavAdmin.tsx b/features/dashboard/components/admin/SidebarNavAdmin.tsx
index c2cbbac9..414e297b 100644
--- a/features/dashboard/components/admin/SidebarNavAdmin.tsx
+++ b/features/dashboard/components/admin/SidebarNavAdmin.tsx
@@ -1,23 +1,40 @@
+// features/dashboard/components/admin/SidebarNavAdmin.tsx
+"use client";
+
 import Link from "next/link";
+import { usePathname } from "next/navigation";
+import clsx from "clsx";
+
+type NavItem = { href: string; label: string };
 
-const NAV = [
-  { href: "/admin/reports", label: "Reports" },
-  { href: "/admin/users", label: "Users" },
+const NAV: NavItem[] = [
+  { href: "/admin/overview", label: "√úbersicht" },
+  { href: "/admin/users", label: "Nutzer" },
+  { href: "/admin/content", label: "Inhalte" },
+  { href: "/admin/settings", label: "Einstellungen" },
 ];
 
 export default function SidebarNavAdmin() {
+  const pathname = usePathname();
+
   return (
-    <aside className="w-56 bg-white dark:bg-neutral-900 shadow flex flex-col gap-1 p-4">
+    <aside className="w-56 bg-white shadow flex flex-col gap-1 p-4 dark:bg-neutral-900">
       <div className="mb-4 font-bold text-xl">Admin</div>
-      {NAV.map((n) => (
-        <Link
-          key={n.href}
-          href={n.href}
-          className="block px-3 py-2 rounded hover:bg-violet-100 dark:text-neutral-100 dark:hover:bg-neutral-800"
-        >
-          {n.label}
-        </Link>
-      ))}
+      {NAV.map((nav) => {
+        const active = pathname?.startsWith(nav.href);
+        return (
+          <Link
+            key={nav.href}
+            href={nav.href}
+            className={clsx(
+              "block px-3 py-2 rounded text-gray-800 dark:text-neutral-100 hover:bg-violet-100 dark:hover:bg-neutral-800",
+              active && "font-semibold underline"
+            )}
+          >
+            {nav.label}
+          </Link>
+        );
+      })}
     </aside>
   );
 }
diff --git a/features/editor/api/ItemClient.ts b/features/editor/api/ItemClient.ts
index bb6f065e..6037970d 100644
--- a/features/editor/api/ItemClient.ts
+++ b/features/editor/api/ItemClient.ts
@@ -27,8 +27,8 @@ export async function deleteItem(id: string) {
 export async function publishItem(id: string) {
   return asJson<{ ok: true }>(await http(`/api/editor/items/${id}/publish`, { method: "POST" }));
 }
-export async function reorderAnswerOptions(orders: Array<{ id: string; order: number }>) {
-  return asJson<{ ok: true }>(await http(`/api/editor/items/reorder`, { method: "PATCH", json: { orders } }));
+export async function reorderAnswerOptions(sortOrders: Array<{ id: string; sortOrder: number }>) {
+  return asJson<{ ok: true }>(await http(`/api/editor/items/reorder`, { method: "PATCH", json: { sortOrders } }));
 }
 export async function searchRegions(q = "") {
   return asJson<Region[]>(await http(`/api/editor/regions?q=${encodeURIComponent(q)}`));
diff --git a/features/editor/api/ItemsClient.ts b/features/editor/api/ItemsClient.ts
index 6cf5589b..2c8c3f6b 100644
--- a/features/editor/api/ItemsClient.ts
+++ b/features/editor/api/ItemsClient.ts
@@ -38,8 +38,8 @@ export async function publishItem(id: string): Promise<{ ok: true }> {
   return asJson<{ ok: true }>(await http(`/api/editor/items/${encodeURIComponent(id)}/publish`, { method: "POST" }));
 }
 
-export async function reorderAnswerOptions(orders: Array<{ id: string; order: number }>): Promise<{ ok: true }> {
-  return asJson<{ ok: true }>(await http(`/api/editor/items/reorder`, { method: "PATCH", json: { orders } }));
+export async function reorderAnswerOptions(sortOrder: Array<{ id: string; sortOrder: number }>): Promise<{ ok: true }> {
+  return asJson<{ ok: true }>(await http(`/api/editor/items/reorder`, { method: "PATCH", json: { sortOrder } }));
 }
 
 export async function searchRegions(q = ""): Promise<Region[]> {
diff --git a/features/factcheck/components/UnitList.tsx b/features/factcheck/components/UnitList.tsx
index 47312347..119b6bb0 100644
--- a/features/factcheck/components/UnitList.tsx
+++ b/features/factcheck/components/UnitList.tsx
@@ -1,8 +1,15 @@
 // features/factcheck/components/UnitList.tsx
 import React from "react";
-import type { ExtractedUnit } from "@prisma/client";
 
-export function UnitList({ units }: { units: (ExtractedUnit & { claim?: { id: string; status: string }})[] }) {
+export type UnitListItem = {
+  id: string;
+  kind: string;
+  text: string;
+  confidence: number;
+  claim?: { id: string; status: string };
+};
+
+export function UnitList({ units }: { units: UnitListItem[] }) {
   return (
     <div className="space-y-3">
       {units.map((u) => (
diff --git a/features/ngo/components/EngagementStats.tsx b/features/ngo/components/EngagementStats.tsx
index ee9af9ac..5b3780bc 100644
--- a/features/ngo/components/EngagementStats.tsx
+++ b/features/ngo/components/EngagementStats.tsx
@@ -11,19 +11,19 @@ export interface EngagementPoint {
 
 export interface Segment {
   label: string;
-  value: number;     // absolute Anzahl
+  value: number; // absolute Anzahl
 }
 
 export interface EngagementStatsProps {
   periodLabel?: string; // z. B. "letzte 30 Tage"
   totals: {
     members: number;
-    contributions: number;   // Beitr√§ge/Statements/Votes summiert oder spezifisch ‚Äì dein Modell
+    contributions: number; // Beitr√§ge/Statements/Votes summiert oder spezifisch ‚Äì dein Modell
     activeThisMonth: number;
   };
   kpis?: Array<{ label: string; value: number; deltaPct?: number }>;
-  timeseries?: EngagementPoint[];  // f√ºr Sparkline
-  segments?: Segment[];            // Top-Segmente (z. B. NGOs, Regionen, Themen)
+  timeseries?: EngagementPoint[]; // f√ºr Sparkline
+  segments?: Segment[]; // Top-Segmente (z. B. NGOs, Regionen, Themen)
 }
 
 /** Zahl h√ºbsch formatiert */
@@ -40,9 +40,9 @@ function pf(p?: number) {
 
 /** Primitive Sparkline (inline SVG, ohne extra Lib) */
 function Sparkline({ data, height = 36 }: { data: EngagementPoint[]; height?: number }) {
-  const path = useMemo(() => {
-    if (!data || data.length < 2) return "";
-    const xs = data.map((d, i) => i);
+  const path = useMemo<null | { d: string; w: number; h: number }>(() => {
+    if (!data || data.length < 2) return null;
+    const xs = data.map((_, i) => i);
     const ys = data.map((d) => d.v);
     const minY = Math.min(...ys);
     const maxY = Math.max(...ys);
@@ -52,13 +52,11 @@ function Sparkline({ data, height = 36 }: { data: EngagementPoint[]; height?: nu
     const scaleX = (i: number) => (i / (data.length - 1)) * (w - 4) + 2;
     const scaleY = (v: number) => h - 2 - ((v - minY) / spanY) * (h - 4);
     let d = `M ${scaleX(xs[0])} ${scaleY(ys[0])}`;
-    for (let i = 1; i < data.length; i++) {
-      d += ` L ${scaleX(xs[i])} ${scaleY(ys[i])}`;
-    }
+    for (let i = 1; i < data.length; i++) d += ` L ${scaleX(xs[i])} ${scaleY(ys[i])}`;
     return { d, w, h };
   }, [data, height]);
 
-  if (!data || data.length < 2) {
+  if (!path) {
     return <div className="h-9 text-xs text-gray-400">keine Zeitreihe</div>;
   }
 
diff --git a/features/organization/components/OrgDashboard.tsx b/features/organization/components/OrgDashboard.tsx
index 1b884c9d..001f9ed4 100644
--- a/features/organization/components/OrgDashboard.tsx
+++ b/features/organization/components/OrgDashboard.tsx
@@ -1,38 +1,109 @@
 // OrgDashboard.tsx
 
-import { Organization } from "../models/Organization";
-import { isOrgPremium, canAddMoreMembers } from "../utils/orgHelpers";
+import React from "react";
+// ‚¨áÔ∏è V2: default statt named; type-only, damit bei Klassen/Interfaces kein Runtime-Import entsteht
+import type Organization from "../models/Organization";
+import { isOrgPremium, canAddMoreMembers } from "../utils/orgHelper";
 
 interface OrgDashboardProps {
   org: Organization | null;
 }
 
+// Hilfstyp: Element-Typ aus Organization["members"], ohne Annahmen √ºber ein externes Interface
+type OrgMember = NonNullable<Organization> extends { members: infer M }
+  ? M extends Array<infer T>
+    ? T
+    : never
+  : never;
+
 export default function OrgDashboard({ org }: OrgDashboardProps) {
-  if (!org) return <div>Keine Organisation ausgew√§hlt.</div>;
+  if (!org) {
+    return <div className="max-w-xl mx-auto my-8 p-6 bg-white shadow rounded-xl">Keine Organisation ausgew√§hlt.</div>;
+  }
+
+  const premium = isOrgPremium(org);
+  const allowInvite = canAddMoreMembers(org);
+  const members = Array.isArray(org.members) ? org.members : [];
 
   return (
     <div className="max-w-xl mx-auto my-8 p-6 bg-white shadow rounded-xl">
-      <h1 className="text-2xl font-bold">{org.name}</h1>
-      <div className="my-3">
-        Status: {org.verified ? "‚úÖ Verifiziert" : "‚ö†Ô∏è Nicht verifiziert"}<br />
-        Account: {isOrgPremium(org) ? "üåü Premium" : "Standard"}
-      </div>
-
-      <h2 className="text-lg font-semibold">Mitglieder</h2>
-      <ul className="list-disc ml-5">
-        {org.members.map((member, idx) => (
-          <li key={idx}>
-            {member.userId} ({member.subRole})
-          </li>
-        ))}
-      </ul>
-      {canAddMoreMembers(org) ? (
-        <button className="mt-4 bg-violet-500 text-white px-4 py-2 rounded">
-          Mitglied hinzuf√ºgen
-        </button>
-      ) : (
-        <p className="mt-4 text-red-500">Maximale Mitgliederzahl erreicht.</p>
-      )}
+      <header className="flex items-start justify-between gap-4">
+        <div>
+          <h1 className="text-2xl font-bold">{org.name}</h1>
+          <div className="mt-2 text-sm text-neutral-700 leading-6">
+            <div>
+              Status:{" "}
+              {org.verified ? (
+                <span className="inline-flex items-center gap-1 text-green-700">
+                  ‚úÖ <span>Verifiziert</span>
+                </span>
+              ) : (
+                <span className="inline-flex items-center gap-1 text-amber-700">
+                  ‚ö†Ô∏è <span>Nicht verifiziert</span>
+                </span>
+              )}
+            </div>
+            <div>
+              Account:{" "}
+              {premium ? (
+                <span className="inline-flex items-center gap-1 text-violet-700">
+                  üåü <span>Premium</span>
+                </span>
+              ) : (
+                <span>Standard</span>
+              )}
+            </div>
+          </div>
+        </div>
+
+        {/* (Optional) kleines Badge rechts */}
+        <div className="shrink-0">
+          <span
+            className={`px-2 py-1 rounded text-xs font-semibold border ${
+              premium ? "bg-violet-50 border-violet-200 text-violet-700" : "bg-neutral-50 border-neutral-200 text-neutral-700"
+            }`}
+            aria-label={premium ? "Premium-Organisation" : "Standard-Organisation"}
+          >
+            {premium ? "Premium" : "Standard"}
+          </span>
+        </div>
+      </header>
+
+      <section className="mt-5">
+        <h2 className="text-lg font-semibold">Mitglieder</h2>
+
+        {members.length === 0 ? (
+          <p className="mt-2 text-sm text-neutral-600">Noch keine Mitglieder.</p>
+        ) : (
+          <ul className="list-disc ml-5 mt-2">
+            {members.map((member: OrgMember, idx: number) => (
+              <li key={(member as any)?.userId ?? idx} className="text-sm">
+                {(member as any)?.userId ?? "unbekannt"}
+                {((member as any)?.subRole && (
+                  <span className="text-neutral-500"> ({(member as any).subRole})</span>
+                )) ||
+                  null}
+              </li>
+            ))}
+          </ul>
+        )}
+
+        {allowInvite ? (
+          <button
+            className="mt-4 bg-violet-600 hover:bg-violet-700 text-white px-4 py-2 rounded transition disabled:opacity-60"
+            type="button"
+            aria-label="Mitglied hinzuf√ºgen"
+            onClick={() => {
+              // TODO: Invite-Dialog √∂ffnen
+              alert("Mitglied hinzuf√ºgen (bald verf√ºgbar)");
+            }}
+          >
+            Mitglied hinzuf√ºgen
+          </button>
+        ) : (
+          <p className="mt-4 text-red-600 text-sm">Maximale Mitgliederzahl erreicht.</p>
+        )}
+      </section>
     </div>
   );
 }
diff --git a/features/report/components/MiniLineChart.tsx b/features/report/components/MiniLineChart.tsx
index 39053747..749d7b3a 100644
--- a/features/report/components/MiniLineChart.tsx
+++ b/features/report/components/MiniLineChart.tsx
@@ -1,21 +1,61 @@
-export default function MiniLineChart({ data, color = "#00B3A6" }) {
-    if (!data?.length) return null;
-    const max = Math.max(...data);
-    const points = data.map((v, i, arr) =>
-      [i * 28, 36 - ((v / max) * 32)]
-    );
-    return (
-      <svg width={112} height={38} viewBox="0 0 112 38" className="ml-1">
-        <polyline
-          fill="none"
-          stroke={color}
-          strokeWidth="3"
-          points={points.map(p => p.join(",")).join(" ")}
-        />
-        {points.map((p, i) => (
-          <circle key={i} cx={p[0]} cy={p[1]} r="2.5" fill={color} />
-        ))}
-      </svg>
-    );
-  }
-  
\ No newline at end of file
+// features/report/components/MiniLineChart.tsx
+"use client";
+import React, { useMemo } from "react";
+
+type Props = {
+  data: number[];
+  color?: string;
+  width?: number;   // CSS-Pixel (nur Anzeigegr√∂√üe)
+  height?: number;  // CSS-Pixel
+  className?: string;
+};
+
+export default function MiniLineChart({
+  data,
+  color = "#00B3A6",
+  width = 112,
+  height = 38,
+  className = "ml-1",
+}: Props) {
+  const series = (Array.isArray(data) ? data : []).filter(
+    (v) => typeof v === "number" && Number.isFinite(v)
+  );
+  if (series.length === 0) return null;
+
+  const points: [number, number][] = useMemo(() => {
+    const min = Math.min(...series);
+    const max = Math.max(...series);
+    const span = max - min || 1; // verhindert Division durch 0 bei konstanter Reihe
+    const len = Math.max(1, series.length - 1);
+
+    return series.map((v, i) => {
+      const x = (i / len) * 100;           // 0..100
+      const y = 100 - ((v - min) / span) * 100; // 0..100 (oben=0)
+      return [x, y];
+    });
+  }, [series]);
+
+  return (
+    <svg
+      viewBox="0 0 100 100"
+      preserveAspectRatio="none"
+      width={width}
+      height={height}
+      className={className}
+      role="img"
+      aria-label="Mini Trend Chart"
+    >
+      <polyline
+        points={points.map((p) => p.join(",")).join(" ")}
+        fill="none"
+        stroke={color}
+        strokeWidth={2}
+        strokeLinecap="round"
+        strokeLinejoin="round"
+      />
+      {points.map(([x, y], i) => (
+        <circle key={i} cx={x} cy={y} r={2} fill={color} />
+      ))}
+    </svg>
+  );
+}
diff --git a/features/report/components/ReportCard.tsx b/features/report/components/ReportCard.tsx
index 971a9c56..7f87a9e6 100644
--- a/features/report/components/ReportCard.tsx
+++ b/features/report/components/ReportCard.tsx
@@ -1,27 +1,165 @@
-// Finale Version 28. September 2025 
+// features/report/components/ReportCard.tsx
+// Finale Version 28. September 2025
 "use client";
-import React, { useState, useMemo } from "react";
-import CountryAccordion from "@features/vote/components/CountryAccordion";
-import VoteBar from "@features/vote/components/VoteBar";
-import MiniLineChart from "@features/report/components/MiniLineChart";
-import { getNationalFlag, getLanguageName } from "@features/stream/utils/nationalFlag";
-import VotingRuleBadge from "@features/vote/components/VotingRuleBadge";
-import { FiInfo, FiShare2, FiEdit3, FiFlag, FiBookmark, FiDownload, FiChevronDown, FiUser } from "react-icons/fi";
+
+import React, { useMemo, useState } from "react";
 import clsx from "clsx";
 import * as Tooltip from "@radix-ui/react-tooltip";
+import { FiBookmark, FiChevronDown, FiDownload, FiEdit3, FiFlag, FiInfo, FiShare2, FiUser } from "react-icons/fi";
 import html2canvas from "html2canvas";
 import jsPDF from "jspdf";
+
+import CountryAccordion from "../../vote/components/CountryAccordion";
+import VoteBar from "@features/vote/components/VoteBar";
+import MiniLineChart from "@features/report/components/MiniLineChart";
+import VotingRuleBadge from "@features/vote/components/VotingRuleBadge";
+import { getNationalFlag, getLanguageName } from "@features/stream/utils/nationalFlag";
 import { badgeColors } from "@ui/design/badgeColor";
 
-// -------- TrustBadge mit Tooltip --------
-function TrustBadge({ trustScore = 0, reviewedBy = [], reviewedAt }) {
-  const scorePercent = (trustScore * 100).toFixed(1);
-  const reviewedNames = Array.isArray(reviewedBy) && reviewedBy.length
-    ? reviewedBy.join(", ")
-    : "‚Äì";
-  const reviewedAtString = reviewedAt
-    ? new Date(reviewedAt).toLocaleDateString("de-DE")
-    : "‚Äì";
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ * Typen (V2 hinzugef√ºgt)
+ * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+export type Editor = {
+  id?: string;
+  name?: string;
+  avatarUrl?: string;
+  role?: string;
+  contactable?: boolean;
+};
+
+export type NewsItem = {
+  id?: string;
+  url?: string;
+  title?: string;
+  source?: string;
+  time?: string | number | Date;
+};
+
+export type Report = {
+  id?: string;
+  title?: string;
+  subtitle?: string;
+  translations?: Record<string, { title?: string; subtitle?: string; summary?: string; recommendation?: string }>;
+  analytics?: {
+    trendData?: number[];
+    votes?: Record<string, number>;
+    geoDistribution?: Record<string, unknown>;
+  };
+  trustScore?: number;
+  reviewedBy?: string[];
+  facts?: Array<{ text: string; source?: { url?: string; name?: string; trustScore?: number } }>;
+  topArguments?: { pro?: string[]; contra?: string[]; neutral?: string[] };
+  regionalVoices?: unknown[];
+  editors?: Editor[];
+  tags?: string[];
+  votingRule?: { description?: string } & Record<string, unknown>;
+  status?: "draft" | "published" | "archived";
+  updatedAt?: string | Date | null;
+  trailerUrl?: string;
+  imageUrl?: string;
+  regionScope?: Array<string | { name: string; iso: string }>;
+  languages?: string[];
+  createdAt?: string | Date;
+  author?: string;
+  impactLogic?: Array<{ type: string; description?: { einfach?: string; eloquent?: string } }>;
+  news?: NewsItem[];
+  modLog?: Array<{ action?: string; by?: string; date?: string | number | Date }>;
+  barrierescore?: number;
+  accessibilityStatus?: string;
+  aiAnnotations?: {
+    toxicity?: number | null;
+    sentiment?: string | null;
+    subjectAreas?: string[];
+  } | null;
+};
+
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ * Helpers
+ * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+function formatRelativeTime(time: string | number | Date): string {
+  const date = new Date(time);
+  if (Number.isNaN(date.getTime())) return "";
+  const diff = (Date.now() - date.getTime()) / 1000;
+  if (diff < 60) return "jetzt";
+  if (diff < 3600) return `${Math.floor(diff / 60)} Min.`;
+  if (diff < 86400) return `${Math.floor(diff / 3600)} Std.`;
+  return date.toLocaleDateString("de-DE");
+}
+
+async function exportAsPDFPNG(elementId: string, type: "pdf" | "png" = "pdf", fileName = "report") {
+  const el = document.getElementById(elementId);
+  if (!el) return;
+
+  // Canvas rendern (Skalierung f√ºr bessere Qualit√§t)
+  const canvas = await html2canvas(el, { scale: 2, useCORS: true, backgroundColor: "#ffffff" });
+
+  if (type === "png") {
+    const dataUrl = canvas.toDataURL("image/png");
+    const link = document.createElement("a");
+    link.href = dataUrl;
+    link.download = `${fileName}.png`;
+    link.click();
+    return;
+  }
+
+  // PDF (A4, Hochformat)
+  const imgData = canvas.toDataURL("image/jpeg", 0.95);
+  const pdf = new jsPDF({ unit: "pt", format: "a4", orientation: "portrait" });
+
+  const pageWidth = pdf.internal.pageSize.getWidth();
+  const pageHeight = pdf.internal.pageSize.getHeight();
+
+  const ratio = Math.min(pageWidth / canvas.width, pageHeight / canvas.height);
+  const imgW = canvas.width * ratio;
+  const imgH = canvas.height * ratio;
+
+  const x = (pageWidth - imgW) / 2;
+
+  if (imgH <= pageHeight) {
+    pdf.addImage(imgData, "JPEG", x, 0, imgW, imgH);
+  } else {
+    // Mehrseitig
+    let remaining = imgH;
+    let sY = 0;
+    const pageCanvas = document.createElement("canvas");
+    const pageCtx = pageCanvas.getContext("2d")!;
+    const sliceH = Math.floor(pageHeight / ratio);
+
+    pageCanvas.width = canvas.width;
+    pageCanvas.height = sliceH;
+
+    while (remaining > 0) {
+      pageCtx.clearRect(0, 0, pageCanvas.width, pageCanvas.height);
+      pageCtx.drawImage(canvas, 0, sY, canvas.width, sliceH, 0, 0, canvas.width, sliceH);
+      const pageImg = pageCanvas.toDataURL("image/jpeg", 0.95);
+      if (sY > 0) pdf.addPage();
+      pdf.addImage(pageImg, "JPEG", x, 0, imgW, pageHeight);
+      sY += sliceH;
+      remaining -= pageHeight;
+    }
+  }
+
+  pdf.save(`${fileName}.pdf`);
+}
+
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ * UI-Bausteine (typisiert)
+ * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+function TrustBadge({
+  trustScore = 0,
+  reviewedBy = [],
+  reviewedAt,
+}: {
+  trustScore?: number;
+  reviewedBy?: string[];
+  reviewedAt?: string | Date | null | undefined;
+}) {
+  const scorePercent = (Math.max(0, Math.min(1, trustScore)) * 100).toFixed(1);
+  const reviewedNames = Array.isArray(reviewedBy) && reviewedBy.length ? reviewedBy.join(", ") : "‚Äì";
+  const reviewedAtString = reviewedAt ? new Date(reviewedAt).toLocaleDateString("de-DE") : "‚Äì";
 
   return (
     <Tooltip.Root>
@@ -58,14 +196,13 @@ function TrustBadge({ trustScore = 0, reviewedBy = [], reviewedAt }) {
   );
 }
 
-// -------- RedaktionAccordion (Redakteure, Autoren, NGOs) --------
-function RedaktionAccordion({ editors, lang = "de" }) {
+function RedaktionAccordion({ editors, lang = "de" }: { editors?: Editor[]; lang?: string }) {
   const [open, setOpen] = useState(false);
   if (!editors?.length) return null;
   return (
     <div className="my-2">
       <button
-        onClick={() => setOpen(o => !o)}
+        onClick={() => setOpen((o) => !o)}
         className="flex items-center gap-1 text-indigo-700 text-sm font-bold mb-1 focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-400 rounded transition"
         aria-expanded={open}
         aria-controls="editor-list"
@@ -109,17 +246,15 @@ function RedaktionAccordion({ editors, lang = "de" }) {
   );
 }
 
-// -------- CommentsPanel (Diskussion/Forum) --------
-function CommentsPanel({ reportId }) {
+function CommentsPanel({ reportId }: { reportId?: string }) {
   return (
     <div className="bg-neutral-100 rounded-lg px-4 py-3 text-xs text-neutral-600">
-      Kommentarbereich (in Entwicklung) f√ºr Report: {reportId}
+      Kommentarbereich (in Entwicklung) f√ºr Report: {reportId || "‚Äî"}
     </div>
   );
 }
 
-// -------- NewsTrendWidget --------
-function NewsTrendWidget({ news }) {
+function NewsTrendWidget({ news }: { news?: NewsItem[] }) {
   if (!news?.length) return null;
   const MAX = 7;
   const displayNews = news.slice(0, MAX);
@@ -141,12 +276,8 @@ function NewsTrendWidget({ news }) {
               >
                 {n.title || "Ohne Titel"}
               </a>
-              {n.source && (
-                <span className="ml-1 bg-neutral-200 rounded px-1">{n.source}</span>
-              )}
-              {n.time && (
-                <span className="ml-1 text-neutral-500">{formatRelativeTime(n.time)}</span>
-              )}
+              {n.source && <span className="ml-1 bg-neutral-200 rounded px-1">{n.source}</span>}
+              {n.time && <span className="ml-1 text-neutral-500">{formatRelativeTime(n.time)}</span>}
             </span>
           </li>
         ))}
@@ -154,62 +285,69 @@ function NewsTrendWidget({ news }) {
     </aside>
   );
 }
-function formatRelativeTime(time) {
-  const date = new Date(time);
-  const diff = (Date.now() - date.getTime()) / 1000;
-  if (diff < 60) return "jetzt";
-  if (diff < 3600) return `${Math.floor(diff / 60)} Min.`;
-  if (diff < 86400) return `${Math.floor(diff / 3600)} Std.`;
-  return date.toLocaleDateString("de-DE");
-}
 
-// -------- Export als PDF/PNG --------
-async function exportAsPDFPNG(elementId, type = "pdf", fileName = "report") {
-  // Dummy, kann wie gehabt gebaut werden!
-}
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ * Hauptkomponente
+ * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+export default function ReportCard({
+  report,
+  userHash,
+  onEdit,
+  onShare,
+  onVote,
+  language = "de",
+}: {
+  report: Report;
+  userHash?: string;
+  onEdit?: (r: Report) => void;
+  onShare?: (r: Report) => void;
+  onVote?: (vote: "agree" | "neutral" | "disagree") => void;
+  language?: string;
+}) {
+  const translated = useMemo(() => report.translations?.[language] ?? {}, [report, language]);
+
+  const trend = report.analytics?.trendData && report.analytics.trendData.length > 0
+    ? report.analytics.trendData
+    : [7000, 7700, 8000, 8500, 8700];
 
-export default function ReportCard({ report, userHash, onEdit, onShare, onVote, language = "de" }) {
-  const translated = useMemo(
-    () => report.translations?.[language] ?? {},
-    [report, language]
-  );
-  const trend = report.analytics?.trendData || [7000, 7700, 8000, 8500, 8700];
   const trustScore = report.trustScore ?? 0;
-  const reviewedBy = report.reviewedBy || [];
-  const facts = report.facts || [];
-  const argumentsPro = report.topArguments?.pro || [];
-  const argumentsContra = report.topArguments?.contra || [];
-  const argumentsNeutral = report.topArguments?.neutral || [];
-  const regionalVoices = report.regionalVoices || [];
-  const editors = report.editors || [];
-  const tags = report.tags || [];
-  const votingRule = report.votingRule || {};
+  const reviewedBy = report.reviewedBy ?? [];
+  const facts = report.facts ?? [];
+  const argumentsPro = report.topArguments?.pro ?? [];
+  const argumentsContra = report.topArguments?.contra ?? [];
+  const argumentsNeutral = report.topArguments?.neutral ?? [];
+  const regionalVoices = report.regionalVoices ?? [];
+  const editors = report.editors ?? [];
+  const tags = report.tags ?? [];
+  const votingRule = report.votingRule ?? {};
   const exportId = `reportcard-${report.id || Math.random().toString(36).slice(2)}`;
-  const trending = trend.length > 1 && trend.at(-1) > trend.at(-2) * 1.07;
+  const trending = trend.length > 1 && (trend.at(-1)! > (trend.at(-2)! * 1.07));
   const barrierescore = report.barrierescore;
   const accessibilityStatus = report.accessibilityStatus;
-  const ai = report.aiAnnotations || {};
-  const hasAI = ai && (
-    ai.toxicity != null ||
-    ai.sentiment != null ||
-    (Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0)
+  const ai = report.aiAnnotations ?? null;
+  const hasAI =
+    !!ai &&
+    (ai.toxicity != null || ai.sentiment != null || (Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0));
+
+  const regions = (report.regionScope ?? []).map((r) =>
+    typeof r === "string" ? { name: r, iso: r } : r
   );
-  const regions = (report.regionScope || []).map(r => typeof r === "string" ? { name: r, iso: r } : r);
-  const languages = report.languages || ["de"];
+  const languages = report.languages ?? ["de"];
   const [lang, setLang] = useState(language);
 
   return (
     <div className="min-h-screen bg-neutral-50 pb-8">
-      {/* Sprachauswahl-Button (NEU) */}
+      {/* Sprachauswahl */}
       {languages.length > 1 && (
         <div className="flex justify-end max-w-2xl mx-auto py-2">
           <select
             value={lang}
-            onChange={e => setLang(e.target.value)}
+            onChange={(e) => setLang(e.target.value)}
             className="border rounded px-2 py-1 text-sm focus:outline-indigo-500"
             aria-label="Sprache w√§hlen"
           >
-            {languages.map(l => (
+            {languages.map((l) => (
               <option key={l} value={l}>
                 {getLanguageName(l, language)}
               </option>
@@ -238,7 +376,7 @@ export default function ReportCard({ report, userHash, onEdit, onShare, onVote,
             <span className="bg-violet-100 text-violet-700 px-3 py-1 rounded-full text-xs font-bold">üî• Trending</span>
           )}
           {trustScore > 0 && (
-            <TrustBadge trustScore={trustScore} reviewedBy={reviewedBy} reviewedAt={report.updatedAt} />
+            <TrustBadge trustScore={trustScore} reviewedBy={reviewedBy} reviewedAt={report.updatedAt ?? null} />
           )}
         </div>
 
@@ -247,145 +385,159 @@ export default function ReportCard({ report, userHash, onEdit, onShare, onVote,
           {report.trailerUrl ? (
             <video src={report.trailerUrl} controls className="w-full h-full object-cover rounded-t-2xl" />
           ) : report.imageUrl ? (
-            <img src={report.imageUrl} alt={translated.title || report.title} className="w-full h-full object-cover" />
+            <img
+              src={report.imageUrl}
+              alt={translated.title || report.title || "Report Bild"}
+              className="w-full h-full object-cover"
+            />
           ) : (
             <div className="text-5xl text-gray-200">üé¨</div>
           )}
         </div>
 
-        {/* HEADER: Tags, Titel, Subtitle, Region, Flags, Meta */}
+        {/* HEADER */}
         <div className="px-7 py-4 flex flex-col gap-1">
           <div className="flex flex-wrap gap-2 mb-1 overflow-x-auto scrollbar-hide">
-            {tags.map(tag => (
-              <span key={tag} className="px-3 py-1 bg-indigo-100 text-indigo-700 rounded-xl text-xs font-semibold">{tag}</span>
+            {tags.map((tag, i) => (
+              <span
+                key={`${tag}-${i}`}
+                className={clsx("px-3 py-1 rounded-xl text-xs font-semibold border", badgeColors[i % badgeColors.length])}
+              >
+                {tag}
+              </span>
             ))}
           </div>
-          {/* Farbverlauf-Titel */}
-          <h2 className="text-3xl font-bold mb-1 leading-snug"
+
+          <h2
+            className="text-3xl font-bold mb-1 leading-snug"
             style={{
               background: "linear-gradient(90deg, #2396F3 10%, #00B3A6 60%, #FF6F61 100%)",
               WebkitBackgroundClip: "text",
-              WebkitTextFillColor: "transparent"
-            }}>
+              WebkitTextFillColor: "transparent",
+            }}
+          >
             {translated.title || report.title}
           </h2>
+
           {report.subtitle && (
             <div className="text-md text-neutral-400 mb-1">{translated.subtitle || report.subtitle}</div>
           )}
+
           <div className="flex flex-wrap gap-2 items-center text-xs text-neutral-500 mb-1">
-            {regions.map(region =>
-              <span key={region.iso} className="flex items-center gap-1">
+            {regions.map((region) => (
+              <span key={`${region.iso}-${region.name}`} className="flex items-center gap-1">
                 <span className="text-lg">{getNationalFlag(region.iso)}</span>
                 {region.name}
               </span>
-            )}
-            {report.createdAt && <span>‚Ä¢ {new Date(report.createdAt).toLocaleDateString()}</span>}
+            ))}
+            {report.createdAt && <span>‚Ä¢ {new Date(report.createdAt).toLocaleDateString("de-DE")}</span>}
             {report.author && <span>‚Ä¢ {report.author}</span>}
           </div>
+
           <div className="flex items-center gap-2">
             <VotingRuleBadge votingRule={votingRule} />
-            {votingRule?.description && (
-              <div className="text-xs text-neutral-500">{votingRule.description}</div>
-            )}
+            {votingRule?.description && <div className="text-xs text-neutral-500">{votingRule.description}</div>}
             <MiniLineChart data={trend} color="#04bfbf" />
-            <span className="text-xs text-neutral-400">Trend: {trend.at(-1)} Stimmen {trending && <span className="text-turquoise font-semibold">‚Üë</span>}</span>
+            <span className="text-xs text-neutral-400">
+              Trend: {trend.at(-1)} Stimmen {trending && <span className="text-turquoise font-semibold">‚Üë</span>}
+            </span>
           </div>
+
           <div className="mt-2">
             <VoteBar votes={report.analytics?.votes || {}} />
           </div>
-          {/* LAND ‚Üí STADT-ACCORDION */}
+
           {report.analytics?.geoDistribution && Object.keys(report.analytics.geoDistribution).length > 0 && (
             <CountryAccordion countries={report.analytics.geoDistribution} userCountry="DE" />
           )}
         </div>
 
-        {/* Barrierefreiheits-Score und KI-Analyse */}
-        {(accessibilityStatus || typeof barrierescore === "number") && (
+        {/* Barrierefreiheit & KI */}
+        {(report.accessibilityStatus || typeof report.barrierescore === "number") && (
           <div className="flex gap-2 items-center text-xs mb-1 px-7" aria-label="Barrierefreiheit">
-            {accessibilityStatus && (
+            {report.accessibilityStatus && (
               <span className="rounded bg-green-50 text-green-700 px-2 py-1 font-bold">
-                Accessibility: {accessibilityStatus}
-              </span>
-            )}
-            {typeof barrierescore === "number" && (
-              <span>
-                Barrierefreiheits-Score: {barrierescore}/100
+                Accessibility: {report.accessibilityStatus}
               </span>
             )}
+            {typeof report.barrierescore === "number" && <span>Barrierefreiheits-Score: {report.barrierescore}/100</span>}
           </div>
         )}
         {hasAI && (
           <div className="text-xs text-gray-500 mt-1 px-7" aria-label="KI-Analyse">
-            {ai.toxicity != null && <>Toxizit√§t: {(ai.toxicity * 100).toFixed(2)} % </>}
-            {ai.sentiment != null && <>Stimmung: {ai.sentiment} </>}
-            {Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0 && (
-              <>Themen: {ai.subjectAreas.join(", ")}</>
-            )}
+            {ai?.toxicity != null && <>Toxizit√§t: {(ai.toxicity * 100).toFixed(2)} % </>}
+            {ai?.sentiment != null && <>Stimmung: {ai.sentiment} </>}
+            {Array.isArray(ai?.subjectAreas) && ai!.subjectAreas.length > 0 && <>Themen: {ai!.subjectAreas.join(", ")}</>}
           </div>
         )}
 
         {/* SUMMARY, IMPACT, RECOMMENDATION */}
         <div className="px-7 pb-4">
-          {translated.summary || report.summary
-            ? <div className="text-lg mb-2">{translated.summary || report.summary}</div>
-            : null}
+          {translated.summary || report.summary ? (
+            <div className="text-lg mb-2">{translated.summary || report.summary}</div>
+          ) : null}
+
           {translated.recommendation || report.recommendation ? (
             <div className="bg-turquoise/10 border-l-4 border-turquoise px-3 py-2 rounded mb-2 text-turquoise-900 font-bold">
               Empfehlung: {translated.recommendation || report.recommendation}
             </div>
           ) : null}
-          {report.impactLogic?.length > 0 && (
+
+          {report.impactLogic?.length ? (
             <div className="mb-2">
               <b>Impact:</b>
               <ul className="list-disc ml-6 text-sm mt-1">
-                {report.impactLogic.map((i, idx) =>
-                  <li key={idx}>{i.type}: {i.description?.einfach || i.description?.eloquent || ""}</li>
-                )}
+                {report.impactLogic.map((i, idx) => (
+                  <li key={idx}>
+                    {i.type}: {i.description?.einfach || i.description?.eloquent || ""}
+                  </li>
+                ))}
               </ul>
             </div>
-          )}
+          ) : null}
         </div>
 
-        {/* ARGUMENTE PRO/CONTRA/NEUTRAL */}
+        {/* ARGUMENTE */}
         <div className="px-7 pb-4 flex gap-3">
           <div className="flex-1">
             <b className="text-positive">Pro:</b>
-            <ul className="list-disc ml-5 text-sm">
-              {argumentsPro.map((a, i) => <li key={i}>{a}</li>)}
-            </ul>
+            <ul className="list-disc ml-5 text-sm">{argumentsPro.map((a, i) => <li key={i}>{a}</li>)}</ul>
           </div>
           <div className="flex-1">
             <b className="text-negative">Contra:</b>
-            <ul className="list-disc ml-5 text-sm">
-              {argumentsContra.map((a, i) => <li key={i}>{a}</li>)}
-            </ul>
+            <ul className="list-disc ml-5 text-sm">{argumentsContra.map((a, i) => <li key={i}>{a}</li>)}</ul>
           </div>
           {argumentsNeutral.length > 0 && (
             <div className="flex-1">
               <b className="text-warning">Neutral:</b>
-              <ul className="list-disc ml-5 text-sm">
-                {argumentsNeutral.map((a, i) => <li key={i}>{a}</li>)}
-              </ul>
+              <ul className="list-disc ml-5 text-sm">{argumentsNeutral.map((a, i) => <li key={i}>{a}</li>)}</ul>
             </div>
           )}
         </div>
 
-        {/* FAKTEN & STUDIEN */}
+        {/* FAKTEN */}
         {facts.length > 0 && (
           <div className="px-7 pb-4">
             <div className="font-bold text-sm mb-1">Fakten & Studien:</div>
             <ul className="list-disc ml-5 text-xs text-neutral-700">
-              {facts.map((f, i) =>
+              {facts.map((f, i) => (
                 <li key={i}>
                   {f.text}{" "}
                   {f.source?.url && (
-                    <a href={f.source.url} className="underline hover:text-coral" target="_blank" rel="noopener noreferrer">{f.source.name || f.source.url}</a>
+                    <a
+                      href={f.source.url}
+                      className="underline hover:text-coral"
+                      target="_blank"
+                      rel="noopener noreferrer"
+                    >
+                      {f.source.name || f.source.url}
+                    </a>
                   )}
-                  {f.source?.trustScore && (
+                  {typeof f.source?.trustScore === "number" && (
                     <span className="ml-2 text-[10px] text-neutral-500">TrustScore: {f.source.trustScore}</span>
                   )}
                 </li>
-              )}
+              ))}
             </ul>
           </div>
         )}
@@ -398,61 +550,89 @@ export default function ReportCard({ report, userHash, onEdit, onShare, onVote,
           </div>
         )}
 
-        {/* REDAKTIONSTEAM/EDITOR-ACCORDION */}
+        {/* REDAKTION */}
         <div className="px-7 pb-4">
           <RedaktionAccordion editors={editors} />
         </div>
 
-        {/* KOMMENTAR-/DISKUSSIONSBEREICH */}
+        {/* KOMMENTARE */}
         <div className="px-7 pb-3">
           <CommentsPanel reportId={report.id} />
         </div>
 
-        {/* ACTION-BAR (Share, Export, ...) */}
+        {/* ACTION BAR */}
         <div className="flex flex-wrap gap-2 px-7 pb-7">
-          <button className="flex-1 bg-coral text-white rounded-full py-3 font-bold text-base shadow-button"
-            onClick={() => alert("Jetzt abstimmen (Modal folgt)")}>
+          <button
+            className="flex-1 bg-coral text-white rounded-full py-3 font-bold text-base shadow-button"
+            onClick={() => (onVote ? onVote("agree") : alert("Jetzt abstimmen (Modal folgt)"))}
+          >
             Jetzt abstimmen
           </button>
-          <button className="bg-white border border-coral text-coral rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
-            onClick={() => onShare ? onShare(report) : (navigator.share && navigator.share({ title: report.title, url: window.location.href }))}>
+
+          <button
+            className="bg-white border border-coral text-coral rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
+            onClick={() =>
+              onShare
+                ? onShare(report)
+                : (navigator as any).share && (navigator as any).share({ title: report.title, url: window.location.href })
+            }
+          >
             <FiShare2 /> Teilen
           </button>
-          <button className="bg-white border border-indigo-200 text-indigo-700 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
-            onClick={() => onEdit ? onEdit(report) : alert("Bald verf√ºgbar: Statement erg√§nzen!")}>
+
+          <button
+            className="bg-white border border-indigo-200 text-indigo-700 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
+            onClick={() => (onEdit ? onEdit(report) : alert("Bald verf√ºgbar: Statement erg√§nzen!"))}
+          >
             <FiEdit3 /> Statement erg√§nzen
           </button>
-          <button className="bg-white border border-indigo-200 text-indigo-700 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
-            onClick={() => exportAsPDFPNG(exportId, "pdf")}>
+
+          <button
+            className="bg-white border border-indigo-200 text-indigo-700 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
+            onClick={() => exportAsPDFPNG(exportId, "pdf")}
+          >
             <FiDownload /> Export PDF
           </button>
-          <button className="bg-white border border-indigo-200 text-indigo-700 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
-            onClick={() => exportAsPDFPNG(exportId, "png")}>
+
+          <button
+            className="bg-white border border-indigo-200 text-indigo-700 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
+            onClick={() => exportAsPDFPNG(exportId, "png")}
+          >
             <FiDownload /> Export PNG
           </button>
-          <button className="bg-white border border-neutral-300 text-indigo-700 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button" title="Bookmark/Favorit (in Entwicklung)">
+
+          <button
+            className="bg-white border border-neutral-300 text-indigo-700 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
+            title="Bookmark/Favorit (in Entwicklung)"
+            type="button"
+          >
             <FiBookmark />
           </button>
-          <button className="bg-white border border-neutral-300 text-red-600 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button" title="Melden (in Entwicklung)">
+
+          <button
+            className="bg-white border border-neutral-300 text-red-600 rounded-full px-4 py-3 font-bold flex items-center gap-2 shadow-button"
+            title="Melden (in Entwicklung)"
+            type="button"
+          >
             <FiFlag />
           </button>
         </div>
 
-        {/* NEWS/TRENDS (unterhalb, abschlie√üend) */}
+        {/* NEWS/TRENDS */}
         <div className="px-7 pb-4">
           <NewsTrendWidget news={report.news} />
         </div>
 
-        {/* --- Auditlog/Modlog am Ende (optional) --- */}
+        {/* AUDITLOG */}
         {report.modLog && report.modLog.length > 0 && (
           <details className="px-7 pb-4 mt-2">
             <summary className="text-xs underline text-gray-500 cursor-pointer">Redaktions-/Auditlog anzeigen</summary>
             <ul className="text-xs pl-4">
-              {report.modLog.map((log, idx) =>
+              {report.modLog.map((log, idx) => (
                 <li key={idx}>
                   {log.action} ‚Äì {log.by} ‚Äì {log.date ? new Date(log.date).toLocaleString() : ""}
                 </li>
-              )}
+              ))}
             </ul>
           </details>
         )}
diff --git a/features/report/components/ReportList.tsx b/features/report/components/ReportList.tsx
index 96f74b47..22c4ba01 100644
--- a/features/report/components/ReportList.tsx
+++ b/features/report/components/ReportList.tsx
@@ -89,7 +89,7 @@ export default function ReportList({ initial, query = "", tag = "" }: Props) {
         <ul className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
           {items.map((r) => (
             <li key={r.id}>
-              <ReportCard report={r} />
+              <ReportCard report={r as any} />
             </li>
           ))}
         </ul>
diff --git a/features/report/components/ReportPage.tsx b/features/report/components/ReportPage.tsx
index 858fc35a..fd10acbe 100644
--- a/features/report/components/ReportPage.tsx
+++ b/features/report/components/ReportPage.tsx
@@ -1,26 +1,155 @@
-// features/report/components/ReportPage.tsx
-import "server-only";
-import ReportPageClient from "./ReportPageClient";
-import { listReports } from "../data/listReports";
-import demoReports from "../data/demoReports";
-
-/**
- * EINZIGE ReportPage:
- * - holt Server-Daten via DAL
- * - f√§llt auf Demo zur√ºck, wenn leer/Fehler oder USE_DEMO aktiv
- */
-export default async function ReportPage() {
-  const useDemo = process.env.NEXT_PUBLIC_USE_DEMO === "1";
-  let initial = [] as any[];
-
-  if (!useDemo) {
-    try {
-      initial = await listReports({ limit: 30, includeStatements: true });
-    } catch {
-      // still fallback to demo
-    }
-  }
-  if (!initial?.length) initial = demoReports as any[];
-
-  return <ReportPageClient initial={initial} />;
+"use client";
+
+import { useMemo, useState } from "react";
+import { FiSearch } from "react-icons/fi";
+import ReportCard from "./ReportCard";
+import LeftSidebar from "./LeftSidebar";
+import RightSidebar from "./RightSidebar";
+import StatementCard from "../../statement/components/StatementCard";
+import rawDemoStatements from "../../statement/data/statements_demo";
+
+type NewsItem = { id: string; title: string; url?: string; source?: string; at?: string | Date };
+
+type ReportE150 = {
+  id: string;
+  slug?: string;
+  title: string;
+  subtitle?: string;
+  summary?: string;
+  tags?: string[];
+  imageUrl?: string;
+  language?: string;
+  status?: string;
+  visibility?: string;
+  regionScope?: string[];
+  createdAt?: string | Date;
+  updatedAt?: string | Date;
+  statements?: string[];
+  news?: NewsItem[];
+  [key: string]: any;
+};
+
+type DemoS = { id: string } & Record<string, unknown>;
+const demoStatements = rawDemoStatements as DemoS[];
+
+export default function ReportPageClient({ initial }: { initial: ReportE150[] }) {
+  const [language, setLanguage] = useState("de");
+  const [search, setSearch] = useState("");
+  const [activeTheme, setActiveTheme] = useState<string | null>(null);
+  const [selectedReport, setSelectedReport] = useState<ReportE150 | null>(initial[0] ?? null);
+
+  const themes = useMemo(() => {
+    const s = new Set<string>();
+    for (const r of initial) (r.tags ?? []).forEach((t) => s.add(t));
+    return Array.from(s).sort((a, b) => a.localeCompare(b)).map((t) => ({ id: t, label: t }));
+  }, [initial]);
+
+  const filteredReports = useMemo(() => {
+    const q = search.trim().toLowerCase();
+    return initial.filter((r) => {
+      const matchesTag = !activeTheme || (r.tags ?? []).includes(activeTheme);
+      if (!q) return matchesTag;
+      const hay = [r.title ?? "", r.subtitle ?? "", r.summary ?? "", (r.tags ?? []).join(" ")].join(" ").toLowerCase();
+      return matchesTag && hay.includes(q);
+    });
+  }, [initial, search, activeTheme]);
+
+  const relatedStatements = useMemo(() => {
+    if (!selectedReport) return [];
+    const ids = Array.isArray(selectedReport.statements) ? selectedReport.statements : [];
+    return ids.length ? (demoStatements as any[]).filter((s) => ids.includes((s as any).id)) : [];
+  }, [selectedReport]);
+
+  const allNews = useMemo(() => selectedReport?.news || [], [selectedReport]);
+
+  return (
+    <div className="min-h-screen py-16 bg-neutral-50">
+      <div className="max-w-7xl mx-auto px-2 lg:px-6 flex flex-col lg:flex-row gap-6">
+        <aside className="hidden lg:block w-64 flex-shrink-0">
+          <LeftSidebar />
+        </aside>
+
+        <main className="flex-1 min-w-0 flex flex-col">
+          <div className="mb-6 flex flex-col md:flex-row gap-4 items-center">
+            <h1 className="font-bold text-3xl text-indigo-800 flex-shrink-0">Reports & Analysen</h1>
+
+            <div className="relative flex-1 max-w-md w-full">
+              <FiSearch className="absolute left-3 top-3 text-neutral-400" />
+              <input
+                value={search}
+                onChange={(e) => setSearch(e.target.value)}
+                className="pl-10 pr-4 py-2 rounded-full border w-full border-neutral-300 shadow-sm"
+                placeholder="Suche Reports..."
+                aria-label="Reports durchsuchen"
+              />
+            </div>
+          </div>
+
+          {themes.length > 0 && (
+            <div className="flex overflow-x-auto gap-2 scrollbar-hide mb-6 pb-2">
+              <button
+                onClick={() => setActiveTheme(null)}
+                className={`text-sm px-4 py-1 rounded-full transition ${
+                  !activeTheme ? "bg-indigo-600 text-white" : "bg-neutral-100 text-neutral-700"
+                }`}
+                aria-pressed={!activeTheme}
+              >
+                Alle Themen
+              </button>
+              {themes.map(({ id, label }) => (
+                <button
+                  key={id}
+                  onClick={() => setActiveTheme((prev) => (prev === label ? null : label))}
+                  className={`text-sm px-4 py-1 rounded-full transition ${
+                    activeTheme === label ? "bg-indigo-600 text-white" : "bg-neutral-100 text-neutral-700"
+                  }`}
+                  aria-pressed={activeTheme === label}
+                >
+                  {label}
+                </button>
+              ))}
+            </div>
+          )}
+
+          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-10">
+            {filteredReports.map((report) => (
+              <div
+                key={report.id}
+                onClick={() => setSelectedReport(report)}
+                className={`cursor-pointer ${selectedReport?.id === report.id ? "ring-2 ring-indigo-400" : ""}`}
+                tabIndex={0}
+                aria-label={`Report: ${report.title}`}
+                onKeyDown={(e) => (e.key === "Enter" || e.key === " ") && setSelectedReport(report)}
+              >
+                {/* ReportCard exakt passende Props nicht bekannt ‚Üí compat cast */}
+                <ReportCard {...({ report, language } as any)} />
+              </div>
+            ))}
+            {filteredReports.length === 0 && (
+              <div className="text-sm text-neutral-500">
+                Keine Treffer{search ? ` f√ºr ‚Äû${search}‚Äú` : ""}{activeTheme ? ` (Thema: ${activeTheme})` : ""}.
+              </div>
+            )}
+          </div>
+
+          <section className="mt-8 max-w-4xl mx-auto space-y-3">
+            <h2 className="text-xl font-bold text-indigo-700 mb-2">
+              {selectedReport ? `Statements zu ‚Äû${selectedReport.title}‚Äú` : "Statements"}
+            </h2>
+            {selectedReport && relatedStatements.length > 0 ? (
+              relatedStatements.map((statement: any) => (
+                <StatementCard key={statement.id} statement={statement} language={language} />
+              ))
+            ) : (
+              <div className="italic text-neutral-500">Keine passenden Statements verf√ºgbar.</div>
+            )}
+          </section>
+        </main>
+
+        <aside className="hidden xl:block w-80 flex-shrink-0">
+          <RightSidebar news={allNews} />
+        </aside>
+      </div>
+    </div>
+  );
 }
diff --git a/features/report/components/ReportPageClient.tsx b/features/report/components/ReportPageClient.tsx
index 70f375a8..2d25e4f5 100644
--- a/features/report/components/ReportPageClient.tsx
+++ b/features/report/components/ReportPageClient.tsx
@@ -1,4 +1,3 @@
-// features/report/components/ReportPageClient.tsx
 "use client";
 
 import { useMemo, useState } from "react";
@@ -6,8 +5,10 @@ import { FiSearch } from "react-icons/fi";
 import ReportCard from "./ReportCard";
 import LeftSidebar from "./LeftSidebar";
 import RightSidebar from "./RightSidebar";
-import StatementCard from "@features/statement/components/StatementCard";
-import demoStatements from "../../statement/data/statements_demo";
+import StatementCard from "../../statement/components/StatementCard";
+import rawDemoStatements from "../../statement/data/statements_demo";
+
+type NewsItem = { id: string; title: string; url?: string; source?: string; at?: string | Date };
 
 type ReportE150 = {
   id: string;
@@ -23,35 +24,31 @@ type ReportE150 = {
   regionScope?: string[];
   createdAt?: string | Date;
   updatedAt?: string | Date;
-  statements?: string[]; // optional
-  // zus√§tzliche Felder sind erlaubt; ReportCard kann mehr anzeigen
+  statements?: string[];
+  news?: NewsItem[];
   [key: string]: any;
 };
 
+const demoStatements = rawDemoStatements as Array<{ id: string }> & Record<string, unknown>;
+
 export default function ReportPageClient({ initial }: { initial: ReportE150[] }) {
   const [language, setLanguage] = useState("de");
   const [search, setSearch] = useState("");
   const [activeTheme, setActiveTheme] = useState<string | null>(null);
   const [selectedReport, setSelectedReport] = useState<ReportE150 | null>(initial[0] ?? null);
 
-  // Themen dynamisch aus Tags der initialen Liste (Fallback: keine Chips)
   const themes = useMemo(() => {
     const s = new Set<string>();
-    for (const r of initial) (r.tags ?? []).forEach(t => s.add(t));
-    return Array.from(s).sort((a, b) => a.localeCompare(b)).map(t => ({ id: t, label: t }));
+    for (const r of initial) (r.tags ?? []).forEach((t) => s.add(t));
+    return Array.from(s).sort((a, b) => a.localeCompare(b)).map((t) => ({ id: t, label: t }));
   }, [initial]);
 
   const filteredReports = useMemo(() => {
     const q = search.trim().toLowerCase();
-    return initial.filter(r => {
+    return initial.filter((r) => {
       const matchesTag = !activeTheme || (r.tags ?? []).includes(activeTheme);
       if (!q) return matchesTag;
-      const hay = [
-        r.title ?? "",
-        r.subtitle ?? "",
-        r.summary ?? "",
-        (r.tags ?? []).join(" "),
-      ].join(" ").toLowerCase();
+      const hay = [r.title ?? "", r.subtitle ?? "", r.summary ?? "", (r.tags ?? []).join(" ")].join(" ").toLowerCase();
       return matchesTag && hay.includes(q);
     });
   }, [initial, search, activeTheme]);
@@ -59,7 +56,7 @@ export default function ReportPageClient({ initial }: { initial: ReportE150[] })
   const relatedStatements = useMemo(() => {
     if (!selectedReport) return [];
     const ids = Array.isArray(selectedReport.statements) ? selectedReport.statements : [];
-    return ids.length ? demoStatements.filter(s => ids.includes(s.id)) : [];
+    return ids.length ? (demoStatements as any[]).filter((s) => ids.includes((s as any).id)) : [];
   }, [selectedReport]);
 
   const allNews = useMemo(() => selectedReport?.news || [], [selectedReport]);
@@ -72,11 +69,8 @@ export default function ReportPageClient({ initial }: { initial: ReportE150[] })
         </aside>
 
         <main className="flex-1 min-w-0 flex flex-col">
-          {/* Header: Suche */}
           <div className="mb-6 flex flex-col md:flex-row gap-4 items-center">
-            <h1 className="font-bold text-3xl text-indigo-800 flex-shrink-0">
-              Reports & Analysen
-            </h1>
+            <h1 className="font-bold text-3xl text-indigo-800 flex-shrink-0">Reports & Analysen</h1>
 
             <div className="relative flex-1 max-w-md w-full">
               <FiSearch className="absolute left-3 top-3 text-neutral-400" />
@@ -90,7 +84,6 @@ export default function ReportPageClient({ initial }: { initial: ReportE150[] })
             </div>
           </div>
 
-          {/* Themen-Chips */}
           {themes.length > 0 && (
             <div className="flex overflow-x-auto gap-2 scrollbar-hide mb-6 pb-2">
               <button
@@ -105,7 +98,7 @@ export default function ReportPageClient({ initial }: { initial: ReportE150[] })
               {themes.map(({ id, label }) => (
                 <button
                   key={id}
-                  onClick={() => setActiveTheme(prev => (prev === label ? null : label))}
+                  onClick={() => setActiveTheme((prev) => (prev === label ? null : label))}
                   className={`text-sm px-4 py-1 rounded-full transition ${
                     activeTheme === label ? "bg-indigo-600 text-white" : "bg-neutral-100 text-neutral-700"
                   }`}
@@ -117,7 +110,6 @@ export default function ReportPageClient({ initial }: { initial: ReportE150[] })
             </div>
           )}
 
-          {/* Grid */}
           <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-10">
             {filteredReports.map((report) => (
               <div
@@ -128,7 +120,8 @@ export default function ReportPageClient({ initial }: { initial: ReportE150[] })
                 aria-label={`Report: ${report.title}`}
                 onKeyDown={(e) => (e.key === "Enter" || e.key === " ") && setSelectedReport(report)}
               >
-                <ReportCard report={report as any} language={language} />
+                {/* ReportCard exakt passende Props nicht bekannt ‚Üí compat cast */}
+                <ReportCard {...({ report, language } as any)} />
               </div>
             ))}
             {filteredReports.length === 0 && (
@@ -138,14 +131,13 @@ export default function ReportPageClient({ initial }: { initial: ReportE150[] })
             )}
           </div>
 
-          {/* Statements */}
           <section className="mt-8 max-w-4xl mx-auto space-y-3">
             <h2 className="text-xl font-bold text-indigo-700 mb-2">
               {selectedReport ? `Statements zu ‚Äû${selectedReport.title}‚Äú` : "Statements"}
             </h2>
             {selectedReport && relatedStatements.length > 0 ? (
-              relatedStatements.map((statement) => (
-                <StatementCard key={statement.id} statement={statement as any} language={language} />
+              relatedStatements.map((statement: any) => (
+                <StatementCard key={statement.id} statement={statement} language={language} />
               ))
             ) : (
               <div className="italic text-neutral-500">Keine passenden Statements verf√ºgbar.</div>
diff --git a/features/report/components/RightSidebar.tsx b/features/report/components/RightSidebar.tsx
index 7745b7ec..b647c49e 100644
--- a/features/report/components/RightSidebar.tsx
+++ b/features/report/components/RightSidebar.tsx
@@ -1,19 +1,65 @@
-export default function RightSidebar() {
+// features/report/components/RightSidebar.tsx
+"use client";
+
+import React from "react";
+import clsx from "clsx";
+
+export type NewsItem = {
+  id: string;
+  title: string;
+  url?: string;
+  source?: string;
+  at?: string | Date;
+};
+
+type Props = {
+  news?: NewsItem[];
+  className?: string;
+};
+
+export default function RightSidebar({ news = [], className }: Props) {
   return (
-    <aside className="flex flex-col gap-8 pl-4 sticky top-8 text-sm max-w-[16rem]">
-      <div>
-        <h4 className="font-bold text-neutral-700 mb-2">Aktuelle News & Trends</h4>
-        <ul>
-          <li>Migration: EU will Asylverfahren beschleunigen</li>
-          <li>UN-Bericht: Integration wirkt sich positiv aus</li>
-        </ul>
-      </div>
-      <div>
-        <h4 className="font-bold text-neutral-700 mb-2">Community-Trends</h4>
-        <div className="flex flex-wrap gap-2 mt-1">
-          <span className="bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-xs font-semibold shadow transition select-none">#Integration</span>
-          <span className="bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-xs font-semibold shadow transition select-none">#Asylverfahren</span>
+    <aside
+      className={clsx(
+        "bg-white border border-neutral-200 rounded-2xl shadow p-4 sm:p-5",
+        "flex flex-col gap-4",
+        className
+      )}
+      aria-label="Neuigkeiten & Hinweise"
+    >
+      <h3 className="font-bold text-neutral-800 text-lg">Neuigkeiten</h3>
+
+      {news.length === 0 && (
+        <div className="text-sm text-neutral-500">
+          Keine aktuellen Meldungen.
         </div>
+      )}
+
+      <ul className="space-y-3">
+        {news.map((n) => (
+          <li key={n.id} className="text-sm">
+            {n.url ? (
+              <a
+                href={n.url}
+                target="_blank"
+                rel="noopener noreferrer"
+                className="underline text-indigo-700"
+              >
+                {n.title}
+              </a>
+            ) : (
+              <span className="text-neutral-800">{n.title}</span>
+            )}
+            <div className="text-[11px] text-neutral-500">
+              {n.source ? `${n.source} ` : ""}
+              {n.at ? `‚Ä¢ ${new Date(n.at).toLocaleDateString()}` : ""}
+            </div>
+          </li>
+        ))}
+      </ul>
+
+      <div className="mt-2 text-[12px] text-neutral-500">
+        Kuratiert f√ºr dich ‚Äì basierend auf deinen Themen.
       </div>
     </aside>
   );
diff --git a/features/report/data/listReports.ts b/features/report/data/listReports.ts
index d2fcb995..538ffd13 100644
--- a/features/report/data/listReports.ts
+++ b/features/report/data/listReports.ts
@@ -1,6 +1,6 @@
 // features/report/data/listReports.ts
 import "server-only";
-import { prisma } from "@core/db/prisma"; // ‚úÖ statt "@/lib/prisma"
+import { prisma } from "@db-core";
 
 export type ListReportsOptions = {
   forUserId?: string;
diff --git a/features/statement/components/StatementCard.tsx b/features/statement/components/StatementCard.tsx
index 67b67427..186f599a 100644
--- a/features/statement/components/StatementCard.tsx
+++ b/features/statement/components/StatementCard.tsx
@@ -1,18 +1,63 @@
-// Finale Version 04.August 2025 
-"use client";
+// features/statement/components/StatementCard.tsx
 "use client";
+
 import React, { useState, useMemo } from "react";
 import clsx from "clsx";
-import VoteBar from "@features/vote/components/VoteBar";
-import { VoteButton } from "@features/vote/components/VoteButton";
-import { UserVoteBar } from "@features/vote/components/UserVoteBar";
-import VotingRuleBadge from "@features/vote/components/VotingRuleBadge";
-import { getNationalFlag } from "@features/stream/utils/nationalFlag";
+import VoteBar from "../../vote/components/VoteBar";
+import VoteButtons from "../../vote/components/VoteButton";
+import type { VotingRule } from "../../contribution/types/VotingRule";
+import VotingRuleBadge from "../../vote/components/VotingRuleBadge";
+import { getNationalFlag } from "../../stream/utils/nationalFlag";
 import { FiFlag } from "react-icons/fi";
-import MiniLineChart from "@features/report/components/MiniLineChart";
-import { badgeColors } from "@ui/design/badgeColor";
+import MiniLineChart from "../../report/components/MiniLineChart";
+
+// --------- Minimale Typen, nur Felder die wir verwenden ----------
+type Region = { iso?: string; nuts1?: string; name: string };
+type Source = { name?: string; url?: string; trustScore?: number };
+type Fact = string | { text: string; source?: Source };
+
+type Impact = { type: string; description: { einfach?: string; eloquent?: string } };
+
+type MediaItem = string | { src: string; alt?: string };
+
+type AIAnn = { toxicity?: number; sentiment?: string; subjectAreas?: string[] };
+
+type HistoryItem = { action: string; by: string; at: string };
 
-function ImpactList({ impacts, showAll, onExpand }) {
+export type Statement = {
+  id: string;
+  title?: string;
+  statement?: string;
+  plainStatement?: string;
+  shortText?: string;
+  translations?: Record<string, { title?: string }>;
+  imageUrl?: string;
+  media?: MediaItem[];
+  tags?: string[];
+  category?: string;
+  regionScope?: Region[];
+  impactLogic?: Impact[];
+  trustScore?: number;
+  badge?: string;
+  status?: string;
+  votingRule?: VotingRule; // <‚Äî FIX: vorher unknown
+  trendData?: number[];
+  trend?: number[];
+  facts?: Fact[];
+  aiAnnotations?: AIAnn;
+  alternatives?: Array<{ text: string; impact?: string }>;
+  historyLog?: HistoryItem[];
+};
+
+function ImpactList({
+  impacts,
+  showAll,
+  onExpand,
+}: {
+  impacts: Impact[];
+  showAll: boolean;
+  onExpand: () => void;
+}) {
   const maxShow = 4;
   return (
     <div className="flex flex-wrap gap-2 mb-1" aria-label="Impact-Logik">
@@ -22,7 +67,8 @@ function ImpactList({ impacts, showAll, onExpand }) {
           className="text-xs bg-neutral-100 px-2 py-1 rounded-lg"
           title={impact.description.einfach || impact.description.eloquent}
         >
-          <b>{impact.type}:</b> {impact.description.einfach || impact.description.eloquent}
+          <b>{impact.type}:</b>{" "}
+          {impact.description.einfach || impact.description.eloquent}
         </span>
       ))}
       {impacts.length > maxShow && !showAll && (
@@ -38,40 +84,45 @@ function ImpactList({ impacts, showAll, onExpand }) {
   );
 }
 
-export default function StatementCard({ statement, userHash, onClick, language = "de" }) {
+export default function StatementCard({
+  statement,
+  userHash,
+  onClick,
+  language = "de",
+}: {
+  statement: Statement;
+  userHash?: string;
+  onClick?: (e: React.MouseEvent | React.KeyboardEvent) => void;
+  language?: string;
+}) {
   const [showAllImpacts, setShowAllImpacts] = useState(false);
   const [showAllAlts, setShowAllAlts] = useState(false);
 
-  // Internationalisierung
   const translated = useMemo(
     () => statement.translations?.[language] ?? {},
     [statement, language]
   );
   const plainStatement = statement.plainStatement || statement.statement;
-  const media = statement.media || (statement.imageUrl ? [statement.imageUrl] : []);
-  const regionScope = statement.regionScope || [];
+  const media: MediaItem[] = statement.media || (statement.imageUrl ? [statement.imageUrl] : []);
+  const regionScope: Region[] = statement.regionScope || [];
   const hasImpact = Array.isArray(statement.impactLogic) && statement.impactLogic.length > 0;
-  const hasAlternatives = Array.isArray(statement.alternatives) && statement.alternatives.length > 0;
+  const hasAlternatives =
+    Array.isArray(statement.alternatives) && statement.alternatives.length > 0;
   const hasTrust = typeof statement.trustScore === "number" && statement.trustScore > 0;
   const trustLabel =
-    statement.trustScore >= 0.75
+    statement.trustScore && statement.trustScore >= 0.75
       ? "Sehr hoch"
-      : statement.trustScore >= 0.5
+      : statement.trustScore && statement.trustScore >= 0.5
       ? "Solide"
-      : statement.trustScore > 0.01
+      : statement.trustScore && statement.trustScore > 0.01
       ? "Diskussionsw√ºrdig"
       : "Nicht gepr√ºft";
   const ai = statement.aiAnnotations || {};
-  const barrierescore = statement.barrierescore;
-  const accessibilityStatus = statement.accessibilityStatus;
-  const hasAI = ai &&
-    (ai.toxicity != null ||
-     ai.sentiment != null ||
-     (Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0));
+  const barrierescore = (statement as any).barrierescore as number | undefined;
+  const accessibilityStatus = (statement as any).accessibilityStatus as string | undefined;
   const trend = statement.trendData || statement.trend || null;
   const history = statement.historyLog;
 
-  // Card-ID f√ºr ARIA/Label
   const cardId = `statement-card-${statement.id}`;
 
   return (
@@ -84,7 +135,7 @@ export default function StatementCard({ statement, userHash, onClick, language =
         "transition-shadow focus:ring-2 focus:ring-indigo-400 hover:shadow-lg"
       )}
       onClick={onClick}
-      onKeyDown={e => {
+      onKeyDown={(e) => {
         if (e.key === "Enter" || e.key === " ") onClick?.(e);
       }}
       role="group"
@@ -92,147 +143,180 @@ export default function StatementCard({ statement, userHash, onClick, language =
       {/* Status/Moderation */}
       <div className="absolute top-3 right-4 flex gap-2 z-10">
         {statement.status === "archived" && (
-          <span className="bg-gray-200 text-gray-600 px-3 py-1 rounded-full text-xs font-bold">Archiviert</span>
+          <span className="bg-gray-200 text-gray-600 px-3 py-1 rounded-full text-xs font-bold">
+            Archiviert
+          </span>
         )}
         {statement.status === "draft" && (
-          <span className="bg-yellow-100 text-yellow-900 px-3 py-1 rounded-full text-xs font-bold">Entwurf</span>
+          <span className="bg-yellow-100 text-yellow-900 px-3 py-1 rounded-full text-xs font-bold">
+            Entwurf
+          </span>
         )}
         {statement.badge && statement.badge !== "none" && (
-          <span className="bg-turquoise text-white px-3 py-1 rounded-full text-xs font-bold">{statement.badge}</span>
+          <span className="bg-turquoise text-white px-3 py-1 rounded-full text-xs font-bold">
+            {statement.badge}
+          </span>
         )}
       </div>
 
-      {/* Titel mit Farbverlauf */}
+      {/* Titel */}
       <header className="flex items-center gap-2 mb-1">
         <span aria-hidden="true" className="text-xl">üí°</span>
         <h2
           id={`${cardId}-title`}
           className="font-bold text-base sm:text-lg leading-tight truncate"
           style={{
-            background: "linear-gradient(90deg, #2396F3 10%, #00B3A6 60%, #FF6F61 100%)",
+            background:
+              "linear-gradient(90deg, #2396F3 10%, #00B3A6 60%, #FF6F61 100%)",
             WebkitBackgroundClip: "text",
-            WebkitTextFillColor: "transparent"
+            WebkitTextFillColor: "transparent",
           }}
         >
           {translated.title || statement.title}
         </h2>
-        {statement.votingRule && <VotingRuleBadge votingRule={statement.votingRule} />}
+        {statement.votingRule && (
+          <VotingRuleBadge votingRule={statement.votingRule} />
+        )}
       </header>
 
       {plainStatement !== statement.statement && (
         <div className="italic text-xs text-gray-500 mb-2">{plainStatement}</div>
       )}
 
-      {/* Kategorie, L√§nder/Regionen, Tags */}
+      {/* Kategorie, Regionen, Tags */}
       <div className="flex flex-wrap gap-2 items-center mb-1">
-        <span className="uppercase text-[10px] font-semibold text-neutral-400">
-          {statement.category}
-        </span>
+        {statement.category && (
+          <span className="uppercase text-[10px] font-semibold text-neutral-400">
+            {statement.category}
+          </span>
+        )}
         {regionScope.map((r, i) => (
           <span key={i} className="text-lg" title={r.name}>
-            {getNationalFlag(r.iso || r.nuts1)}
+            {getNationalFlag((r.iso || r.nuts1 || "") as string)}
           </span>
         ))}
-        {Array.isArray(regionScope) && regionScope.length > 0 && (
+        {regionScope.length > 0 && (
           <span className="text-xs text-turquoise-700 truncate">
-            ‚Ä¢ {regionScope.map(r => r.name).join(", ")}
+            ‚Ä¢ {regionScope.map((r) => r.name).join(", ")}
           </span>
         )}
-        {Array.isArray(statement.tags) && statement.tags.map((tag, i) => (
-          <span
-            key={tag}
-            className={clsx(
-              "px-3 py-1 rounded-full text-xs font-bold border",
-              { 0: "border-coral text-coral",
-                1: "border-indigo-500 text-indigo-600",
-                2: "border-emerald-500 text-emerald-600",
-                3: "border-amber-500 text-amber-600" }[i % 4] || "border-neutral-300 text-neutral-600"
-            )}
-            aria-label={`Tag: ${tag}`}
-          >
-            {tag}
-          </span>
-        ))}
+        {Array.isArray(statement.tags) &&
+          statement.tags.map((tag, i) => (
+            <span
+              key={tag}
+              className={clsx(
+                "px-3 py-1 rounded-full text-xs font-bold border",
+                {
+                  0: "border-coral text-coral",
+                  1: "border-indigo-500 text-indigo-600",
+                  2: "border-emerald-500 text-emerald-600",
+                  3: "border-amber-500 text-amber-600",
+                }[i % 4] || "border-neutral-300 text-neutral-600"
+              )}
+              aria-label={`Tag: ${tag}`}
+            >
+              {tag}
+            </span>
+          ))}
       </div>
 
-      {/* Haupttext & Kontext */}
+      {/* Haupttext */}
       <div className="mb-2 text-base leading-relaxed" aria-label="Kernaussage">
-        {translated.shortText || statement.shortText || statement.statement}
+        {statement.shortText || statement.statement}
       </div>
 
-      {/* Fakten/Quellen */}
+      {/* Fakten */}
       {Array.isArray(statement.facts) && statement.facts.length > 0 && (
         <div className="mb-2">
           <b>Fakten:</b>
           <ul className="ml-4 list-disc text-xs">
-            {statement.facts.map((fact, idx) =>
+            {statement.facts.map((fact, idx) => (
               <li key={idx}>
-                {typeof fact === "string" ? fact : (
+                {typeof fact === "string" ? (
+                  fact
+                ) : (
                   <>
                     {fact.text}
                     {fact.source?.name && (
-                      <> ‚Äì <a
-                        href={fact.source.url}
-                        target="_blank"
-                        rel="noopener noreferrer"
-                        className="underline text-blue-700"
-                      >
-                        {fact.source.name}
-                      </a> ({fact.source.trustScore} %)
+                      <>
+                        {" "}
+                        ‚Äì{" "}
+                        <a
+                          href={fact.source.url}
+                          target="_blank"
+                          rel="noopener noreferrer"
+                          className="underline text-blue-700"
+                        >
+                          {fact.source.name}
+                        </a>{" "}
+                        {fact.source.trustScore != null &&
+                          `(${fact.source.trustScore} %)`}
                       </>
                     )}
                   </>
                 )}
               </li>
-            )}
+            ))}
           </ul>
         </div>
       )}
 
-      {/* Impact/Top-Argumente */}
+      {/* Impact */}
       {hasImpact && (
         <ImpactList
-          impacts={statement.impactLogic}
+          impacts={statement.impactLogic!}
           showAll={showAllImpacts}
           onExpand={() => setShowAllImpacts(true)}
         />
       )}
 
-      {/* Trends/MiniChart */}
-      {trend && (
+      {/* Trend */}
+      {Array.isArray(trend) && trend.length > 0 && (
         <div className="my-2 w-full" aria-label="Abstimmungstrend">
           <MiniLineChart data={trend} />
-          <span className="text-xs text-neutral-400">Trend: {trend.slice(-1)[0]}</span>
+          <span className="text-xs text-neutral-400">
+            Trend: {trend.slice(-1)[0]}
+          </span>
         </div>
       )}
 
       {/* Media */}
       {Array.isArray(media) && media.length > 0 && (
         <div className="flex gap-2 mb-2">
-          {media.map((src, i) => (
-            <img
-              key={i}
-              src={typeof src === "string" ? src : src.src}
-              alt={typeof src === "string" ? translated.title || statement.title : (src.alt || translated.title || statement.title)}
-              className="w-20 h-14 object-cover rounded shadow"
-            />
-          ))}
+          {media.map((src, i) => {
+            const isStr = typeof src === "string";
+            const imgSrc = isStr ? (src as string) : (src as any).src;
+            const alt = isStr
+              ? translated.title || statement.title || ""
+              : (src as any).alt || translated.title || statement.title || "";
+            return (
+              <img
+                key={i}
+                src={imgSrc}
+                alt={alt}
+                className="w-20 h-14 object-cover rounded shadow"
+              />
+            );
+          })}
         </div>
       )}
 
-      {/* Abstimmung */}
+      {/* Voting */}
       <section aria-label="Abstimmungsbereich" className="flex flex-col gap-1">
         <VoteBar statementId={statement.id} />
-        <UserVoteBar statementId={statement.id} userHash={userHash} />
-        <VoteButton statementId={statement.id} userHash={userHash} />
+        <VoteBar statementId={statement.id} userHash={userHash} />
+        <VoteButtons statementId={statement.id} userHash={userHash} />
       </section>
-      
+
       {/* Alternativen */}
       {hasAlternatives && (
         <div className="mt-2">
           <b>Alternativen:</b>
           <ul className="list-disc ml-5 text-xs max-h-24 overflow-hidden">
-            {(showAllAlts ? statement.alternatives : statement.alternatives.slice(0, 3)).map((alt, idx) => (
+            {(showAllAlts
+              ? statement.alternatives!
+              : statement.alternatives!.slice(0, 3)
+            ).map((alt, idx) => (
               <li key={idx}>
                 {alt.text}
                 {alt.impact && (
@@ -241,7 +325,7 @@ export default function StatementCard({ statement, userHash, onClick, language =
               </li>
             ))}
           </ul>
-          {statement.alternatives.length > 3 && !showAllAlts && (
+          {statement.alternatives!.length > 3 && !showAllAlts && (
             <button
               onClick={() => setShowAllAlts(true)}
               className="text-xs underline text-indigo-700 mt-1"
@@ -253,10 +337,10 @@ export default function StatementCard({ statement, userHash, onClick, language =
         </div>
       )}
 
-      {/* KI/Annotations */}
-      {hasAI && (
+      {/* KI-Annotations */}
+      {ai && (
         <div className="text-xs text-gray-500 mt-1" aria-label="KI-Analyse">
-          {ai.toxicity != null && <>Toxizit√§t: {(ai.toxicity * 100).toFixed(2)}‚ÄØ% </>}
+          {ai.toxicity != null && <>Toxizit√§t: {(ai.toxicity * 100).toFixed(2)} % </>}
           {ai.sentiment != null && <>Stimmung: {ai.sentiment} </>}
           {Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0 && (
             <>Themen: {ai.subjectAreas.join(", ")}</>
@@ -274,15 +358,15 @@ export default function StatementCard({ statement, userHash, onClick, language =
         Alle Details & Diskussion anzeigen
       </a>
 
-      {/* TrustScore / Redaktion */}
-      {hasTrust && statement.trustScore != null && (
+      {/* TrustScore */}
+      {hasTrust && (
         <div className="mt-1 text-xs text-turquoise-700" aria-label="Vertrauensscore">
-          TrustScore: {(statement.trustScore * 100).toFixed(1)}%
+          TrustScore: {(statement.trustScore! * 100).toFixed(1)}%
           <span className="ml-2 text-neutral-500">{trustLabel}</span>
         </div>
       )}
 
-      {/* Accessibility / Barrierefreiheits-Score */}
+      {/* Accessibility */}
       {(accessibilityStatus || typeof barrierescore === "number") && (
         <div className="flex gap-2 items-center text-xs mb-1" aria-label="Barrierefreiheit">
           {accessibilityStatus && (
@@ -291,14 +375,12 @@ export default function StatementCard({ statement, userHash, onClick, language =
             </span>
           )}
           {typeof barrierescore === "number" && (
-            <span>
-              Barrierefreiheits-Score: {barrierescore}/100
-            </span>
+            <span>Barrierefreiheits-Score: {barrierescore}/100</span>
           )}
         </div>
       )}
 
-      {/* Melden / Review */}
+      {/* Melden */}
       <div className="flex gap-2 mt-2">
         <button
           className="bg-white border border-neutral-300 text-red-600 rounded-full px-4 py-2 font-bold flex items-center gap-2 shadow focus:outline-none focus:ring-2 focus:ring-red-300"
@@ -309,14 +391,18 @@ export default function StatementCard({ statement, userHash, onClick, language =
         </button>
       </div>
 
-      {/* History / Audit Log */}
+      {/* History */}
       {history && history.length > 0 && (
         <details className="mt-2">
-          <summary className="text-xs underline text-gray-500 cursor-pointer">√Ñnderungsverlauf anzeigen</summary>
+          <summary className="text-xs underline text-gray-500 cursor-pointer">
+            √Ñnderungsverlauf anzeigen
+          </summary>
           <ul className="text-xs pl-4">
-            {history.map((h, i) =>
-              <li key={i}>{h.action} ‚Äì {h.by} ‚Äì {h.at}</li>
-            )}
+            {history.map((h, i) => (
+              <li key={i}>
+                {h.action} ‚Äì {h.by} ‚Äì {h.at}
+              </li>
+            ))}
           </ul>
         </details>
       )}
diff --git a/features/statement/components/StatementForm.tsx b/features/statement/components/StatementForm.tsx
index 9ba8a4ad..c6b2798c 100644
--- a/features/statement/components/StatementForm.tsx
+++ b/features/statement/components/StatementForm.tsx
@@ -1,99 +1,205 @@
+// apps/web/src/components/StatementForm.tsx
 "use client";
-import { useState, useRef, useEffect } from "react";
-import { MAIN_CATEGORIES, REGIONS } from "./StatementList";
+
+import {
+  useState,
+  useRef,
+  useEffect,
+  type FormEvent,
+  type ChangeEvent,
+} from "react";
 import { FiPlus, FiX, FiCheckCircle, FiLoader } from "react-icons/fi";
 
-export default function StatementForm({ onSubmit, onCancel }) {
-  const [category, setCategory] = useState(MAIN_CATEGORIES[0]);
-  const [region, setRegion] = useState(REGIONS[1].value);
-  const [statement, setStatement] = useState("");
-  const [alternatives, setAlternatives] = useState([]);
-  const [alternative, setAlternative] = useState("");
+// ‚úÖ Import der Konstanten
+// Wenn deine Konstanten im monorepo unter `features/statement/constants/...` liegen,
+// nimm den Alias-Import unten (auskommentiert) und l√∂sche die relative Variante.
+import { MAIN_CATEGORIES, REGIONS } from "../constants/statementCategories";
+// import { MAIN_CATEGORIES, REGIONS } from "@features/statement/constants/statementCategories";
+
+type Option = { value: string; label: string };
+
+// Erzeuge Options-Arrays robust (funktioniert f√ºr string[] ODER {value,label}[])
+const CATEGORY_OPTIONS: Option[] = (MAIN_CATEGORIES as any[]).map((c: any) =>
+  typeof c === "string" ? { value: c, label: c } : c
+);
+const REGION_OPTIONS: Option[] = (REGIONS as any[]).map((r: any) =>
+  typeof r === "string" ? { value: r, label: r } : r
+);
+
+type Analysis =
+  | {
+      topics?: { name: string }[];
+      level?: string;
+      statements?: { text: string }[];
+      suggestions?: string[];
+      [k: string]: unknown;
+    }
+  | null;
+
+type Props = {
+  onSubmit?: () => void; // optionaler Callback nach Erfolg
+  onCancel?: () => void;
+};
+
+export default function StatementForm({ onSubmit, onCancel }: Props) {
+  const [category, setCategory] = useState<string>(
+    CATEGORY_OPTIONS[0]?.value ?? ""
+  );
+  const [region, setRegion] = useState<string>(
+    REGION_OPTIONS[0]?.value ?? ""
+  );
+  const [statement, setStatement] = useState<string>("");
+  const [alternatives, setAlternatives] = useState<string[]>([]);
+  const [alternative, setAlternative] = useState<string>("");
+
   const [analyzing, setAnalyzing] = useState(false);
   const [saving, setSaving] = useState(false);
-  const [analysis, setAnalysis] = useState(null);
-  const [error, setError] = useState("");
+  const [analysis, setAnalysis] = useState<Analysis>(null);
+  const [error, setError] = useState<string>("");
   const [success, setSuccess] = useState(false);
 
-  // Autofocus Statement
-  const statementRef = useRef(null);
-  useEffect(() => { statementRef.current?.focus(); }, []);
+  const statementRef = useRef<HTMLTextAreaElement | null>(null);
+  useEffect(() => {
+    statementRef.current?.focus();
+  }, []);
 
   async function handleAnalyze() {
+    if (!statement.trim()) return;
     setAnalyzing(true);
-    setError(""); setAnalysis(null);
+    setError("");
+    setAnalysis(null);
     try {
-      const res = await fetch("/api/contribution/analyze", {
+      // ‚¨áÔ∏è Korrekte Route (Plural)
+      const res = await fetch("/api/contributions/analyze", {
         method: "POST",
         headers: { "Content-Type": "application/json" },
         body: JSON.stringify({ text: statement, userContext: { region } }),
       });
-      const data = await res.json();
-      if (!data.success) throw new Error(data.message || "Analyse fehlgeschlagen.");
-      setAnalysis(data);
+      const data = (await res.json()) as
+        | ({ success?: boolean; message?: string } & Record<string, unknown>)
+        | undefined;
+      if (!res.ok || !data || (data as any).success === false) {
+        throw new Error(
+          (data as any)?.message || "Analyse fehlgeschlagen."
+        );
+      }
+      setAnalysis((data as unknown) as Analysis);
     } catch (e) {
-      setError(e.message || "Analyse fehlgeschlagen.");
+      setError(e instanceof Error ? e.message : "Analyse fehlgeschlagen.");
+    } finally {
+      setAnalyzing(false);
     }
-    setAnalyzing(false);
   }
 
-  async function handleSubmit(e) {
+  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
     e.preventDefault();
-    setError(""); setSuccess(false); setSaving(true);
+    setError("");
+    setSuccess(false);
+    setSaving(true);
     try {
+      const payload = {
+        title: statement.slice(0, 80) || "Neues Statement",
+        statement,
+        category,
+        regionScope: [{ name: region, type: "region" as const }],
+        alternatives: alternatives.map((a) => ({ text: a })),
+        analysis,
+      };
+
       const res = await fetch("/api/statements", {
         method: "POST",
         headers: { "Content-Type": "application/json" },
-        body: JSON.stringify({
-          title: statement.slice(0, 80) || "Neues Statement",
-          statement,
-          category,
-          regionScope: [{ name: region, type: "region" }],
-          alternatives: alternatives.map(a => ({ text: a })),
-          analysis
-        }),
+        body: JSON.stringify(payload),
       });
+
       if (!res.ok) {
-        const { error } = await res.json();
-        throw new Error(error || "Speichern fehlgeschlagen.");
+        const { error: errMsg } = (await res.json().catch(() => ({}))) as {
+          error?: string;
+        };
+        throw new Error(errMsg || "Speichern fehlgeschlagen.");
       }
+
       setSuccess(true);
-      setStatement(""); setAlternatives([]); setAlternative(""); setAnalysis(null);
+      setStatement("");
+      setAlternatives([]);
+      setAlternative("");
+      setAnalysis(null);
+      onSubmit?.();
     } catch (e) {
-      setError(e.message || "Fehler beim Speichern.");
+      setError(e instanceof Error ? e.message : "Fehler beim Speichern.");
+    } finally {
+      setSaving(false);
     }
-    setSaving(false);
   }
 
   function handleAddAlternative() {
-    if (alternative.trim()) {
-      setAlternatives(prev => [...prev, alternative.trim()]);
+    const trimmed = alternative.trim();
+    if (trimmed) {
+      setAlternatives((prev) => [...prev, trimmed]);
       setAlternative("");
     }
   }
-  function handleRemoveAlternative(idx) {
-    setAlternatives(prev => prev.filter((_, i) => i !== idx));
+
+  function handleRemoveAlternative(idx: number) {
+    setAlternatives((prev) => prev.filter((_, i) => i !== idx));
   }
 
   return (
-    <form onSubmit={handleSubmit} className="mx-auto mt-10 max-w-xl bg-white p-8 rounded-2xl shadow-2xl" aria-label="Neues Statement einreichen">
-      <h2 className="text-2xl mb-6 font-bold text-coral">Neues Statement einreichen</h2>
+    <form
+      onSubmit={handleSubmit}
+      className="mx-auto mt-10 max-w-xl bg-white p-8 rounded-2xl shadow-2xl"
+      aria-label="Neues Statement einreichen"
+    >
+      <h2 className="text-2xl mb-6 font-bold">Neues Statement einreichen</h2>
+
       {success && (
         <div className="bg-green-100 border border-green-300 text-green-700 px-4 py-2 rounded mb-3 flex gap-2 items-center">
-          <FiCheckCircle /> Erfolgreich gespeichert! <a href="/beitraege" className="underline">Zur √úbersicht</a>
+          <FiCheckCircle /> Erfolgreich gespeichert!{" "}
+          <a href="/beitraege" className="underline">
+            Zur √úbersicht
+          </a>
         </div>
       )}
+
       {error && (
-        <div className="bg-red-100 border border-red-300 text-red-700 px-4 py-2 rounded mb-3">{error}</div>
+        <div className="bg-red-100 border border-red-300 text-red-700 px-4 py-2 rounded mb-3">
+          {error}
+        </div>
       )}
+
+      {/* Kategorie */}
       <label className="font-bold">Thema / Kategorie</label>
-      <select className="block w-full mb-2 border rounded p-2" value={category} onChange={e => setCategory(e.target.value)}>
-        {MAIN_CATEGORIES.map(cat => <option key={cat}>{cat}</option>)}
+      <select
+        className="block w-full mb-2 border rounded p-2"
+        value={category}
+        onChange={(e: ChangeEvent<HTMLSelectElement>) =>
+          setCategory(e.target.value)
+        }
+      >
+        {CATEGORY_OPTIONS.map((cat) => (
+          <option key={cat.value} value={cat.value}>
+            {cat.label}
+          </option>
+        ))}
       </select>
+
+      {/* Region */}
       <label className="font-bold">Regionale Ebene</label>
-      <select className="block w-full mb-2 border rounded p-2" value={region} onChange={e => setRegion(e.target.value)}>
-        {REGIONS.map(r => <option key={r.value} value={r.value}>{r.label}</option>)}
+      <select
+        className="block w-full mb-2 border rounded p-2"
+        value={region}
+        onChange={(e: ChangeEvent<HTMLSelectElement>) =>
+          setRegion(e.target.value)
+        }
+      >
+        {REGION_OPTIONS.map((r) => (
+          <option key={r.value} value={r.value}>
+            {r.label}
+          </option>
+        ))}
       </select>
+
+      {/* Statement */}
       <label className="font-bold">Statement</label>
       <textarea
         className="w-full mb-2 border rounded p-2"
@@ -101,51 +207,106 @@ export default function StatementForm({ onSubmit, onCancel }) {
         maxLength={280}
         value={statement}
         ref={statementRef}
-        onChange={e => setStatement(e.target.value)}
+        onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
+          setStatement(e.target.value)
+        }
         placeholder="Statement eingeben"
         required
         aria-label="Statement"
       />
-      <div className="text-xs text-gray-400 text-right mb-2">{statement.length} / 280 Zeichen</div>
+      <div className="text-xs text-gray-400 text-right mb-2">
+        {statement.length} / 280 Zeichen
+      </div>
+
+      {/* Alternativen */}
       <label className="font-bold">Alternative(n)</label>
       <div className="flex gap-2 mb-2">
         <input
           className="flex-1 border rounded p-2"
           value={alternative}
-          onChange={e => setAlternative(e.target.value)}
+          onChange={(e: ChangeEvent<HTMLInputElement>) =>
+            setAlternative(e.target.value)
+          }
           placeholder="Kompromiss-/Alternativvorschlag"
         />
-        <button type="button" onClick={handleAddAlternative} className="bg-coral text-white px-3 py-1 rounded" disabled={!alternative.trim()}>
+        <button
+          type="button"
+          onClick={handleAddAlternative}
+          className="bg-indigo-600 text-white px-3 py-1 rounded disabled:opacity-50"
+          disabled={!alternative.trim()}
+          aria-label="Alternative hinzuf√ºgen"
+          title="Alternative hinzuf√ºgen"
+        >
           <FiPlus />
         </button>
       </div>
+
       <ul className="mb-4">
         {alternatives.map((alt, idx) => (
-          <li key={idx} className="text-xs flex gap-2 items-center">
+          <li key={`${alt}-${idx}`} className="text-xs flex gap-2 items-center">
             {alt}
-            <button type="button" className="text-red-400 text-xs" onClick={() => handleRemoveAlternative(idx)}><FiX /></button>
+            <button
+              type="button"
+              className="text-red-500 text-xs"
+              onClick={() => handleRemoveAlternative(idx)}
+              aria-label="Alternative entfernen"
+              title="Alternative entfernen"
+            >
+              <FiX />
+            </button>
           </li>
         ))}
       </ul>
+
+      {/* Actions */}
       <div className="flex gap-2 mb-4">
         <button
           type="button"
           onClick={handleAnalyze}
           className="bg-indigo-600 text-white px-4 py-2 rounded disabled:opacity-50"
-          disabled={!statement || analyzing}
+          disabled={!statement.trim() || analyzing}
         >
-          {analyzing ? <FiLoader className="animate-spin" /> : "GPT-Analyse anzeigen"}
+          {analyzing ? (
+            <FiLoader className="animate-spin" />
+          ) : (
+            "GPT-Analyse anzeigen"
+          )}
+        </button>
+        <button
+          type="submit"
+          className="bg-emerald-600 text-white px-4 py-2 rounded disabled:opacity-50"
+          disabled={saving}
+        >
+          {saving ? <FiLoader className="animate-spin" /> : "Speichern"}
+        </button>
+        <button
+          type="button"
+          onClick={onCancel}
+          className="bg-gray-200 px-4 py-2 rounded"
+        >
+          Abbrechen
         </button>
-        <button type="submit" className="bg-turquoise text-white px-4 py-2 rounded" disabled={saving}>{saving ? <FiLoader className="animate-spin" /> : "Speichern"}</button>
-        <button type="button" onClick={onCancel} className="bg-gray-200 px-4 py-2 rounded">Abbrechen</button>
       </div>
+
+      {/* Analyse-Box */}
       {analysis && (
         <div className="bg-gray-50 border rounded-xl p-4 text-sm mt-2">
           <div className="font-bold text-purple-700 mb-1">GPT-Analyse:</div>
-          <div><span className="font-semibold">Themen:</span> {analysis.topics?.map((t: any) => t.name).join(", ")}</div>
-          <div><span className="font-semibold">Ebene:</span> {analysis.level}</div>
-          <div><span className="font-semibold">Statements:</span> {analysis.statements?.map((s: any) => s.text).join(" | ")}</div>
-          <div><span className="font-semibold">Vorschl√§ge:</span> {analysis.suggestions?.join(" | ")}</div>
+          <div>
+            <span className="font-semibold">Themen:</span>{" "}
+            {analysis.topics?.map((t) => t.name).join(", ")}
+          </div>
+          <div>
+            <span className="font-semibold">Ebene:</span> {analysis.level}
+          </div>
+          <div>
+            <span className="font-semibold">Statements:</span>{" "}
+            {analysis.statements?.map((s) => s.text).join(" | ")}
+          </div>
+          <div>
+            <span className="font-semibold">Vorschl√§ge:</span>{" "}
+            {analysis.suggestions?.join(" | ")}
+          </div>
         </div>
       )}
     </form>
diff --git a/features/statement/components/StatementList.tsx b/features/statement/components/StatementList.tsx
index 6198e614..f6e3cc79 100644
--- a/features/statement/components/StatementList.tsx
+++ b/features/statement/components/StatementList.tsx
@@ -1,40 +1,32 @@
+// features/statement/components/StatementList.tsx
 "use client";
-import { useEffect, useState } from "react";
+import { useEffect, useState, ChangeEvent } from "react";
 import StatementForm from "./StatementForm";
-import { utils, writeFile, read } from "xlsx"; // npm i xlsx
+import { utils, writeFile, read } from "xlsx";
+
+type StatementRow = {
+  category: string; region: string; statement: string;
+  alternative?: string; analysis?: { topics?: { name: string }[] };
+};
 
 export default function StatementList() {
-  const [statements, setStatements] = useState([]);
+  const [statements, setStatements] = useState<StatementRow[]>([]);
   const [loading, setLoading] = useState(true);
-  const [editing, setEditing] = useState(null);
+  const [editing, setEditing] = useState<Partial<StatementRow> | null>(null);
 
   useEffect(() => {
     fetch("/api/statements")
       .then(res => res.json())
-      .then(data => setStatements(data))
+      .then((data: StatementRow[]) => setStatements(data))
       .finally(() => setLoading(false));
   }, []);
 
-  const handleFormSubmit = (data) => {
-    fetch("/api/statements", {
-      method: "POST",
-      headers: { "Content-Type": "application/json" },
-      body: JSON.stringify(data),
-    })
-      .then(res => res.json())
-      .then(newStmt => {
-        setStatements(prev => [newStmt, ...prev]);
-        setEditing(null);
-      });
-  };
-
-  // EXPORT
   function exportStatementsToXLSX() {
     const data = statements.map(s => ({
       Kategorie: s.category,
       Region: s.region,
       Statement: s.statement,
-      Alternative: s.alternative || "",
+      Alternative: s.alternative ?? "",
       ...(s.analysis && { GPT_Themen: s.analysis.topics?.map(t => t.name).join(", ") })
     }));
     const wb = utils.book_new();
@@ -43,7 +35,6 @@ export default function StatementList() {
     writeFile(wb, "statements_export.xlsx");
   }
 
-  // TEMPLATE
   function downloadTemplate() {
     const data = [
       { Kategorie: "Umwelt & Klima", Region: "National", Statement: "Hier ein Beispielstatement", Alternative: "" },
@@ -54,16 +45,16 @@ export default function StatementList() {
     writeFile(wb, "statement_template.xlsx");
   }
 
-  // IMPORT
-  function handleImport(e) {
+  function handleImport(e: ChangeEvent<HTMLInputElement>) {
     const file = e.target.files?.[0];
     if (!file) return;
     const reader = new FileReader();
     reader.onload = (evt) => {
-      const wb = read(evt.target.result, { type: "binary" });
+      const buf = evt.target?.result;
+      if (!buf) return;
+      const wb = read(buf, { type: "binary" });
       const ws = wb.Sheets[wb.SheetNames[0]];
-      const data = utils.sheet_to_json(ws);
-      // F√ºr echten Import per API:
+      const data = utils.sheet_to_json<{ Kategorie: string; Region: string; Statement: string; Alternative?: string }>(ws);
       Promise.all(
         data.map(row =>
           fetch("/api/statements", {
@@ -78,15 +69,13 @@ export default function StatementList() {
           })
         )
       ).then(() => {
-        // Refetch data
-        fetch("/api/statements")
-          .then(res => res.json())
-          .then(setStatements);
+        fetch("/api/statements").then(res => res.json()).then((d: StatementRow[]) => setStatements(d));
       });
     };
     reader.readAsBinaryString(file);
   }
 
+
   if (loading) return <div>L√§dt ...</div>;
 
   return (
diff --git a/features/statement/components/index.ts b/features/statement/components/index.ts
index 97162122..a43a130b 100644
--- a/features/statement/components/index.ts
+++ b/features/statement/components/index.ts
@@ -4,8 +4,8 @@ export { default as StatementDetailClient } from "./StatementDetailClient";
 export * from "./StatementDetailClient";
 export { default as StatementForm } from "./StatementForm";
 export * from "./StatementForm";
-export { default as StatementList } from "./StatementList";
-export * from "./StatementList";
+export { default as StatementList } from "../constants/statementCategories";
+export * from "../constants/statementCategories";
 export { default as StatementListDisplay } from "./StatementListDisplay";
 export * from "./StatementListDisplay";
 export { default as StatementMiniChart } from "./StatementMiniChart";
diff --git a/features/statement/constants/statementCategories.ts b/features/statement/constants/statementCategories.ts
index b0db8bed..5c105bc0 100644
--- a/features/statement/constants/statementCategories.ts
+++ b/features/statement/constants/statementCategories.ts
@@ -1,12 +1,23 @@
+// v1-Variante, aber typsicher & wiederverwendbar
+
 export const MAIN_CATEGORIES = [
-    "Klima", "Arbeit", "Bildung", "Digitalisierung", "Gesundheit", "Soziales", "Wirtschaft", "Verkehr", "Energie",
-    "Migration", "Recht", "Sicherheit", "Landwirtschaft", "Verbraucher", "Kultur",
-  ];
-  
-  export const REGIONS = [
-    { label: "Global", value: "global" },
-    { label: "National", value: "national" },
-    { label: "Regional", value: "regional" },
-    { label: "Lokal", value: "local" },
-  ];
-  
\ No newline at end of file
+  "Klima", "Arbeit", "Bildung", "Digitalisierung", "Gesundheit",
+  "Soziales", "Wirtschaft", "Verkehr", "Energie",
+  "Migration", "Recht", "Sicherheit", "Landwirtschaft",
+  "Verbraucher", "Kultur",
+] as const;
+
+export type MainCategory = typeof MAIN_CATEGORIES[number];
+
+export const REGIONS = [
+  { label: "Global",   value: "global"   },
+  { label: "National", value: "national" },
+  { label: "Regional", value: "regional" },
+  { label: "Lokal",    value: "local"    },
+] as const;
+
+export type RegionValue = typeof REGIONS[number]["value"];
+
+// N√ºtzliche Helfer (optional)
+export const MAIN_CATEGORY_OPTIONS = MAIN_CATEGORIES.map(v => ({ value: v, label: v }));
+export const REGION_OPTIONS = REGIONS; // alias
diff --git a/features/stream/data/streamData.ts b/features/stream/data/streamData.ts
index 522c71c4..bc61a148 100644
--- a/features/stream/data/streamData.ts
+++ b/features/stream/data/streamData.ts
@@ -1,402 +1,304 @@
-export interface StreamEntry {
+// features/stream/data/streamData.ts
+// E150 V2 ‚Äì robust + validiert + migration helpers
+
+import { z } from "zod";
+
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ IDs & Enums ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+export type Id<Kind extends string> = string & { __brand: Kind };
+
+/** ULID bevorzugt (URL/zeitfreundlich); Fallback auf randomUUID / Random */
+export async function generateId(): Promise<Id<"stream">> {
+  try {
+    const { ulid } = await import("ulid");
+    return ulid() as Id<"stream">;
+  } catch {
+    const rnd =
+      (globalThis as any)?.crypto?.randomUUID?.() ??
+      (await import("node:crypto")).randomUUID();
+    return rnd as Id<"stream">;
+  }
+}
+
+export const StreamStatus = ["live", "replay", "planned"] as const;
+export type StreamStatus = (typeof StreamStatus)[number];
+
+export const Visibility = ["public", "unlisted", "private"] as const;
+export type Visibility = (typeof Visibility)[number];
+
+export const StreamPlatform = ["youtube", "twitch", "vimeo", "livepeer", "custom"] as const;
+export type StreamPlatform = (typeof StreamPlatform)[number];
+
+export type StatementCounts = { agreed: number; rejected: number; unanswered: number };
+
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Haupttyp ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+export type StreamEntry = {
+  id: Id<"stream">;
+  version: 2;
+
+  slug: string;
+  title: string;
+  description?: string;
+  status: StreamStatus;
+
+  schedule: { startAt: string; endAt?: string; timezone?: string };
+
+  visibility: Visibility;
+  access?: {
+    loginRequired?: boolean;
+    memberOnly?: boolean;
+    geo?: string[]; // ISO-3166-1 alpha-2
+    minAge?: number;
+  };
+
+  locale: string; // BCP-47
+  region: { code: string; name: string };
+  topic: { key: string; label: string };
+
+  media: {
+    images: string[];
+    trailerUrl?: string;
+    streamUrl?: string;
+    postUrl?: string;
+    platform?: StreamPlatform;
+    platformId?: string;
+  };
+
+  stats: {
+    viewers: number;
+    supporter: number;
+    bookmarks?: number;
+  };
+
+  engagement: {
+    statements: StatementCounts;
+    bookmarked: boolean;
+    inviteSent: boolean;
+  };
+
+  tags: string[];
+  seo?: { summary?: string; keywords?: string[] };
+  i18n?: Record<string, { title?: string; description?: string; tags?: string[] }>;
+  moderation?: { locked?: boolean; flagged?: boolean; reason?: string };
+
+  createdAt: string;
+  updatedAt?: string;
+};
+
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Zod-Schema ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+export const StatementCountsSchema = z.object({
+  agreed: z.number().int().min(0),
+  rejected: z.number().int().min(0),
+  unanswered: z.number().int().min(0),
+});
+
+export const StreamEntrySchema = z.object({
+  id: z.string().min(10),
+  version: z.literal(2),
+  slug: z.string().min(1),
+  title: z.string().min(1),
+  description: z.string().optional(),
+  status: z.enum(StreamStatus),
+  schedule: z.object({
+    startAt: z.string().datetime(),
+    endAt: z.string().datetime().optional(),
+    timezone: z.string().optional(),
+  }),
+  visibility: z.enum(Visibility),
+  access: z
+    .object({
+      loginRequired: z.boolean().optional(),
+      memberOnly: z.boolean().optional(),
+      geo: z.array(z.string().length(2)).optional(),
+      minAge: z.number().int().min(0).optional(),
+    })
+    .optional(),
+  locale: z.string().min(2),
+  region: z.object({ code: z.string().min(2), name: z.string().min(1) }),
+  topic: z.object({ key: z.string().min(1), label: z.string().min(1) }),
+  media: z.object({
+    images: z.array(z.string().min(1)),
+    trailerUrl: z.string().url().optional(),
+    streamUrl: z.string().url().optional(),
+    postUrl: z.string().url().optional(),
+    platform: z.enum(StreamPlatform).optional(),
+    platformId: z.string().optional(),
+  }),
+  stats: z.object({
+    viewers: z.number().int().min(0),
+    supporter: z.number().int().min(0),
+    bookmarks: z.number().int().min(0).optional(),
+  }),
+  engagement: z.object({
+    statements: StatementCountsSchema,
+    bookmarked: z.boolean(),
+    inviteSent: z.boolean(),
+  }),
+  tags: z.array(z.string()).default([]),
+  seo: z
+    .object({
+      summary: z.string().optional(),
+      keywords: z.array(z.string()).optional(),
+    })
+    .optional(),
+  // explizit mit Key-Typ (kosmetisch; identisch zum impliziten string-Key)
+  i18n: z
+    .record(
+      z.string(),
+      z.object({
+        title: z.string().optional(),
+        description: z.string().optional(),
+        tags: z.array(z.string()).optional(),
+      })
+    )
+    .optional(),
+  moderation: z
+    .object({
+      locked: z.boolean().optional(),
+      flagged: z.boolean().optional(),
+      reason: z.string().optional(),
+    })
+    .optional(),
+  createdAt: z.string().datetime(),
+  updatedAt: z.string().datetime().optional(),
+});
+
+export type StreamEntryValidated = z.infer<typeof StreamEntrySchema>;
+
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helpers & Migration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+export function normalizeStatus(s: unknown): StreamStatus {
+  const x = String(s ?? "").trim().toLowerCase();
+  if (x.startsWith("live")) return "live";
+  if (["replay", "aufzeichnung", "recording"].includes(x)) return "replay";
+  if (["planned", "geplant", "upcoming"].includes(x)) return "planned";
+  return "planned";
+}
+
+export function toImages(v: unknown): string[] {
+  if (!v) return [];
+  if (Array.isArray(v)) return v.filter(Boolean);
+  return [String(v)];
+}
+
+export function ensureIso(date: unknown): string {
+  try {
+    const d = new Date(String(date));
+    if (isNaN(d.getTime())) throw new Error("invalid date");
+    return d.toISOString();
+  } catch {
+    return new Date().toISOString();
+  }
+}
+
+// V1 (dein altes Shape ‚Äì nur Felder, die wir brauchen)
+export type StreamEntryV1 = {
   id: string;
   title: string;
-  status: 'live' | 'replay' | 'planned';
-  date: string;
-  images: string[];
-  trailer?: string;
-  viewer: number; 
-  supporter: number;
+  slug?: string;
+  status: string; // "Live" | "Replay" | "Geplant" | ‚Ä¶
+  region?: string;
+  topic?: string;
   language: string;
-  tags: string[];
-  statements: number;
+  viewers?: number;
+  images?: string[];
+  image?: string; // Single image fallback
+  description?: string;
+  trailerUrl?: string;
+  supporter?: number;
+  statements?: { agreed: number; rejected: number; unanswered: number };
   bookmarked: boolean;
   inviteSent: boolean;
-  streamUrl: string;
-  postUrl: string;
+  date: string; // ISO
+  tags?: string[];
+  visibility?: string; // "public"‚Ä¶
+  streamUrl?: string;
+  postUrl?: string;
+};
+
+function inferRegion(codeOrName?: string): { code: string; name: string } {
+  if (!codeOrName) return { code: "UNK", name: "Unknown" };
+  return { code: codeOrName.length <= 5 ? codeOrName : "UNK", name: codeOrName };
 }
 
-export const streamData: StreamEntry[] = [
-  {
-    id: "81d858ca-13a9-4500-a4a8-639f754a8b72",
-    title: "Klima im Fokus ‚Äì London",
-    slug: "klima-london",
-    status: "Live",
-    region: "London",
-    topic: "Klima",
-    language: "en",
-    viewers: 1077,
-    images: ["/dummy/dummy5.jpg", "/dummy/dummy3.jpg"],
-    description: "Diskussion zu klima-Themen in London, mit Expert:innen und B√ºrger:innen im Austausch.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 102,
-    statements: { agreed: 1, rejected: 3, unanswered: 1 },
-    bookmarked: true,
-    inviteSent: true,
-    date: "2025-06-01T18:00:00Z",
-    tags: ["Umwelt", "Europa"],
-    visibility: "public"
-  },
-  {
-    id: "e24f5abc-7e3a-4359-be96-dfc2f35e56f3",
-    title: "Bildung im Fokus ‚Äì Delhi",
-    slug: "bildung-delhi",
-    status: "Live",
-    region: "Delhi",
-    topic: "Bildung",
-    language: "en",
-    viewers: 1098,
-    images: ["/dummy/dummy8.jpg", "/dummy/dummy3.jpg", "/dummy/dummy9.jpg","/dummy/dummy4.jpg"],
-    description: "Diskussion zu bildung-Themen in Delhi, mit Expert:innen und B√ºrger:innen im Austausch.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 137,
-    statements: { agreed: 3, rejected: 2, unanswered: 1 },
-    bookmarked: false,
-    inviteSent: true,
-    date: "2025-05-28T14:00:00Z",
-    tags: ["Bildung", "Asien"],
-    visibility: "public"
-  },
-  {
-    id: "3d5e4204-a8ca-4ba0-9b0a-2a3495082a63",
-    title: "Klima im Fokus ‚Äì NRW",
-    slug: "klima-nrw",
-    status: "Geplant",
-    region: "NRW",
-    topic: "Klima",
-    language: "de",
-    viewers: 1017,
-    image: "/dummy/dummy9.jpg",
-    description: "Diskussion zu klima-Themen in NRW, mit Expert:innen und B√ºrger:innen im Austausch.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 45,
-    statements: { agreed: 5, rejected: 2, unanswered: 1 },
-    bookmarked: true,
-    inviteSent: false,
-    date: "2025-06-05T19:30:00Z",
-    tags: ["Umwelt", "Deutschland"],
-    visibility: "public"
-  },
-  {
-    id: "e605d3a4-0c89-4747-907b-9583736bc805",
-    title: "Demokratie im Fokus ‚Äì √éle-de-France",
-    slug: "demokratie-√éle-de-france",
-    status: "Live",
-    region: "√éle-de-France",
-    topic: "Demokratie",
-    language: "fr",
-    viewers: 465,
-    image: "/dummy/dummy11.jpg",
-    description: "Diskussion zu demokratie-Themen in √éle-de-France, mit Expert:innen und B√ºrger:innen im Austausch.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 209,
-    statements: { agreed: 5, rejected: 1, unanswered: 1 },
-    bookmarked: true,
-    inviteSent: true,
-    date: "2025-06-02T17:00:00Z",
-    tags: ["Politik", "Europa"],
-    visibility: "public"
-  },
-  {
-    id: "f8aa3cbe-7598-44d6-9f66-6d4bf88f009b",
-    title: "Digitalisierung im Fokus ‚Äì Berlin",
-    slug: "digitalisierung-berlin",
-    status: "Geplant",
-    region: "Berlin",
-    topic: "Digitalisierung",
-    language: "de",
-    viewers: 1055,
-    image: "/dummy/dummy3.jpg",
-    description: "Diskussion zu digitalisierung-Themen in Berlin, mit Expert:innen und B√ºrger:innen im Austausch.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 13,
-    statements: { agreed: 0, rejected: 0, unanswered: 0 },
-    bookmarked: true,
-    inviteSent: true,
-    date: "2025-06-10T16:00:00Z",
-    tags: ["Digitalisierung", "Deutschland"],
-    visibility: "public"
-  },
-  {
-    id: "a4512dc7-f987-47d5-8bff-bfe3ae8be3a0",
-    title: "Digitalisierung im Fokus ‚Äì S√£o Paulo",
-    slug: "digitalisierung-sao-paulo",
-    status: "Replay",
-    region: "S√£o Paulo",
-    topic: "Digitalisierung",
-    language: "pt",
-    viewers: 842,
-    image: "/dummy/dummy12.jpg",
-    description: "Diskussion zu digitalisierung-Themen in S√£o Paulo, mit Expert:innen und B√ºrger:innen im Austausch.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 67,
-    statements: { agreed: 3, rejected: 2, unanswered: 0 },
-    bookmarked: false,
-    inviteSent: true,
-    date: "2025-05-25T21:00:00Z",
-    tags: ["Digitalisierung", "S√ºdamerika"],
-    visibility: "public"
-  },
-  {
-    id: "b234cdef-1234-4abc-8def-1234567890ab",
-    title: "Energiewende im Fokus ‚Äì M√ºnchen",
-    slug: "energiewende-muenchen",
-    status: "Live",
-    region: "M√ºnchen",
-    topic: "Energiewende",
-    language: "de",
-    viewers: 1322,
-    image: "/dummy/dummy7.jpg",
-    description: "Wie gelingt M√ºnchen der Umstieg auf erneuerbare Energien? Experten, Politik und B√ºrger diskutieren.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 88,
-    statements: { agreed: 2, rejected: 1, unanswered: 2 },
-    bookmarked: false,
-    inviteSent: true,
-    date: "2025-06-02T20:00:00Z",
-    tags: ["Energie", "Deutschland"],
-    visibility: "public"
-  },
-  {
-    id: "c345def1-2345-4bcd-9ef0-2345678901bc",
-    title: "Verkehrswende ‚Äì Amsterdam",
-    slug: "verkehr-amsterdam",
-    status: "Geplant",
-    region: "Amsterdam",
-    topic: "Verkehr",
-    language: "nl",
-    viewers: 900,
-    image: "/dummy/dummy8.jpg",
-    description: "Nachhaltige Mobilit√§t in Amsterdam: B√ºrger:innen und Stadtverwaltung im Dialog.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 54,
-    statements: { agreed: 1, rejected: 1, unanswered: 3 },
-    bookmarked: false,
-    inviteSent: false,
-    date: "2025-06-12T13:00:00Z",
-    tags: ["Mobilit√§t", "Europa"],
-    visibility: "public"
-  },
-  {
-    id: "d456ef12-3456-4cde-0f12-3456789012cd",
-    title: "Klima im Fokus ‚Äì Kapstadt",
-    slug: "klima-kapstadt",
-    status: "Replay",
-    region: "Kapstadt",
-    topic: "Klima",
-    language: "en",
-    viewers: 721,
-    image: "/dummy/dummy10.jpg",
-    description: "Kapstadt k√§mpft gegen Wasserknappheit. Wie hilft Klimaanpassung?",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 76,
-    statements: { agreed: 1, rejected: 2, unanswered: 2 },
-    bookmarked: true,
-    inviteSent: true,
-    date: "2025-05-20T17:30:00Z",
-    tags: ["Umwelt", "Afrika"],
-    visibility: "public"
-  },
-  {
-    id: "e567f123-4567-4def-1f23-4567890123de",
-    title: "Klimaneutralit√§t ‚Äì Paris",
-    slug: "klimaneutralitaet-paris",
-    status: "Geplant",
-    region: "Paris",
-    topic: "Klimaneutralit√§t",
-    language: "fr",
-    viewers: 1120,
-    image: "/dummy/dummy5.jpg",
-    description: "Frankreichs Hauptstadt diskutiert Ma√ünahmen f√ºr das Ziel der Klimaneutralit√§t.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 95,
-    statements: { agreed: 2, rejected: 2, unanswered: 1 },
-    bookmarked: true,
-    inviteSent: true,
-    date: "2025-06-15T19:00:00Z",
-    tags: ["Umwelt", "Europa"],
-    visibility: "public"
-  },
-  {
-    id: "f6780123-5678-4ef0-2f34-5678901234ef",
-    title: "Digitalisierung ‚Äì New York",
-    slug: "digitalisierung-new-york",
-    status: "Live",
-    region: "New York",
-    topic: "Digitalisierung",
-    language: "en",
-    viewers: 2001,
-    image: "/dummy/dummy3.jpg",
-    description: "Wie ver√§ndert Digitalisierung die Arbeitswelt in New York?",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 210,
-    statements: { agreed: 4, rejected: 1, unanswered: 0 },
-    bookmarked: false,
-    inviteSent: false,
-    date: "2025-06-02T15:00:00Z",
-    tags: ["Digitalisierung", "Nordamerika"],
-    visibility: "public"
-  },
-  {
-    id: "g7891234-6789-4f01-3f45-6789012345f0",
-    title: "Klimaanpassung ‚Äì Madrid",
-    slug: "klimaanpassung-madrid",
-    status: "Replay",
-    region: "Madrid",
-    topic: "Klimaanpassung",
-    language: "es",
-    viewers: 856,
-    image: "/dummy/dummy2.jpg",
-    description: "Wie sch√ºtzt sich Madrid vor den Folgen des Klimawandels?",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 66,
-    statements: { agreed: 2, rejected: 1, unanswered: 2 },
-    bookmarked: false,
-    inviteSent: true,
-    date: "2025-05-27T18:00:00Z",
-    tags: ["Umwelt", "Europa"],
-    visibility: "public"
-  },
-  {
-    id: "h8902345-7890-4f12-4f56-7890123456a1",
-    title: "Bildung ‚Äì Nairobi",
-    slug: "bildung-nairobi",
-    status: "Geplant",
-    region: "Nairobi",
-    topic: "Bildung",
-    language: "en",
-    viewers: 540,
-    image: "/dummy/dummy6.jpg",
-    description: "Innovative Bildungsprojekte in Kenia: Chancen und Herausforderungen.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 28,
-    statements: { agreed: 1, rejected: 1, unanswered: 3 },
-    bookmarked: false,
-    inviteSent: false,
-    date: "2025-06-09T10:00:00Z",
-    tags: ["Bildung", "Afrika"],
-    visibility: "public"
-  },
-  {
-    id: "i9013456-8901-4f23-5f67-8901234567b2",
-    title: "Verkehr ‚Äì Z√ºrich",
-    slug: "verkehr-zuerich",
-    status: "Live",
-    region: "Z√ºrich",
-    topic: "Verkehr",
-    language: "de",
-    viewers: 678,
-    image: "/dummy/dummy8.jpg",
-    description: "Nachhaltige Verkehrskonzepte f√ºr die Schweiz.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 49,
-    statements: { agreed: 2, rejected: 0, unanswered: 3 },
-    bookmarked: true,
-    inviteSent: false,
-    date: "2025-06-02T14:30:00Z",
-    tags: ["Mobilit√§t", "Europa"],
-    visibility: "public"
-  },
-  {
-    id: "j0124567-9012-4f34-6f78-9012345678c3",
-    title: "Demokratie ‚Äì Wien",
-    slug: "demokratie-wien",
-    status: "Replay",
-    region: "Wien",
-    topic: "Demokratie",
-    language: "de",
-    viewers: 812,
-    image: "/dummy/dummy11.jpg",
-    description: "Demokratie und B√ºrgerbeteiligung in √ñsterreich.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 34,
-    statements: { agreed: 2, rejected: 2, unanswered: 1 },
-    bookmarked: false,
-    inviteSent: true,
-    date: "2025-05-30T19:00:00Z",
-    tags: ["Politik", "Europa"],
-    visibility: "public"
-  },
-  {
-    id: "k1235678-0123-4f45-7f89-0123456789d4",
-    title: "Energiewende ‚Äì Frankfurt",
-    slug: "energiewende-frankfurt",
-    status: "Geplant",
-    region: "Frankfurt",
-    topic: "Energiewende",
-    language: "de",
-    viewers: 998,
-    image: "/dummy/dummy2.jpg",
-    description: "Frankfurts Weg zur klimaneutralen Metropole.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 80,
-    statements: { agreed: 3, rejected: 1, unanswered: 1 },
-    bookmarked: true,
-    inviteSent: false,
-    date: "2025-06-14T18:30:00Z",
-    tags: ["Energie", "Deutschland"],
-    visibility: "public"
-  },
-  {
-    id: "l2346789-1234-4f56-8f90-1234567890e5",
-    title: "Digitalisierung ‚Äì Seoul",
-    slug: "digitalisierung-seoul",
-    status: "Live",
-    region: "Seoul",
-    topic: "Digitalisierung",
-    language: "ko",
-    viewers: 1200,
-    image: "/dummy/dummy4.jpg",
-    description: "Wie pr√§gt Digitalisierung die s√ºdkoreanische Gesellschaft?",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 110,
-    statements: { agreed: 3, rejected: 0, unanswered: 2 },
-    bookmarked: false,
-    inviteSent: true,
-    date: "2025-06-02T12:00:00Z",
-    tags: ["Digitalisierung", "Asien"],
-    visibility: "public"
-  },
-  {
-    id: "m3457890-2345-4f67-9fa1-2345678901f6",
-    title: "Klima ‚Äì Vancouver",
-    slug: "klima-vancouver",
-    status: "Replay",
-    region: "Vancouver",
-    topic: "Klima",
-    language: "en",
-    viewers: 700,
-    image: "/dummy/dummy5.jpg",
-    description: "Kanadas St√§dte im Klimawandel: Herausforderungen und L√∂sungen.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 60,
-    statements: { agreed: 2, rejected: 1, unanswered: 2 },
-    bookmarked: false,
-    inviteSent: false,
-    date: "2025-05-29T17:00:00Z",
-    tags: ["Umwelt", "Nordamerika"],
-    visibility: "public"
-  },
-  {
-    id: "n4568901-3456-4f78-afb2-3456789012g7",
-    title: "Bildung ‚Äì M√ºnchen",
-    slug: "bildung-muenchen",
-    status: "Geplant",
-    region: "M√ºnchen",
-    topic: "Bildung",
-    language: "de",
-    viewers: 850,
-    image: "/dummy/dummy6.jpg",
-    description: "Innovative Bildungskonzepte in M√ºnchen.",
-    trailerUrl: "/dummy/trailer-1.mp4",
-    supporter: 47,
-    statements: { agreed: 1, rejected: 1, unanswered: 3 },
-    bookmarked: true,
-    inviteSent: false,
-    date: "2025-06-11T15:00:00Z",
-    tags: ["Bildung", "Deutschland"],
-    visibility: "public"
-  }
-];
+function inferTopic(label?: string): { key: string; label: string } {
+  const key = (label ?? "misc").toLowerCase().replace(/\s+/g, "-");
+  return { key, label: label ?? "Misc" };
+}
+
+/**
+ * Migration V1 ‚Üí V2 (sync):
+ * Beibehaltung synchroner Signatur, damit bestehende Call-Sites nicht brechen.
+ * ID-Fallback nutzt Web Crypto, sonst einfache Random-ID (nur als Fallback).
+ */
+export function migrateFromV1(v1: StreamEntryV1): StreamEntry {
+  const statements = v1.statements ?? { agreed: 0, rejected: 0, unanswered: 0 };
+  const visibility = (v1.visibility ?? "public").toLowerCase() as Visibility;
+
+  const g: any = globalThis as any;
+  const fallbackId =
+    g?.crypto?.randomUUID?.() ??
+    ("id-" + Math.random().toString(36).slice(2));
+
+  return {
+    id: ((v1.id as Id<"stream">) ?? (fallbackId as Id<"stream">)),
+    version: 2,
+    slug:
+      v1.slug ??
+      v1.title
+        .toLowerCase()
+        .replace(/\s+/g, "-")
+        .replace(/[^a-z0-9\-]/g, ""),
+    title: v1.title,
+    description: v1.description,
+    status: normalizeStatus(v1.status),
+
+    schedule: { startAt: ensureIso(v1.date) },
+
+    visibility: (Visibility as readonly string[]).includes(visibility)
+      ? (visibility as Visibility)
+      : "public",
+    access: undefined,
+
+    locale: v1.language || "en",
+    region: inferRegion(v1.region),
+    topic: inferTopic(v1.topic),
+
+    media: {
+      images: v1.images?.length ? v1.images : toImages(v1.image),
+      trailerUrl: v1.trailerUrl,
+      streamUrl: v1.streamUrl,
+      postUrl: v1.postUrl,
+    },
+
+    stats: {
+      viewers: v1.viewers ?? 0,
+      supporter: v1.supporter ?? 0,
+    },
+
+    engagement: {
+      statements,
+      bookmarked: !!v1.bookmarked,
+      inviteSent: !!v1.inviteSent,
+    },
+
+    tags: v1.tags ?? [],
+
+    seo: v1.description ? { summary: v1.description.slice(0, 180) } : undefined,
+    i18n: undefined,
+    moderation: undefined,
+
+    createdAt: ensureIso(v1.date),
+    updatedAt: undefined,
+  };
+}
+
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Daten-Export ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
+
+// Wenn du bereits V1-Daten hast, hier importieren und migrieren:
+// import { streamData as streamDataV1 } from "./streamData.v1";
+// export const streamData: StreamEntry[] = streamDataV1.map(migrateFromV1);
 
-export default streamData;
+export const streamData: StreamEntry[] = [];
diff --git a/features/swipe/components/ImpactIndicator.tsx b/features/swipe/components/ImpactIndicator.tsx
index 08c5f2d1..cdedddef 100644
--- a/features/swipe/components/ImpactIndicator.tsx
+++ b/features/swipe/components/ImpactIndicator.tsx
@@ -1,8 +1,57 @@
-export default function ImpactIndicator({ impact }) {
-    return (
-      <div className="p-3 bg-indigo-50 border-l-4 border-indigo-500 rounded mb-2">
-        <strong className="capitalize">{impact.type}:</strong> {impact.description}
-      </div>
-    );
+// features/swipe/components/ImpactIndicator.ts
+
+import React from "react";
+
+/** V1: { type, description?: string | { einfach?, eloquent? } } */
+type ImpactV1 =
+  | { type: string; description?: string }
+  | { type: string; description?: { einfach?: string; eloquent?: string } };
+
+/** V2: nur Text-Payload, ohne type */
+type ImpactV2 = { einfach?: string; eloquent?: string };
+
+/** Vereinheitlichte Prop-Variante: entweder V1 (mit type) oder V2 (ohne type) */
+type Impact = ImpactV1 | ImpactV2;
+
+function isV1(x: Impact): x is ImpactV1 {
+  return typeof (x as any)?.type === "string";
+}
+
+function pickText(x?: unknown): string {
+  if (!x) return "";
+  if (typeof x === "string") return x;
+  const obj = x as { einfach?: string; eloquent?: string };
+  return obj.einfach ?? obj.eloquent ?? "";
+}
+
+/** Normalizer ‚Üí { label, text } f√ºr die Anzeige */
+function normalizeImpact(impact: Impact): { label?: string; text: string } {
+  if (isV1(impact)) {
+    const text = pickText((impact as any).description);
+    return { label: impact.type, text };
   }
-  
\ No newline at end of file
+  // V2
+  return { label: undefined, text: pickText(impact) };
+}
+
+export default function ImpactIndicator({
+  impact,
+  className = "",
+}: {
+  impact: Impact;
+  className?: string;
+}) {
+  const { label, text } = normalizeImpact(impact);
+  if (!label && !text) return null; // nichts zu zeigen
+
+  return (
+    <div
+      className={`p-3 bg-indigo-50 border-l-4 border-indigo-500 rounded mb-2 text-sm ${className}`}
+      role="note"
+      aria-label={label ? `Impact: ${label}` : "Impact"}
+    >
+      {label ? <strong className="capitalize">{label}:</strong> : null}{" "}
+      <span>{text}</span>
+    </div>
+  );
+}
diff --git a/features/swipe/components/SwipeAdminList.tsx b/features/swipe/components/SwipeAdminList.tsx
index 127334ad..8d57237e 100644
--- a/features/swipe/components/SwipeAdminList.tsx
+++ b/features/swipe/components/SwipeAdminList.tsx
@@ -1,53 +1,50 @@
+// features/swipe/components/SwipeAdminList.tsx
 "use client";
-import { useEffect, useState, useMemo } from "react";
-import SwipeCard from "./SwipeCard"; // Deine Einzelkarten-Komponente f√ºr Swipes
+import { useEffect, useState, useMemo, ChangeEvent } from "react";
+import SwipeCard from "./SwipeCard";
 
-export default function SwipeAdminList({
-  admin,
-  moderator,
-  ngoView,
-  politikView,
-  readOnly,
-  user,
-  onEdit,
-}: {
+type UserLite = { orgId?: string; district?: string };
+type Swipe = {
+  _id?: string; id?: string;
+  title?: string; statement?: string;
+  orgId?: string; district?: string;
+};
+
+type Props = {
   admin?: boolean;
   moderator?: boolean;
   ngoView?: boolean;
   politikView?: boolean;
   readOnly?: boolean;
-  user?: any;
-  onEdit?: (swipe: any) => void;
-}) {
-  const [swipes, setSwipes] = useState<any[]>([]);
+  user?: UserLite;
+  onEdit?: (swipe: Swipe) => void;
+};
+
+export default function SwipeAdminList({
+  admin, moderator, ngoView, politikView, readOnly, user, onEdit,
+}: Props) {
+  const [swipes, setSwipes] = useState<Swipe[]>([]);
   const [search, setSearch] = useState("");
   const [loading, setLoading] = useState(true);
 
-  // Swipes vom Server laden
   useEffect(() => {
     fetch("/api/swipes")
       .then((res) => res.json())
-      .then((data) => setSwipes(data))
+      .then((data: Swipe[]) => setSwipes(data))
       .catch(() => setSwipes([]))
       .finally(() => setLoading(false));
   }, []);
 
-  // Filterlogik (Rolle, Suche)
   const filteredSwipes = useMemo(() => {
     let list = swipes;
-    // Optional: Rollenbasierte Filter
-    if (ngoView && user?.orgId) {
-      list = list.filter((s) => s.orgId === user.orgId);
-    }
-    if (politikView && user?.district) {
-      list = list.filter((s) => s.district === user.district);
-    }
-    // Suche
+    if (ngoView && user?.orgId) list = list.filter((s) => s.orgId === user.orgId);
+    if (politikView && user?.district) list = list.filter((s) => s.district === user.district);
     if (search.length > 2) {
+      const needle = search.toLowerCase();
       list = list.filter(
         (s) =>
-          s.title?.toLowerCase().includes(search.toLowerCase()) ||
-          s.statement?.toLowerCase().includes(search.toLowerCase())
+          s.title?.toLowerCase().includes(needle) ||
+          s.statement?.toLowerCase().includes(needle)
       );
     }
     return list;
@@ -59,12 +56,11 @@ export default function SwipeAdminList({
         <input
           type="text"
           value={search}
-          onChange={(e) => setSearch(e.target.value)}
+          onChange={(e: ChangeEvent<HTMLInputElement>) => setSearch(e.target.value)}
           placeholder="Swipes suchen (Kernbotschaft, ...)"
           className="w-full p-2 rounded-xl border border-gray-200 shadow-sm text-base outline-none focus:ring-2 focus:ring-coral"
         />
       </div>
-
       {loading ? (
         <div className="text-center text-gray-400 py-10">L√§dt Swipes‚Ä¶</div>
       ) : filteredSwipes.length === 0 ? (
diff --git a/features/swipe/components/SwipeCard.tsx b/features/swipe/components/SwipeCard.tsx
index c11f38ae..bd95b6f7 100644
--- a/features/swipe/components/SwipeCard.tsx
+++ b/features/swipe/components/SwipeCard.tsx
@@ -1,46 +1,86 @@
-//Finale Version 04. August 2025
+// apps/web/src/components/SwipeCard.tsx
 "use client";
+
 import React, { useState, useMemo } from "react";
 import ImpactIndicator from "./ImpactIndicator";
 import VoteBar from "@features/vote/components/VoteBar";
 import CountryAccordion from "@features/vote/components/CountryAccordion";
-import { badgeColors } from "@ui/design/badgeColor";
+import { badgeColors } from "@/ui/design/badgeColor";
 import clsx from "clsx";
 
 const TYPE_CONFIG = {
   community: { label: "Community", color: "bg-turquoise-100 text-turquoise-800" },
   ki: { label: "KI", color: "bg-violet-100 text-violet-700" },
-  redaktion: { label: "Redaktion", color: "bg-coral-100 text-coral-700" }
-};
+  redaktion: { label: "Redaktion", color: "bg-coral-100 text-coral-700" },
+} as const;
 
-const VOTE_MAP = [
+type VoteVal = "agree" | "neutral" | "disagree";
+
+const VOTE_MAP: { value: VoteVal; icon: string; label: string; color: string }[] = [
   { value: "agree", icon: "üëç", label: "Zustimmen", color: "border-turquoise-500 text-turquoise-600" },
   { value: "neutral", icon: "ü§î", label: "Neutral", color: "border-violet-500 text-violet-700" },
-  { value: "disagree", icon: "üëé", label: "Ablehnen", color: "border-coral-500 text-coral-600" }
+  { value: "disagree", icon: "üëé", label: "Ablehnen", color: "border-coral-500 text-coral-600" },
 ];
 
-export default function SwipeCard({ statement, userHash, onVote, userCountry = "Deutschland", language = "de" }) {
+type Alt = { text: string; type: keyof typeof TYPE_CONFIG | string };
+type Statement = {
+  title?: string;
+  statement?: string;
+  plainStatement?: string;
+  translations?: Record<string, { title?: string }>;
+  regionScope?: unknown[];
+  tags?: string[];
+  category?: string;
+  votes?: Record<string, number>;
+  impactLogic?: unknown[];
+  alternatives?: Alt[];
+  accessibilityStatus?: string;
+  barrierescore?: number;
+  aiAnnotations?: {
+    toxicity?: number | null;
+    sentiment?: string | null;
+    subjectAreas?: string[];
+  };
+};
+
+type Props = {
+  statement: Statement | null | undefined;
+  userHash?: string;
+  onVote?: (vote: VoteVal) => void;
+  userCountry?: string;
+  language?: string;
+};
+
+export default function SwipeCard({
+  statement,
+  userHash,
+  onVote,
+  userCountry = "Deutschland",
+  language = "de",
+}: Props) {
   if (!statement) return null;
 
-  // √úbersetzung und barrierefreie Grundlogik
-  const translated = useMemo(() => statement.translations?.[language] ?? {}, [statement, language]);
-  const plainStatement = statement.plainStatement || statement.statement;
+  const translated = useMemo(
+    () => statement.translations?.[language] ?? {},
+    [statement, language]
+  );
+
+  const plainStatement = statement.plainStatement || statement.statement || "";
   const regionScope = statement.regionScope || [];
   const barrierescore = statement.barrierescore;
   const accessibilityStatus = statement.accessibilityStatus;
   const ai = statement.aiAnnotations || {};
-  const hasAI = ai && (
-    ai.toxicity != null ||
-    ai.sentiment != null ||
-    (Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0)
-  );
+  const hasAI =
+    ai &&
+    (ai.toxicity != null ||
+      ai.sentiment != null ||
+      (Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0));
 
-  // State
-  const [mainVote, setMainVote] = useState("");
+  const [mainVote, setMainVote] = useState<VoteVal | "">("");
   const [showAlt, setShowAlt] = useState(false);
-  const [altVotes, setAltVotes] = useState<Record<number, string>>({});
+  const [altVotes, setAltVotes] = useState<Record<number, VoteVal | "">>({});
 
-  function handleVote(type: string) {
+  function handleVote(type: VoteVal) {
     setMainVote(type);
     onVote?.(type);
     if ((type === "neutral" || type === "disagree") && statement.alternatives?.length) {
@@ -48,7 +88,7 @@ export default function SwipeCard({ statement, userHash, onVote, userCountry = "
     }
   }
 
-  function handleAltVote(idx: number, val: string) {
+  function handleAltVote(idx: number, val: VoteVal) {
     setAltVotes((old) => ({ ...old, [idx]: old[idx] === val ? "" : val }));
   }
 
@@ -57,10 +97,12 @@ export default function SwipeCard({ statement, userHash, onVote, userCountry = "
       {/* Header: Tags & Kategorie */}
       <div className="flex gap-2 mb-2 flex-wrap">
         {statement.tags?.map((t, i) => (
-          <span key={t} className={clsx(
-            "px-3 py-1 rounded-full text-xs font-bold border",
-            badgeColors[i % badgeColors.length]
-          )}>{t}</span>
+          <span
+            key={`${t}-${i}`}
+            className={clsx("px-3 py-1 rounded-full text-xs font-bold border", badgeColors[i % badgeColors.length])}
+          >
+            {t}
+          </span>
         ))}
         {statement.category && (
           <span className="px-3 py-1 rounded-full bg-gray-200 text-gray-700 text-xs font-semibold">
@@ -68,33 +110,29 @@ export default function SwipeCard({ statement, userHash, onVote, userCountry = "
           </span>
         )}
       </div>
+
       {/* Farbverlauf-Titel */}
-      <h2 className="text-3xl font-bold mb-1 leading-snug"
+      <h2
+        className="text-3xl font-bold mb-1 leading-snug"
         style={{
           background: "linear-gradient(90deg, #2396F3 10%, #00B3A6 60%, #FF6F61 100%)",
           WebkitBackgroundClip: "text",
-          WebkitTextFillColor: "transparent"
-        }}>
+          WebkitTextFillColor: "transparent",
+        }}
+      >
         {translated.title || statement.title}
       </h2>
-      {plainStatement !== statement.statement && (
+
+      {plainStatement && plainStatement !== statement.statement && (
         <div className="italic text-xs text-gray-500 mb-2">{plainStatement}</div>
       )}
-      {/* L√§nder-Kontext */}
-      <CountryAccordion countries={report.analytics.geoDistribution} userCountry="DE" /> 
-      <CountryAccordion regionScope={regionScope} userCountry="DE" />      {/* Kontext */}
-      {statement.context && (
-        <div className="mb-3">
-          <button
-            className="underline text-indigo-600 text-sm"
-            onClick={() => alert(statement.context)}
-          >
-            Mehr Kontext
-          </button>
-        </div>
-      )}
+
+      {/* L√§nder-/Region-Kontext (report.* entfernt, nur regionScope) */}
+      <CountryAccordion regionScope={regionScope} userCountry={userCountry} />
+
       {/* VoteBar */}
       <VoteBar votes={statement.votes || {}} />
+
       {/* Impact-Indicators */}
       {Array.isArray(statement.impactLogic) && statement.impactLogic.length > 0 && (
         <div className="mb-3 flex flex-wrap gap-2">
@@ -103,6 +141,7 @@ export default function SwipeCard({ statement, userHash, onVote, userCountry = "
           ))}
         </div>
       )}
+
       {/* Abstimmungs-Buttons */}
       <div className="flex gap-6 mb-6 mt-3 justify-center items-center">
         {VOTE_MAP.map((btn) => (
@@ -120,18 +159,21 @@ export default function SwipeCard({ statement, userHash, onVote, userCountry = "
           </button>
         ))}
       </div>
-      {/* Alternativen (Eventualziele) */}
-      {showAlt && statement.alternatives?.length > 0 && (
+
+      {/* Alternativen */}
+      {showAlt && statement.alternatives?.length ? (
         <div className="mb-3">
           <b className="block mb-2">Eventualziele & Alternativen:</b>
           <div className="flex flex-col gap-2">
             {statement.alternatives.map((alt, idx) => (
-              <div key={alt.text} className="flex items-center gap-3 bg-gray-50 rounded-xl px-4 py-2">
-                <span className={clsx(
-                  "px-2 py-1 rounded-full text-xs font-semibold",
-                  TYPE_CONFIG[alt.type as keyof typeof TYPE_CONFIG]?.color || "bg-gray-100"
-                )}>
-                  {TYPE_CONFIG[alt.type as keyof typeof TYPE_CONFIG]?.label || alt.type}
+              <div key={`${alt.text}-${idx}`} className="flex items-center gap-3 bg-gray-50 rounded-xl px-4 py-2">
+                <span
+                  className={clsx(
+                    "px-2 py-1 rounded-full text-xs font-semibold",
+                    TYPE_CONFIG[(alt.type as keyof typeof TYPE_CONFIG) || "community"]?.color || "bg-gray-100"
+                  )}
+                >
+                  {TYPE_CONFIG[(alt.type as keyof typeof TYPE_CONFIG) || "community"]?.label || alt.type}
                 </span>
                 <span className="flex-1">{alt.text}</span>
                 <span className="flex gap-1">
@@ -153,49 +195,35 @@ export default function SwipeCard({ statement, userHash, onVote, userCountry = "
             ))}
           </div>
         </div>
-      )}
+      ) : null}
 
-      {/* Accessibility / Barrierefreiheits-Score */}
+      {/* Accessibility */}
       {(accessibilityStatus || typeof barrierescore === "number") && (
         <div className="flex gap-2 items-center text-xs mb-1" aria-label="Barrierefreiheit">
-          {accessibilityStatus && (
-            <span className="rounded bg-green-50 text-green-700 px-2 py-1 font-bold">
-              Accessibility: {accessibilityStatus}
-            </span>
-          )}
-          {typeof barrierescore === "number" && (
-            <span>
-              Barrierefreiheits-Score: {barrierescore}/100
-            </span>
-          )}
+          {accessibilityStatus && <span className="rounded bg-green-50 text-green-700 px-2 py-1 font-bold">Accessibility: {accessibilityStatus}</span>}
+          {typeof barrierescore === "number" && <span>Barrierefreiheits-Score: {barrierescore}/100</span>}
         </div>
       )}
 
       {/* KI-Analyse */}
       {hasAI && (
         <div className="text-xs text-gray-500 mt-1" aria-label="KI-Analyse">
-          {ai.toxicity != null && <>Toxizit√§t: {(ai.toxicity * 100).toFixed(2)}‚ÄØ% </>}
+          {ai.toxicity != null && <>Toxizit√§t: {(ai.toxicity * 100).toFixed(2)} % </>}
           {ai.sentiment != null && <>Stimmung: {ai.sentiment} </>}
-          {Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0 && (
-            <>Themen: {ai.subjectAreas.join(", ")}</>
-          )}
+          {Array.isArray(ai.subjectAreas) && ai.subjectAreas.length > 0 && <>Themen: {ai.subjectAreas.join(", ")}</>}
         </div>
       )}
 
-      {/* Mitglieder-Block */}
+      {/* Hinweis / CTA */}
       <input className="rounded-xl w-full bg-gray-100 mt-3 px-3 py-2 text-gray-400" value="Nur f√ºr Mitglieder" disabled />
-      <div className="text-xs text-gray-500 mt-1 mb-2">
-        Nur als registriertes Mitglied kannst du Alternativen einreichen.
-      </div>
-      {/* Auswertung/CTA */}
+      <div className="text-xs text-gray-500 mt-1 mb-2">Nur als registriertes Mitglied kannst du Alternativen einreichen.</div>
       <div className="bg-violet-50 p-3 mt-2 rounded-xl text-violet-700 text-sm font-semibold">
         <span className="mr-2">üìà Live-Auswertung (Trends, Argumente, Pro/Contra):</span>
-        <a href="/mitglied" className="underline font-bold">Jetzt als Mitglied freischalten</a>
-      </div>
-      {/* Hinweis */}
-      <div className="text-xs text-gray-400 mt-2 text-center">
-        Beitr√§ge & Alternativen werden durch Community, Redaktion & KI validiert.
+        <a href="/mitglied" className="underline font-bold">
+          Jetzt als Mitglied freischalten
+        </a>
       </div>
+      <div className="text-xs text-gray-400 mt-2 text-center">Beitr√§ge & Alternativen werden durch Community, Redaktion & KI validiert.</div>
     </div>
   );
 }
diff --git a/features/tsconfig.json b/features/tsconfig.json
index 28775e1a..2deb81f2 100644
--- a/features/tsconfig.json
+++ b/features/tsconfig.json
@@ -1,15 +1,34 @@
 {
-    "extends": "../tsconfig.base.json",
-    "compilerOptions": {
-      "composite": true,
-      "baseUrl": ".",
-      "rootDir": ".",
-      "outDir": "dist-types",
-      "moduleResolution": "bundler",
-      "skipLibCheck": true,
-      "noEmit": true
-    },
-    "include": ["**/*.ts", "**/*.tsx"],
-    "exclude": ["node_modules", "dist", "dist-types", "**/*.test.*", "**/__tests__/**"]
-  }
-  
\ No newline at end of file
+  "extends": "../tsconfig.base.json",
+  "compilerOptions": {
+    "composite": true,
+    "baseUrl": ".",
+    "rootDir": ".",
+    "outDir": "dist-types",
+    "moduleResolution": "bundler",
+    "skipLibCheck": true,
+    "noEmit": true,
+    "jsx": "react-jsx",
+    "paths": {
+      "@features": ["./index.ts"],
+      "@features/*": ["./*"],
+
+      "@ui/*": [
+        "../packages/ui/src/*",
+        "../packages/ui/*",
+        "../packages/ui/dist/*"
+      ],
+
+      "@core/*": ["../core/*"]
+    }
+  },
+  "include": ["**/*.ts", "**/*.tsx"],
+  "exclude": [
+    "node_modules",
+    "dist",
+    "dist-types",
+    "**/*.test.*",
+    "**/__tests__/**"
+  ],
+  "references": [
+    { "path": "..
diff --git a/features/user/components/index.ts b/features/user/components/index.ts
index d7532ab1..2fadeed4 100644
--- a/features/user/components/index.ts
+++ b/features/user/components/index.ts
@@ -4,3 +4,4 @@ export { default as UserAdminList } from "./UserAdminList";
 export * from "./UserAdminList";
 export { default as UserDashboard } from "./UserDashboard";
 export * from "./UserDashboard";
+export { default as UserHydrator } from "./UserHydrator";
diff --git a/features/user/context/UserContext.tsx b/features/user/context/UserContext.tsx
index 7a2174e0..54cffae8 100644
--- a/features/user/context/UserContext.tsx
+++ b/features/user/context/UserContext.tsx
@@ -1,5 +1,7 @@
+//features/user/ContributionCard
 "use client";
 
+import { ContributionCard } from "contribution";
 import React, { createContext, useContext, useMemo, useState, ReactNode } from "react";
 
 export type Role = "guest" | "user" | "verified" | "editor" | "admin";
diff --git a/features/user/hooks/usePermission.ts b/features/user/hooks/usePermission.ts
index 3423c35e..65cc8079 100644
--- a/features/user/hooks/usePermission.ts
+++ b/features/user/hooks/usePermission.ts
@@ -1,17 +1,28 @@
 // features/user/hooks/usePermission.ts
 
 import { useMemo } from "react";
-import { IUserProfile } from "../../../apps/web/src/models/pii/UserProfile";
+import type { IUserProfile } from "../../../apps/web/src/models/pii/UserProfile";
 import { useAuth } from "./useAuth";
 
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ * Hook #1: Rollen-Check gegen aktiven User aus dem Auth-Context
+ * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ */
 export function usePermission(required: string | string[]) {
   const { user } = useAuth();
   if (!user) return false;
+
   const active = user.roles?.[user.activeRole]?.role;
   if (!active) return false;
+
   return Array.isArray(required) ? required.includes(active) : active === required;
 }
-type PermissionAction =
+
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ * Aktionen-/Rechte-Definition
+ * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ */
+export type PermissionAction =
   | "writePost"
   | "vote"
   | "comment"
@@ -27,28 +38,27 @@ type PermissionAction =
   | "regionVote"
   | "adminPanel";
 
-/**
- * React-Hook f√ºr rollen-/statusbasierte Rechteabfrage.
- * @param user Aktueller User (aus Kontext, Session etc.)
- * @returns `can(action)` - Funktion zum Abfragen einzelner Rechte
+/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+ * Hook #2: Policy-Check f√ºr einen √ºbergebenen User (umbenannt)
+ *  - Bitte diesen Namen verwenden, um den Doppel-Export zu vermeiden.
+ * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  */
-export function usePermission(user: IUserProfile | null) {
-  return useMemo(() => ({
-    can: (action: PermissionAction) => {
+export function usePermissionFromUser(user: IUserProfile | null) {
+  return useMemo(() => {
+    const can = (action: PermissionAction): boolean => {
       if (!user || user.status !== "active") return false;
 
-      // Multi-Account Support
-      const active = user.roles[user.activeRole] || { role: "user" };
+      // Multi-Account: aktiver Eintrag oder Fallback
+      const active = user.roles?.[user.activeRole] ?? { role: "user" as const };
 
-      // Hard Admin/Superadmin
+      // Harte Admins
       if (active.role === "admin" || active.role === "superadmin") return true;
 
       // B√ºrger:innen
       if (active.role === "user" || active.role === "citizen") {
-        if (["writePost", "vote", "comment"].includes(action)) return true;
         if (action === "regionVote") return user.verification === "legitimized";
-        if (action === "premiumFeature") return user.premium;
-        return false;
+        if (action === "premiumFeature") return !!user.premium;
+        return ["writePost", "vote", "comment"].includes(action);
       }
 
       // NGOs
@@ -56,20 +66,22 @@ export function usePermission(user: IUserProfile | null) {
         if (active.subRole === "admin" && ["manageTeam", "createEvent", "report"].includes(action)) return true;
         if (active.subRole === "editor" && ["writePost", "editPost"].includes(action)) return true;
         if (active.subRole === "user" && action === "writePost") return true;
-        if (action === "premiumFeature") return user.premium;
+        if (action === "premiumFeature") return !!user.premium;
         return false;
       }
 
-      // Parteien
+      // Parteien/Politik
       if (active.role === "politics" || active.role === "party") {
         if (active.subRole === "admin" && ["manageTeam", "startPolicyReport", "analyze"].includes(action)) return true;
         if (active.subRole === "speaker" && ["writePost", "publicRelations"].includes(action)) return true;
         if (active.subRole === "user" && ["writePost", "voteInternal"].includes(action)) return true;
-        if (action === "premiumFeature") return user.premium;
+        if (action === "premiumFeature") return !!user.premium;
         return false;
       }
 
       return false;
-    }
-  }), [user]);
+    };
+
+    return { can };
+  }, [user]);
 }
diff --git a/features/user/hooks/useRolePermission.ts b/features/user/hooks/useRolePermission.ts
index f51c7582..7ac5cbbd 100644
--- a/features/user/hooks/useRolePermission.ts
+++ b/features/user/hooks/useRolePermission.ts
@@ -1,12 +1,23 @@
-
-console.log("useRolePermission RENDERT");
+// features/user/hooks/useRolePermission.ts
 
 import { useAuth } from "../../auth/hooks/useAuth";
 
 export function useRolePermission(required: string | string[]) {
   const { user } = useAuth();
   if (!user) return false;
-  const active = user.roles?.[user.activeRole]?.role;
+
+  // Rollen-Objekt defensiv extrahieren
+  const roles: Record<string, { role?: string }> = (user as any)?.roles ?? {};
+
+  // Robust: aktiven Key bestimmen (entweder user.activeRole oder erster vorhandener Key)
+  let activeRoleKey: string | undefined = (user as any)?.activeRole;
+  if (!activeRoleKey || !(activeRoleKey in roles)) {
+    const keys = Object.keys(roles);
+    activeRoleKey = keys.length ? keys[0] : undefined;
+  }
+
+  const active = activeRoleKey ? roles[activeRoleKey]?.role : undefined;
   if (!active) return false;
+
   return Array.isArray(required) ? required.includes(active) : active === required;
 }
diff --git a/features/user/types/UserType.ts b/features/user/types/UserType.ts
index fe82be18..af8085e6 100644
--- a/features/user/types/UserType.ts
+++ b/features/user/types/UserType.ts
@@ -1,8 +1,10 @@
+// features/user/types/UserType.ts
 import { GamificationStats } from "../../contribution/types/GamificationStats";
 
-export interface UserProfile {
+// Haupt-Name: UserType
+export interface UserType {
   _id?: string;
-  roles: ('user' | 'scout' | 'moderator' | 'kurator' | 'redaktion' | 'gast')[];
+  roles: ("user" | "scout" | "moderator" | "kurator" | "redaktion" | "gast")[];
   xpStats: { [topic: string]: number };
   badgeIds?: string[];
   activityFeed?: UserActivity[];
@@ -13,7 +15,7 @@ export interface UserProfile {
     municipality?: string;
     politicalAreaId?: string;
   };
-  ageGroup?: '16-25' | '26-35' | '36-45' | '46-60' | '60+';
+  ageGroup?: "16-25" | "26-35" | "36-45" | "46-60" | "60+";
   profession?: string;
   educationLevel?: string;
   gender?: string;
@@ -30,3 +32,14 @@ export interface UserProfile {
   deleted?: boolean;
   version?: number;
 }
+
+// Backwards-Compat: alias
+export type UserProfile = UserType;
+
+// Falls UserActivity woanders liegt, importiere/definiere es hier:
+export interface UserActivity {
+  // minimal, damit TS nicht meckert
+  type?: string;
+  at?: string;
+  payload?: any;
+}
diff --git a/features/utils/ai/generateImage.ts b/features/utils/ai/generateImage.ts
index 8afef756..2ec5c7d4 100644
--- a/features/utils/ai/generateImage.ts
+++ b/features/utils/ai/generateImage.ts
@@ -1,45 +1,84 @@
+// features/utils/ai/generateImage.ts
 import { OpenAI } from "openai"; // npm install openai
 
+type GenerateVOGImageParams = {
+  prompt: string;
+  fallbackText?: string;
+  aspectRatio?: string;   // "16:9" | "9:16" | "1:1" | frei
+  ciColors?: string[];    // z.B. ["#FF6F61", "#00B3A6", "#4B0082"]
+};
+
+/** Mappt aspectRatio auf von OpenAI unterst√ºtzte Gr√∂√üen. */
+function mapAspectRatioToSize(ar?: string): "1792x1024" | "1024x1792" | "1024x1024" {
+  const s = (ar || "").trim();
+  if (!s) return "1024x1024";
+
+  // exakte Strings g√§ngigster F√§lle
+  if (s === "16:9") return "1792x1024";
+  if (s === "9:16") return "1024x1792";
+  if (s === "1:1" || s === "square") return "1024x1024";
+
+  // generische Parser (z.B. "4:3", "3:4" -> w√§hle n√§chstliegenden Support)
+  const m = s.match(/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?)$/);
+  if (m) {
+    const w = parseFloat(m[1]);
+    const h = parseFloat(m[2]);
+    if (isFinite(w) && isFinite(h) && h > 0) {
+      const ratio = w / h;
+      const d169 = Math.abs(ratio - 16 / 9);
+      const d916 = Math.abs(ratio - 9 / 16);
+      const d11  = Math.abs(ratio - 1);
+      if (d169 <= d916 && d169 <= d11) return "1792x1024";
+      if (d916 <= d169 && d916 <= d11) return "1024x1792";
+      return "1024x1024";
+    }
+  }
+  // Fallback
+  return "1024x1024";
+}
+
 export async function generateVOGImage({
   prompt,
   fallbackText = "VoiceOpenGov",
   aspectRatio = "16:9",
-  ciColors = ["#FF6F61", "#00B3A6", "#4B0082"]
-}: {
-  prompt: string;
-  fallbackText?: string;
-  aspectRatio?: string;
-  ciColors?: string[];
-}): Promise<string> {
-  const apiKey = process.env.OPENAI_API_KEY; // Holt sich den Key aus .env.local
+  ciColors = ["#FF6F61", "#00B3A6", "#4B0082"],
+}: GenerateVOGImageParams): Promise<string> {
+  const apiKey = process.env.OPENAI_API_KEY;
 
   if (!apiKey) {
     console.warn("[generateVOGImage] Kein OpenAI-API-Key in .env.local gefunden!");
     return "/dummy/vog-default.jpg";
   }
 
-  const colorStr = ciColors.join(", ");
+  const colorStr = ciColors.filter(Boolean).join(", ");
+  const size = mapAspectRatioToSize(aspectRatio);
+
+  // Prompt defensiv s√§ubern & konsistent halten
   const safePrompt = `
-    ${prompt.trim()}
+    ${String(prompt || "").trim()}
     Stil: moderne Illustration, hohe Farbigkeit, klar, jugendlich, Farbschema: ${colorStr}.
     F√ºge subtil den Schriftzug '${fallbackText}' als Wasserzeichen unten rechts ein.
-    Keine fremden Logos, kein Text au√üer dem Wasserzeichen.
+    Keine fremden Logos, kein zus√§tzlicher Text au√üer dem Wasserzeichen.
     Format: ${aspectRatio}, ideal f√ºr Social/Feed.
     Hintergrund neutral, keine realen Personen, keine Markennamen.
-  `.replace(/\s+/g, " ");
+  `.replace(/\s+/g, " ").trim();
 
-  let imageUrl = "";
   try {
     const openai = new OpenAI({ apiKey });
+
     const response = await openai.images.generate({
+      // Model explizit benennen ist robuster:
+      model: "gpt-image-1",
       prompt: safePrompt,
       n: 1,
-      size: "1024x576" // 16:9
+      size, // ‚úÖ 16:9 ‚Üí 1792x1024, 9:16 ‚Üí 1024x1792, 1:1 ‚Üí 1024x1024
     });
-    imageUrl = response.data[0]?.url || "";
+
+    // Defensive Zugriffe auf API-Response
+    const imageUrl = (response as any)?.data?.[0]?.url as string | undefined;
+    return imageUrl || "/dummy/vog-default.jpg";
   } catch (err) {
     console.error("[generateVOGImage] Fehler:", err);
-    imageUrl = "/dummy/vog-default.jpg"; // Fallback
+    return "/dummy/vog-default.jpg";
   }
-  return imageUrl;
 }
diff --git a/features/vote/components/VoteBar.tsx b/features/vote/components/VoteBar.tsx
index 98be0f92..89dd4748 100644
--- a/features/vote/components/VoteBar.tsx
+++ b/features/vote/components/VoteBar.tsx
@@ -1,80 +1,74 @@
-// components/VoteBar.tsx
+// features/vote/components/VoteBar.tsx
+"use client";
+
 import React, { useEffect, useState } from "react";
 import { motion } from "framer-motion";
 
-const colors = {
-  turquoise: "#04bfbf",
-  warning: "#ffd166",
-  coral: "#ef476f"
+type Votes = { agree: number; neutral: number; disagree: number };
+
+type Props = {
+  statementId: string;
+  labels?: string[];
+  userHash?: string; // optional Header f√ºr Server-Ratelimit/De-Dupe
 };
 
-export default function VoteBar({ statementId, labels = ["Zustimmung", "Neutral", "Ablehnung"] }) {
-  const [votes, setVotes] = useState({ agree: 0, neutral: 0, disagree: 0 });
+export default function VoteBar({
+  statementId,
+  labels = ["Zustimmung", "Neutral", "Ablehnung"],
+  userHash,
+}: Props) {
+  const [votes, setVotes] = useState<Votes>({ agree: 0, neutral: 0, disagree: 0 });
   const [loading, setLoading] = useState(true);
+  const [err, setErr] = useState<string | null>(null);
 
   useEffect(() => {
-    setLoading(true);
-    fetch(`/api/votes/summary?statementId=${statementId}`)
-      .then(res => res.json())
-      .then(data => {
+    const ctrl = new AbortController();
+    (async () => {
+      setLoading(true);
+      setErr(null);
+      try {
+        const res = await fetch(
+          `/api/votes/summary?statementId=${encodeURIComponent(statementId)}`,
+          { cache: "no-store", signal: ctrl.signal, headers: userHash ? { "x-user-hash": userHash } : {} }
+        );
+        const json = await res.json().catch(() => ({}));
+        if (!res.ok || !json?.ok) throw new Error(json?.error || "Summary failed");
+        const s = json.data as Partial<Votes>;
         setVotes({
-          agree: data.agree || 0,
-          neutral: data.neutral || 0,
-          disagree: data.disagree || 0
+          agree: Number(s?.agree ?? 0),
+          neutral: Number(s?.neutral ?? 0),
+          disagree: Number(s?.disagree ?? 0),
         });
+      } catch (e: any) {
+        if (e?.name !== "AbortError") setErr(e?.message || "Fehler");
+      } finally {
         setLoading(false);
-      })
-      .catch(() => setLoading(false));
-  }, [statementId]);
+      }
+    })();
+    return () => ctrl.abort();
+  }, [statementId, userHash]);
 
-  if (loading) {
-    return <div className="w-full h-8 bg-gray-100 animate-pulse rounded" />;
-  }
-
-  const { agree, neutral, disagree } = votes;
-  const sum = agree + neutral + disagree;
-  const pc = n => sum ? ((n / sum) * 100).toFixed(1) : "0.0";
+  const total = Math.max(1, votes.agree + votes.neutral + votes.disagree);
+  const pct = (n: number) => 100 * (n / total);
 
   return (
-    <div className="w-full flex flex-col gap-1 mt-2">
-     <div className="flex items-center gap-4 text-xs font-semibold">
-  <span style={{ color: colors.turquoise }}>üëç {agree} {/* <span className="ml-1 text-neutral-400">({pc(agree)}%)</span> */}</span>
-  <span style={{ color: colors.warning }}>ü§î {neutral} {/* <span className="ml-1 text-neutral-400">({pc(neutral)}%)</span> */}</span>
-  <span style={{ color: colors.coral }}>üëé {disagree} {/* <span className="ml-1 text-neutral-400">({pc(disagree)}%)</span> */}</span>
-</div>
-
-      <div className="relative flex h-3 w-full rounded-full bg-gray-200 overflow-hidden">
-        <motion.div
-          initial={{ width: 0 }} animate={{ width: pc(agree) + "%" }}
-          style={{ background: colors.turquoise }} className="h-full"
-        />
-        <motion.div
-          initial={{ width: 0 }} animate={{ width: pc(neutral) + "%", left: pc(agree) + "%" }}
-          style={{ background: colors.warning, position: "absolute", left: pc(agree) + "%" }} className="h-full"
-        />
-        <motion.div
-          initial={{ width: 0 }} animate={{ width: pc(disagree) + "%", left: (parseFloat(pc(agree)) + parseFloat(pc(neutral))) + "%" }}
-          style={{ background: colors.coral, position: "absolute", left: (parseFloat(pc(agree)) + parseFloat(pc(neutral))) + "%" }} className="h-full"
-        />
-        {/* Prozent-Labels auf dem Balken 
-        {["agree", "neutral", "disagree"].map((type, i) => (
-          <span
-            key={type}
-            className="absolute top-1 left-1 text-[10px] font-bold"
-            style={{
-              color: "#fff",
-              left:
-                type === "agree" ? pc(agree) + "%" :
-                type === "neutral" ? (parseFloat(pc(agree)) + parseFloat(pc(neutral) / 2)) + "%" :
-                "calc(100% - 35px)"
-            }}>
-            {pc(type === "agree" ? agree : type === "neutral" ? neutral : disagree)}%
-          </span>
-        ))}*/}
-      </div>
-      <div className="flex justify-between text-[11px] text-neutral-400 px-1">
-        {labels.map((l, i) => <span key={i}>{l}</span>)}
-      </div>
+    <div className="w-full">
+      {loading && <div className="h-2 w-full bg-neutral-100 rounded" />}
+      {!loading && (
+        <div className="w-full rounded overflow-hidden border border-neutral-200">
+          <div className="flex h-3 w-full">
+            <motion.div className="h-full bg-green-500" style={{ width: `${pct(votes.agree)}%` }} />
+            <motion.div className="h-full bg-gray-300" style={{ width: `${pct(votes.neutral)}%` }} />
+            <motion.div className="h-full bg-red-500" style={{ width: `${pct(votes.disagree)}%` }} />
+          </div>
+          <div className="flex justify-between text-[11px] mt-1 text-neutral-600">
+            <span>{labels[0]}: {votes.agree}</span>
+            <span>{labels[1]}: {votes.neutral}</span>
+            <span>{labels[2]}: {votes.disagree}</span>
+          </div>
+        </div>
+      )}
+      {err && <div className="text-xs text-red-600 mt-1">{err}</div>}
     </div>
   );
 }
diff --git a/features/vote/components/VoteButton.tsx b/features/vote/components/VoteButton.tsx
index 98ca145b..57778432 100644
--- a/features/vote/components/VoteButton.tsx
+++ b/features/vote/components/VoteButton.tsx
@@ -1,3 +1,4 @@
+// features/vote/components/VoteButton.tsx
 "use client";
 import { useState } from "react";
 
@@ -6,47 +7,46 @@ type Summary = { agree: number; neutral: number; disagree: number };
 
 function ensureFp(): string {
   try {
+    const uuid = typeof crypto !== "undefined" && "randomUUID" in crypto
+      ? crypto.randomUUID()
+      : Math.random().toString(36).slice(2);
     let fp = localStorage.getItem("vog_fp");
-    if (!fp) {
-      fp = crypto.randomUUID();
-      localStorage.setItem("vog_fp", fp);
-    }
+    if (!fp) { fp = uuid; localStorage.setItem("vog_fp", fp); }
     return fp;
-  } catch {
-    // Fallback, z. B. Private Mode
-    return "fp-unavailable";
-  }
+  } catch { return "fp-unavailable"; }
 }
 
 const baseBtn =
   "px-3 py-1 rounded text-sm border transition disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-offset-1";
 
-export default function VoteButtons({
-  statementId,
-  initialSummary,
-  onAfter,
-  lockAfterVote = false,
-}: {
+type Props = {
   statementId: string;
   initialSummary?: Summary;
   onAfter?: (value: Val) => void;
-  /** true = weiterer Vote in der Session gesperrt */
   lockAfterVote?: boolean;
-}) {
+  userHash?: string;
+};
+
+function VoteButton({
+  statementId,
+  initialSummary,
+  onAfter,
+  lockAfterVote = false,
+  userHash,
+}: Props) {
   const [busy, setBusy] = useState<Val | null>(null);
   const [voted, setVoted] = useState<Val | null>(null);
   const [summary, setSummary] = useState<Summary | undefined>(initialSummary);
 
   async function cast(value: Val) {
-    if (busy) return; // nur Parallelklicks verhindern
-
+    if (busy) return;
     setBusy(value);
 
-    // Optimistic Update mit sauberem Umstimmen (‚àí1 alte, +1 neue Auswahl)
     const prevSummary = summary ? { ...summary } : undefined;
     const prevVote = voted;
+
     if (summary) {
-      const next: Summary = { ...summary };
+      const next = { ...summary };
       next[value] += 1;
       if (!lockAfterVote && prevVote && prevVote !== value) {
         next[prevVote] = Math.max(0, next[prevVote] - 1);
@@ -56,36 +56,37 @@ export default function VoteButtons({
 
     try {
       const fp = ensureFp();
+      const headers: Record<string, string> = { "Content-Type": "application/json", "x-fp": fp };
+      if (userHash) headers["x-user-hash"] = userHash;
+
       const r = await fetch("/api/votes/cast", {
         method: "POST",
-        headers: {
-          "Content-Type": "application/json",
-          "x-fp": fp,
-        },
+        headers,
         body: JSON.stringify({ statementId, value }),
       });
-
       const j = await r.json().catch(() => ({}));
-      if (!r.ok) throw new Error(j?.error || "Vote fehlgeschlagen");
+      if (!r.ok || !j?.ok) throw new Error(j?.error || "Vote fehlgeschlagen");
 
-      // Falls der Server eine aktuelle Summary zur√ºckgibt, diese √ºbernehmen
-      if (j?.summary && typeof j.summary === "object") {
-        setSummary(j.summary as Summary);
+      // SERVER-KONTRAKT: { ok, data: { agree, neutral, disagree }, meta: {...} }
+      if (j?.data && typeof j.data === "object") {
+        const s = j.data as Partial<Summary>;
+        setSummary({
+          agree: Number(s.agree ?? 0),
+          neutral: Number(s.neutral ?? 0),
+          disagree: Number(s.disagree ?? 0),
+        });
       }
 
-      // UI-Zustand zeigen, aber weitere Votes NICHT verhindern (au√üer lockAfterVote=true)
       setVoted(value);
       onAfter?.(value);
-    } catch (e) {
-      // Rollback bei Fehler
+    } catch (e: any) {
       if (prevSummary) setSummary(prevSummary);
-      alert((e as Error).message);
+      alert(e?.message || "Fehler");
     } finally {
       setBusy(null);
     }
   }
 
-  // Buttons nur sperren, solange busy ‚Äì bzw. nach erstem Vote, wenn lockAfterVote=true √ºbergeben wurde
   const disabled = !!busy || (lockAfterVote && !!voted);
 
   return (
@@ -126,12 +127,7 @@ export default function VoteButtons({
       {voted && (
         <span className="text-sm text-gray-600">
           Danke f√ºr deine Stimme{summary ? "!" : "."}
-          {summary && (
-            <>
-              {" "}
-              Aktuelle Stimmen: üëç {summary.agree} | ü§î {summary.neutral} | üëé {summary.disagree}
-            </>
-          )}
+          {summary && <> Aktuelle Stimmen: üëç {summary.agree} | ü§î {summary.neutral} | üëé {summary.disagree}</>}
         </span>
       )}
 
@@ -143,3 +139,6 @@ export default function VoteButtons({
     </div>
   );
 }
+
+export default VoteButton;
+export { VoteButton };
diff --git a/features/vote/components/index.ts b/features/vote/components/index.ts
index 96160f76..2933bc08 100644
--- a/features/vote/components/index.ts
+++ b/features/vote/components/index.ts
@@ -1,10 +1,15 @@
+// features/vote/components/index.ts
 export { default as CountryAccordion } from "./CountryAccordion";
-export * from "./CountryAccordion";
+export type * from "./CountryAccordion";
+
 export { default as UserVoteBar } from "./UserVoteBar";
-export * from "./UserVoteBar";
+export type * from "./UserVoteBar";
+
 export { default as VoteBar } from "./VoteBar";
-export * from "./VoteBar";
-export { default as VoteButton } from "./VoteButton";
-export * from "./VoteButton";
+export type * from "./VoteBar";
+
+export { default as VoteButton } from "./VoteButton"; // ODER VoteButtons
+export type * from "./VoteButton";
+
 export { default as VotingRuleBadge } from "./VotingRuleBadge";
-export * from "./VotingRuleBadge";
+export type * from "./VotingRuleBadge";
diff --git a/features/vote/hooks/index.ts b/features/vote/hooks/index.ts
index e69de29b..f51b253d 100644
--- a/features/vote/hooks/index.ts
+++ b/features/vote/hooks/index.ts
@@ -0,0 +1,2 @@
+export { default as useVoteStream } from "./useVoteStream";
+export * from "./useVoteStream"; // nur falls es zus√§tzlich named Exporte (Types, utils) gibt
diff --git a/features/vote/index.ts b/features/vote/index.ts
index 44fcfc49..a1aa96df 100644
--- a/features/vote/index.ts
+++ b/features/vote/index.ts
@@ -1,4 +1,6 @@
 export * from "./components";
 export * from "./hooks";
-export { default as UseVoteStream } from "./hooks/useVoteStream";
-export * from "./hooks/useVoteStream";
+
+// Falls der Hook sowohl Default als auch Named exportiert wird:
+export { default as useVoteStream } from "./hooks/useVoteStream";
+export { useVoteStream } from "./hooks/useVoteStream"; // falls im File auch named export existiert
diff --git a/package.json b/package.json
index 38166baf..77c2115a 100644
--- a/package.json
+++ b/package.json
@@ -9,15 +9,21 @@
     "core"
   ],
   "scripts": {
-    "dev:landing": "pnpm --filter @vog/landing... dev",
-    "build:landing": "pnpm --filter @vog/landing... build",
-    "start:landing": "pnpm --filter @vog/landing... start",
-    "dev:web": "pnpm --filter @vog/web... dev",
-    "build:web": "pnpm --filter @vog/web... build",
-    "start:web": "pnpm --filter @vog/web... start",
-    "build:ui": "pnpm --filter @ui run build",
+    "dev:landing": "pnpm --filter @vog/landing dev",
+    "build:landing": "pnpm -w prisma:gen && pnpm --filter @vog/landing build",
+    "start:landing": "pnpm --filter @vog/landing start",
+    "dev:web": "pnpm --filter @vog/web dev",
+    "build:web": "pnpm -w prisma:gen && pnpm --filter @vog/web build",
+    "start:web": "pnpm --filter @vog/web start",
+    "build:ui": "pnpm --filter @vog/ui build",
     "build": "pnpm run build:ui && pnpm run build:web",
-    "prisma:gen": "bash -lc 'set -e; for p in prisma/web/schema.prisma prisma/schema.prisma apps/web/prisma/schema.prisma; do if [ -f \"$p\" ]; then echo \"[prisma] using $p\"; pnpm dlx prisma generate --schema=\"$p\"; exit 0; fi; done; echo \"[prisma] no schema found\" >&2; exit 1;'"
+    "prisma:gen:core": "prisma generate --schema=prisma/core/schema.prisma",
+    "prisma:gen:web": "prisma generate --schema=prisma/web/schema.prisma",
+    "prisma:gen": "pnpm -w prisma:gen:core && pnpm -w prisma:gen:web",
+    "prisma:migrate:core": "prisma migrate deploy --schema=prisma/core/schema.prisma",
+    "prisma:migrate:web": "prisma migrate deploy --schema=prisma/web/schema.prisma",
+    "prisma:migrate": "pnpm -w prisma:migrate:core && pnpm -w prisma:migrate:web",
+    "postinstall": "pnpm -w prisma:gen"
   },
   "pnpm": {
     "onlyBuiltDependencies": [
@@ -31,26 +37,54 @@
     ]
   },
   "dependencies": {
-    "@prisma/client": "^6.16.2",
+    "@aws-sdk/client-s3": "^3.901.0",
+    "@prisma/client": "6.16.3",
+    "@radix-ui/react-tooltip": "^1.2.8",
+    "@upstash/redis": "^1.35.4",
+    "arangojs": "^10.1.2",
+    "axios": "^1.12.2",
     "bullmq": "^5.58.8",
     "clsx": "^2.1.1",
+    "framer-motion": "^12.23.22",
     "html2canvas": "^1.4.1",
     "ioredis": "^5.8.0",
+    "jose": "^6.1.0",
     "jspdf": "^3.0.3",
+    "lucide-react": "^0.545.0",
+    "maplibre-gl": "^5.8.0",
     "mongodb": "^6.20.0",
+    "mongoose": "^8.18.3",
     "nodemailer": "^7.0.6",
+    "openai": "^6.2.0",
+    "pino": "^10.0.0",
     "qrcode": "^1.5.4",
+    "react-beautiful-dnd": "^13.1.1",
     "react-hot-toast": "^2.6.0",
+    "react-icons": "^4.12.0",
+    "react-qr-code": "^2.0.18",
     "recharts": "^3.2.1",
+    "redis": "^5.8.2",
     "sanitize-html": "^2.17.0",
     "swr": "^2.3.6",
+    "ulid": "^3.0.1",
+    "uuid": "^13.0.0",
+    "xlsx": "^0.18.5",
     "zod": "^4.1.11"
   },
   "devDependencies": {
+    "@types/jsonwebtoken": "^9.0.10",
+    "@types/lodash": "^4.17.20",
     "@types/node": "^20.19.17",
+    "@types/nodemailer": "^7.0.2",
+    "@types/qrcode": "^1.5.5",
     "@types/react": "^19.1.13",
     "@types/react-dom": "^19.1.9",
-    "typescript": "^5.9.2"
+    "fast-glob": "^3.3.3",
+    "glob": "^11.0.3",
+    "jscodeshift": "^17.3.0",
+    "prisma": "6.16.3",
+    "ts-morph": "^27.0.0",
+    "typescript": "^5.9.3"
   },
   "engines": {
     "node": "20.x"
diff --git a/packages/db-core/src/client.ts b/packages/db-core/src/client.ts
index 15436bde..82154005 100644
--- a/packages/db-core/src/client.ts
+++ b/packages/db-core/src/client.ts
@@ -1,10 +1,13 @@
-import { PrismaClient } from "@prisma/client";
-const globalForPrisma = globalThis as unknown as { prisma?: PrismaClient };
+import { PrismaClient } from "./generated";
+export type { Prisma } from "./generated";
 
-export const prisma =
-  globalForPrisma.prisma ??
-  new PrismaClient({
-    datasources: { db: { url: process.env.CORE_DATABASE_URL } },
-  });
+// Node-only; in Edge nie importieren
+declare global { var __PRISMA_CORE__: PrismaClient | undefined; }
 
-if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
+const url = process.env.CORE_DATABASE_URL;
+if (!url) throw new Error("CORE_DATABASE_URL is not set.");
+
+export const prisma: PrismaClient =
+  global.__PRISMA_CORE__ ?? new PrismaClient({ datasources: { db: { url } } });
+
+if (process.env.NODE_ENV !== "production") global.__PRISMA_CORE__ = prisma;
diff --git a/pnpm-lock.yaml b/pnpm-lock.yaml
index 9dba0083..c93bc0bb 100644
--- a/pnpm-lock.yaml
+++ b/pnpm-lock.yaml
@@ -8,61 +8,145 @@ importers:
 
   .:
     dependencies:
+      '@aws-sdk/client-s3':
+        specifier: ^3.901.0
+        version: 3.901.0
       '@prisma/client':
-        specifier: ^6.16.2
-        version: 6.16.2(prisma@6.16.2(typescript@5.9.2))(typescript@5.9.2)
+        specifier: 6.16.3
+        version: 6.16.3(prisma@6.16.3(typescript@5.9.3))(typescript@5.9.3)
+      '@radix-ui/react-tooltip':
+        specifier: ^1.2.8
+        version: 1.2.8(@types/react-dom@19.1.9(@types/react@19.1.13))(@types/react@19.1.13)(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+      '@upstash/redis':
+        specifier: ^1.35.4
+        version: 1.35.4
+      arangojs:
+        specifier: ^10.1.2
+        version: 10.1.2
+      axios:
+        specifier: ^1.12.2
+        version: 1.12.2
       bullmq:
         specifier: ^5.58.8
         version: 5.58.8
       clsx:
         specifier: ^2.1.1
         version: 2.1.1
+      framer-motion:
+        specifier: ^12.23.22
+        version: 12.23.22(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
       html2canvas:
         specifier: ^1.4.1
         version: 1.4.1
       ioredis:
         specifier: ^5.8.0
         version: 5.8.0
+      jose:
+        specifier: ^6.1.0
+        version: 6.1.0
       jspdf:
         specifier: ^3.0.3
         version: 3.0.3
+      lucide-react:
+        specifier: ^0.545.0
+        version: 0.545.0(react@19.1.1)
+      maplibre-gl:
+        specifier: ^5.8.0
+        version: 5.8.0
       mongodb:
         specifier: ^6.20.0
         version: 6.20.0
+      mongoose:
+        specifier: ^8.18.3
+        version: 8.18.3
       nodemailer:
         specifier: ^7.0.6
         version: 7.0.6
+      openai:
+        specifier: ^6.2.0
+        version: 6.2.0(zod@4.1.11)
+      pino:
+        specifier: ^10.0.0
+        version: 10.0.0
       qrcode:
         specifier: ^1.5.4
         version: 1.5.4
+      react-beautiful-dnd:
+        specifier: ^13.1.1
+        version: 13.1.1(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
       react-hot-toast:
         specifier: ^2.6.0
         version: 2.6.0(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+      react-icons:
+        specifier: ^4.12.0
+        version: 4.12.0(react@19.1.1)
+      react-qr-code:
+        specifier: ^2.0.18
+        version: 2.0.18(react@19.1.1)
       recharts:
         specifier: ^3.2.1
         version: 3.2.1(@types/react@19.1.13)(react-dom@19.1.1(react@19.1.1))(react-is@19.1.1)(react@19.1.1)(redux@5.0.1)
+      redis:
+        specifier: ^5.8.2
+        version: 5.8.2
       sanitize-html:
         specifier: ^2.17.0
         version: 2.17.0
       swr:
         specifier: ^2.3.6
         version: 2.3.6(react@19.1.1)
+      ulid:
+        specifier: ^3.0.1
+        version: 3.0.1
+      uuid:
+        specifier: ^13.0.0
+        version: 13.0.0
+      xlsx:
+        specifier: ^0.18.5
+        version: 0.18.5
       zod:
         specifier: ^4.1.11
         version: 4.1.11
     devDependencies:
+      '@types/jsonwebtoken':
+        specifier: ^9.0.10
+        version: 9.0.10
+      '@types/lodash':
+        specifier: ^4.17.20
+        version: 4.17.20
       '@types/node':
         specifier: ^20.19.17
         version: 20.19.17
+      '@types/nodemailer':
+        specifier: ^7.0.2
+        version: 7.0.2
+      '@types/qrcode':
+        specifier: ^1.5.5
+        version: 1.5.5
       '@types/react':
         specifier: ^19.1.13
         version: 19.1.13
       '@types/react-dom':
         specifier: ^19.1.9
         version: 19.1.9(@types/react@19.1.13)
+      fast-glob:
+        specifier: ^3.3.3
+        version: 3.3.3
+      glob:
+        specifier: ^11.0.3
+        version: 11.0.3
+      jscodeshift:
+        specifier: ^17.3.0
+        version: 17.3.0
+      prisma:
+        specifier: 6.16.3
+        version: 6.16.3(typescript@5.9.3)
+      ts-morph:
+        specifier: ^27.0.0
+        version: 27.0.0
       typescript:
-        specifier: ^5.9.2
-        version: 5.9.2
+        specifier: ^5.9.3
+        version: 5.9.3
 
   apps/landing:
     dependencies:
@@ -74,10 +158,10 @@ importers:
         version: 2.1.1
       next:
         specifier: 15.3.2
-        version: 15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+        version: 15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
       next-intl:
         specifier: ^3.6.0
-        version: 3.26.5(next@15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1))(react@19.1.1)
+        version: 3.26.5(next@15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1))(react@19.1.1)
       nodemailer:
         specifier: 6.9.13
         version: 6.9.13
@@ -168,10 +252,10 @@ importers:
         version: 5.28.2
       next:
         specifier: 15.3.2
-        version: 15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+        version: 15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
       next-auth:
         specifier: ^4.24.11
-        version: 4.24.11(next@15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1))(nodemailer@6.9.13)(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+        version: 4.24.11(next@15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1))(nodemailer@6.9.13)(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
       otplib:
         specifier: ^12.0.1
         version: 12.0.1
@@ -227,11 +311,15 @@ importers:
 
   features: {}
 
+  packages/db-core: {}
+
+  packages/db-web: {}
+
   packages/ui:
     dependencies:
       next:
         specifier: ^14 || ^15
-        version: 15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+        version: 15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
       react:
         specifier: ^18 || ^19
         version: 19.1.1
@@ -261,10 +349,346 @@ packages:
     resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
     engines: {node: '>=10'}
 
+  '@aws-crypto/crc32@5.2.0':
+    resolution: {integrity: sha512-nLbCWqQNgUiwwtFsen1AdzAtvuLRsQS8rYgMuxCrdKf9kOssamGLuPwyTY9wyYblNr9+1XM8v6zoDTPPSIeANg==}
+    engines: {node: '>=16.0.0'}
+
+  '@aws-crypto/crc32c@5.2.0':
+    resolution: {integrity: sha512-+iWb8qaHLYKrNvGRbiYRHSdKRWhto5XlZUEBwDjYNf+ly5SVYG6zEoYIdxvf5R3zyeP16w4PLBn3rH1xc74Rag==}
+
+  '@aws-crypto/sha1-browser@5.2.0':
+    resolution: {integrity: sha512-OH6lveCFfcDjX4dbAvCFSYUjJZjDr/3XJ3xHtjn3Oj5b9RjojQo8npoLeA/bNwkOkrSQ0wgrHzXk4tDRxGKJeg==}
+
+  '@aws-crypto/sha256-browser@5.2.0':
+    resolution: {integrity: sha512-AXfN/lGotSQwu6HNcEsIASo7kWXZ5HYWvfOmSNKDsEqC4OashTp8alTmaz+F7TC2L083SFv5RdB+qU3Vs1kZqw==}
+
+  '@aws-crypto/sha256-js@5.2.0':
+    resolution: {integrity: sha512-FFQQyu7edu4ufvIZ+OadFpHHOt+eSTBaYaki44c+akjg7qZg9oOQeLlk77F6tSYqjDAFClrHJk9tMf0HdVyOvA==}
+    engines: {node: '>=16.0.0'}
+
+  '@aws-crypto/supports-web-crypto@5.2.0':
+    resolution: {integrity: sha512-iAvUotm021kM33eCdNfwIN//F77/IADDSs58i+MDaOqFrVjZo9bAal0NK7HurRuWLLpF1iLX7gbWrjHjeo+YFg==}
+
+  '@aws-crypto/util@5.2.0':
+    resolution: {integrity: sha512-4RkU9EsI6ZpBve5fseQlGNUWKMa1RLPQ1dnjnQoe07ldfIzcsGb5hC5W0Dm7u423KWzawlrpbjXBrXCEv9zazQ==}
+
+  '@aws-sdk/client-s3@3.901.0':
+    resolution: {integrity: sha512-wyKhZ51ur1tFuguZ6PgrUsot9KopqD0Tmxw8O8P/N3suQDxFPr0Yo7Y77ezDRDZQ95Ml3C0jlvx79HCo8VxdWA==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/client-sesv2@3.901.0':
+    resolution: {integrity: sha512-xCS2qZlvgbXKZbJW8XgU8OEAL7BJyVqJ5yODOQxa1TJFZ/+wEhik9XZtULjNnQqa29sJDpPltuSDG1aDG2OUxQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/client-sso@3.901.0':
+    resolution: {integrity: sha512-sGyDjjkJ7ppaE+bAKL/Q5IvVCxtoyBIzN+7+hWTS/mUxWJ9EOq9238IqmVIIK6sYNIzEf9yhobfMARasPYVTNg==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/core@3.901.0':
+    resolution: {integrity: sha512-brKAc3y64tdhyuEf+OPIUln86bRTqkLgb9xkd6kUdIeA5+qmp/N6amItQz+RN4k4O3kqkCPYnAd3LonTKluobw==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/credential-provider-env@3.901.0':
+    resolution: {integrity: sha512-5hAdVl3tBuARh3zX5MLJ1P/d+Kr5kXtDU3xm1pxUEF4xt2XkEEpwiX5fbkNkz2rbh3BCt2gOHsAbh6b3M7n+DA==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/credential-provider-http@3.901.0':
+    resolution: {integrity: sha512-Ggr7+0M6QZEsrqRkK7iyJLf4LkIAacAxHz9c4dm9hnDdU7vqrlJm6g73IxMJXWN1bIV7IxfpzB11DsRrB/oNjQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/credential-provider-ini@3.901.0':
+    resolution: {integrity: sha512-zxadcDS0hNJgv8n4hFYJNOXyfjaNE1vvqIiF/JzZSQpSSYXzCd+WxXef5bQh+W3giDtRUmkvP5JLbamEFjZKyw==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/credential-provider-node@3.901.0':
+    resolution: {integrity: sha512-dPuFzMF7L1s/lQyT3wDxqLe82PyTH+5o1jdfseTEln64LJMl0ZMWaKX/C1UFNDxaTd35Cgt1bDbjjAWHMiKSFQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/credential-provider-process@3.901.0':
+    resolution: {integrity: sha512-/IWgmgM3Cl1wTdJA5HqKMAojxLkYchh5kDuphApxKhupLu6Pu0JBOHU8A5GGeFvOycyaVwosod6zDduINZxe+A==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/credential-provider-sso@3.901.0':
+    resolution: {integrity: sha512-SjmqZQHmqFSET7+6xcZgtH7yEyh5q53LN87GqwYlJZ6KJ5oNw11acUNEhUOL1xTSJEvaWqwTIkS2zqrzLcM9bw==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/credential-provider-web-identity@3.901.0':
+    resolution: {integrity: sha512-NYjy/6NLxH9m01+pfpB4ql8QgAorJcu8tw69kzHwUd/ql6wUDTbC7HcXqtKlIwWjzjgj2BKL7j6SyFapgCuafA==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-bucket-endpoint@3.901.0':
+    resolution: {integrity: sha512-mPF3N6eZlVs9G8aBSzvtoxR1RZqMo1aIwR+X8BAZSkhfj55fVF2no4IfPXfdFO3I66N+zEQ8nKoB0uTATWrogQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-expect-continue@3.901.0':
+    resolution: {integrity: sha512-bwq9nj6MH38hlJwOY9QXIDwa6lI48UsaZpaXbdD71BljEIRlxDzfB4JaYb+ZNNK7RIAdzsP/K05mJty6KJAQHw==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-flexible-checksums@3.901.0':
+    resolution: {integrity: sha512-63lcKfggVUFyXhE4SsFXShCTCyh7ZHEqXLyYEL4DwX+VWtxutf9t9m3fF0TNUYDE8eEGWiRXhegj8l4FjuW+wA==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-host-header@3.901.0':
+    resolution: {integrity: sha512-yWX7GvRmqBtbNnUW7qbre3GvZmyYwU0WHefpZzDTYDoNgatuYq6LgUIQ+z5C04/kCRoFkAFrHag8a3BXqFzq5A==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-location-constraint@3.901.0':
+    resolution: {integrity: sha512-MuCS5R2ngNoYifkVt05CTULvYVWX0dvRT0/Md4jE3a0u0yMygYy31C1zorwfE/SUgAQXyLmUx8ATmPp9PppImQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-logger@3.901.0':
+    resolution: {integrity: sha512-UoHebjE7el/tfRo8/CQTj91oNUm+5Heus5/a4ECdmWaSCHCS/hXTsU3PTTHAY67oAQR8wBLFPfp3mMvXjB+L2A==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-recursion-detection@3.901.0':
+    resolution: {integrity: sha512-Wd2t8qa/4OL0v/oDpCHHYkgsXJr8/ttCxrvCKAt0H1zZe2LlRhY9gpDVKqdertfHrHDj786fOvEQA28G1L75Dg==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-sdk-s3@3.901.0':
+    resolution: {integrity: sha512-prgjVC3fDT2VIlmQPiw/cLee8r4frTam9GILRUVQyDdNtshNwV3MiaSCLzzQJjKJlLgnBLNUHJCSmvUVtg+3iA==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-ssec@3.901.0':
+    resolution: {integrity: sha512-YiLLJmA3RvjL38mFLuu8fhTTGWtp2qT24VqpucgfoyziYcTgIQkJJmKi90Xp6R6/3VcArqilyRgM1+x8i/em+Q==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/middleware-user-agent@3.901.0':
+    resolution: {integrity: sha512-Zby4F03fvD9xAgXGPywyk4bC1jCbnyubMEYChLYohD+x20ULQCf+AimF/Btn7YL+hBpzh1+RmqmvZcx+RgwgNQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/nested-clients@3.901.0':
+    resolution: {integrity: sha512-feAAAMsVwctk2Tms40ONybvpfJPLCmSdI+G+OTrNpizkGLNl6ik2Ng2RzxY6UqOfN8abqKP/DOUj1qYDRDG8ag==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/region-config-resolver@3.901.0':
+    resolution: {integrity: sha512-7F0N888qVLHo4CSQOsnkZ4QAp8uHLKJ4v3u09Ly5k4AEStrSlFpckTPyUx6elwGL+fxGjNE2aakK8vEgzzCV0A==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/signature-v4-multi-region@3.901.0':
+    resolution: {integrity: sha512-2IWxbll/pRucp1WQkHi2W5E2SVPGBvk4Is923H7gpNksbVFws18ItjMM8ZpGm44cJEoy1zR5gjhLFklatpuoOw==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/token-providers@3.901.0':
+    resolution: {integrity: sha512-pJEr1Ggbc/uVTDqp9IbNu9hdr0eQf3yZix3s4Nnyvmg4xmJSGAlbPC9LrNr5u3CDZoc8Z9CuLrvbP4MwYquNpQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/types@3.901.0':
+    resolution: {integrity: sha512-FfEM25hLEs4LoXsLXQ/q6X6L4JmKkKkbVFpKD4mwfVHtRVQG6QxJiCPcrkcPISquiy6esbwK2eh64TWbiD60cg==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/util-arn-parser@3.893.0':
+    resolution: {integrity: sha512-u8H4f2Zsi19DGnwj5FSZzDMhytYF/bCh37vAtBsn3cNDL3YG578X5oc+wSX54pM3tOxS+NY7tvOAo52SW7koUA==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/util-endpoints@3.901.0':
+    resolution: {integrity: sha512-5nZP3hGA8FHEtKvEQf4Aww5QZOkjLW1Z+NixSd+0XKfHvA39Ah5sZboScjLx0C9kti/K3OGW1RCx5K9Zc3bZqg==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/util-locate-window@3.893.0':
+    resolution: {integrity: sha512-T89pFfgat6c8nMmpI8eKjBcDcgJq36+m9oiXbcUzeU55MP9ZuGgBomGjGnHaEyF36jenW9gmg3NfZDm0AO2XPg==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws-sdk/util-user-agent-browser@3.901.0':
+    resolution: {integrity: sha512-Ntb6V/WFI21Ed4PDgL/8NSfoZQQf9xzrwNgiwvnxgAl/KvAvRBgQtqj5gHsDX8Nj2YmJuVoHfH9BGjL9VQ4WNg==}
+
+  '@aws-sdk/util-user-agent-node@3.901.0':
+    resolution: {integrity: sha512-l59KQP5TY7vPVUfEURc7P5BJKuNg1RSsAKBQW7LHLECXjLqDUbo2SMLrexLBEoArSt6E8QOrIN0C8z/0Xk0jYw==}
+    engines: {node: '>=18.0.0'}
+    peerDependencies:
+      aws-crt: '>=1.0.0'
+    peerDependenciesMeta:
+      aws-crt:
+        optional: true
+
+  '@aws-sdk/xml-builder@3.901.0':
+    resolution: {integrity: sha512-pxFCkuAP7Q94wMTNPAwi6hEtNrp/BdFf+HOrIEeFQsk4EoOmpKY3I6S+u6A9Wg295J80Kh74LqDWM22ux3z6Aw==}
+    engines: {node: '>=18.0.0'}
+
+  '@aws/lambda-invoke-store@0.0.1':
+    resolution: {integrity: sha512-ORHRQ2tmvnBXc8t/X9Z8IcSbBA4xTLKuN873FopzklHMeqBst7YG0d+AX97inkvDX+NChYtSr+qGfcqGFaI8Zw==}
+    engines: {node: '>=18.0.0'}
+
+  '@babel/code-frame@7.27.1':
+    resolution: {integrity: sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/compat-data@7.28.4':
+    resolution: {integrity: sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/core@7.28.4':
+    resolution: {integrity: sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/generator@7.28.3':
+    resolution: {integrity: sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-annotate-as-pure@7.27.3':
+    resolution: {integrity: sha512-fXSwMQqitTGeHLBC08Eq5yXz2m37E4pJX1qAU1+2cNedz/ifv/bVXft90VeSav5nFO61EcNgwr0aJxbyPaWBPg==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-compilation-targets@7.27.2':
+    resolution: {integrity: sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-create-class-features-plugin@7.28.3':
+    resolution: {integrity: sha512-V9f6ZFIYSLNEbuGA/92uOvYsGCJNsuA8ESZ4ldc09bWk/j8H8TKiPw8Mk1eG6olpnO0ALHJmYfZvF4MEE4gajg==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0
+
+  '@babel/helper-globals@7.28.0':
+    resolution: {integrity: sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-member-expression-to-functions@7.27.1':
+    resolution: {integrity: sha512-E5chM8eWjTp/aNoVpcbfM7mLxu9XGLWYise2eBKGQomAk/Mb4XoxyqXTZbuTohbsl8EKqdlMhnDI2CCLfcs9wA==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-module-imports@7.27.1':
+    resolution: {integrity: sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-module-transforms@7.28.3':
+    resolution: {integrity: sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0
+
+  '@babel/helper-optimise-call-expression@7.27.1':
+    resolution: {integrity: sha512-URMGH08NzYFhubNSGJrpUEphGKQwMQYBySzat5cAByY1/YgIRkULnIy3tAMeszlL/so2HbeilYloUmSpd7GdVw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-plugin-utils@7.27.1':
+    resolution: {integrity: sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-replace-supers@7.27.1':
+    resolution: {integrity: sha512-7EHz6qDZc8RYS5ElPoShMheWvEgERonFCs7IAonWLLUTXW59DP14bCZt89/GKyreYn8g3S83m21FelHKbeDCKA==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0
+
+  '@babel/helper-skip-transparent-expression-wrappers@7.27.1':
+    resolution: {integrity: sha512-Tub4ZKEXqbPjXgWLl2+3JpQAYBJ8+ikpQ2Ocj/q/r0LwE3UhENh7EUabyHjz2kCEsrRY83ew2DQdHluuiDQFzg==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-string-parser@7.27.1':
+    resolution: {integrity: sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-validator-identifier@7.27.1':
+    resolution: {integrity: sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helper-validator-option@7.27.1':
+    resolution: {integrity: sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/helpers@7.28.4':
+    resolution: {integrity: sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/parser@7.28.4':
+    resolution: {integrity: sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==}
+    engines: {node: '>=6.0.0'}
+    hasBin: true
+
+  '@babel/plugin-syntax-flow@7.27.1':
+    resolution: {integrity: sha512-p9OkPbZ5G7UT1MofwYFigGebnrzGJacoBSQM0/6bi/PUMVE+qlWDD/OalvQKbwgQzU6dl0xAv6r4X7Jme0RYxA==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-syntax-jsx@7.27.1':
+    resolution: {integrity: sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-syntax-typescript@7.27.1':
+    resolution: {integrity: sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-transform-class-properties@7.27.1':
+    resolution: {integrity: sha512-D0VcalChDMtuRvJIu3U/fwWjf8ZMykz5iZsg77Nuj821vCKI3zCyRLwRdWbsuJ/uRwZhZ002QtCqIkwC/ZkvbA==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-transform-flow-strip-types@7.27.1':
+    resolution: {integrity: sha512-G5eDKsu50udECw7DL2AcsysXiQyB7Nfg521t2OAJ4tbfTJ27doHLeF/vlI1NZGlLdbb/v+ibvtL1YBQqYOwJGg==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-transform-modules-commonjs@7.27.1':
+    resolution: {integrity: sha512-OJguuwlTYlN0gBZFRPqwOGNWssZjfIUdS7HMYtN8c1KmwpwHFBwTeFZrg9XZa+DFTitWOW5iTAG7tyCUPsCCyw==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-transform-nullish-coalescing-operator@7.27.1':
+    resolution: {integrity: sha512-aGZh6xMo6q9vq1JGcw58lZ1Z0+i0xB2x0XaauNIUXd6O1xXc3RwoWEBlsTQrY4KQ9Jf0s5rgD6SiNkaUdJegTA==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-transform-optional-chaining@7.27.1':
+    resolution: {integrity: sha512-BQmKPPIuc8EkZgNKsv0X4bPmOoayeu4F1YCwx2/CfmDSXDbp7GnzlUH+/ul5VGfRg1AoFPsrIThlEBj2xb4CAg==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-transform-private-methods@7.27.1':
+    resolution: {integrity: sha512-10FVt+X55AjRAYI9BrdISN9/AQWHqldOeZDUoLyif1Kn05a56xVBXb8ZouL8pZ9jem8QpXaOt8TS7RHUIS+GPA==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/plugin-transform-typescript@7.28.0':
+    resolution: {integrity: sha512-4AEiDEBPIZvLQaWlc9liCavE0xRM0dNca41WtBeM3jgFptfUOSG9z0uteLhq6+3rq+WB6jIvUwKDTpXEHPJ2Vg==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/preset-flow@7.27.1':
+    resolution: {integrity: sha512-ez3a2it5Fn6P54W8QkbfIyyIbxlXvcxyWHHvno1Wg0Ej5eiJY5hBb8ExttoIOJJk7V2dZE6prP7iby5q2aQ0Lg==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/preset-typescript@7.27.1':
+    resolution: {integrity: sha512-l7WfQfX0WK4M0v2RudjuQK4u99BS6yLHYEmdtVPP7lKV013zr9DygFuWNlnbvQ9LR+LS0Egz/XAvGx5U9MX0fQ==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
+  '@babel/register@7.28.3':
+    resolution: {integrity: sha512-CieDOtd8u208eI49bYl4z1J22ySFw87IGwE+IswFEExH7e3rLgKb0WNQeumnacQ1+VoDJLYI5QFA3AJZuyZQfA==}
+    engines: {node: '>=6.9.0'}
+    peerDependencies:
+      '@babel/core': ^7.0.0-0
+
   '@babel/runtime@7.28.4':
     resolution: {integrity: sha512-Q/N6JNWvIvPnLDvjlE1OUBLPQHH6l3CltCEsHIujp45zQUSSh8K+gHnaEX45yAT1nyngnINhvWtzN+Nb9D8RAQ==}
     engines: {node: '>=6.9.0'}
 
+  '@babel/template@7.27.2':
+    resolution: {integrity: sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/traverse@7.28.4':
+    resolution: {integrity: sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==}
+    engines: {node: '>=6.9.0'}
+
+  '@babel/types@7.28.4':
+    resolution: {integrity: sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==}
+    engines: {node: '>=6.9.0'}
+
   '@emnapi/core@1.5.0':
     resolution: {integrity: sha512-sbP8GzB1WDzacS8fgNPpHlp6C9VZe+SJP3F90W9rLemaQj2PzIuTEl1qDOYQf58YIpyjViI24y9aPWCjEzY2cg==}
 
@@ -646,6 +1070,14 @@ packages:
   '@ioredis/commands@1.4.0':
     resolution: {integrity: sha512-aFT2yemJJo+TZCmieA7qnYGQooOS7QfNmYrzGtsYd3g9j5iDP8AimYYAesf79ohjbLG12XxC4nG5DyEnC88AsQ==}
 
+  '@isaacs/balanced-match@4.0.1':
+    resolution: {integrity: sha512-yzMTt9lEb8Gv7zRioUilSglI0c0smZ9k5D65677DLWLtWJaXIS3CqcGyUFByYKlnUj6TkjLVs54fBl6+TiGQDQ==}
+    engines: {node: 20 || >=22}
+
+  '@isaacs/brace-expansion@5.0.0':
+    resolution: {integrity: sha512-ZT55BDLV0yv0RBm2czMiZ+SqCGO7AvmOM3G/w2xhVPH+te0aKgFjmBvGlL1dH+ql2tgGO3MVrbb3jCKyvpgnxA==}
+    engines: {node: 20 || >=22}
+
   '@isaacs/cliui@8.0.2':
     resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
     engines: {node: '>=12'}
@@ -653,6 +1085,9 @@ packages:
   '@jridgewell/gen-mapping@0.3.13':
     resolution: {integrity: sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==}
 
+  '@jridgewell/remapping@2.3.5':
+    resolution: {integrity: sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==}
+
   '@jridgewell/resolve-uri@3.1.2':
     resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
     engines: {node: '>=6.0.0'}
@@ -663,6 +1098,37 @@ packages:
   '@jridgewell/trace-mapping@0.3.31':
     resolution: {integrity: sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==}
 
+  '@mapbox/geojson-rewind@0.5.2':
+    resolution: {integrity: sha512-tJaT+RbYGJYStt7wI3cq4Nl4SXxG8W7JDG5DMJu97V25RnbNg3QtQtf+KD+VLjNpWKYsRvXDNmNrBgEETr1ifA==}
+    hasBin: true
+
+  '@mapbox/jsonlint-lines-primitives@2.0.2':
+    resolution: {integrity: sha512-rY0o9A5ECsTQRVhv7tL/OyDpGAoUB4tTvLiW1DSzQGq4bvTPhNw1VpSNjDJc5GFZ2XuyOtSWSVN05qOtcD71qQ==}
+    engines: {node: '>= 0.6'}
+
+  '@mapbox/point-geometry@1.1.0':
+    resolution: {integrity: sha512-YGcBz1cg4ATXDCM/71L9xveh4dynfGmcLDqufR+nQQy3fKwsAZsWd/x4621/6uJaeB9mwOHE6hPeDgXz9uViUQ==}
+
+  '@mapbox/tiny-sdf@2.0.7':
+    resolution: {integrity: sha512-25gQLQMcpivjOSA40g3gO6qgiFPDpWRoMfd+G/GoppPIeP6JDaMMkMrEJnMZhKyyS6iKwVt5YKu02vCUyJM3Ug==}
+
+  '@mapbox/unitbezier@0.0.1':
+    resolution: {integrity: sha512-nMkuDXFv60aBr9soUG5q+GvZYL+2KZHVvsqFCzqnkGEf46U2fvmytHaEVc1/YZbiLn8X+eR3QzX1+dwDO1lxlw==}
+
+  '@mapbox/vector-tile@2.0.4':
+    resolution: {integrity: sha512-AkOLcbgGTdXScosBWwmmD7cDlvOjkg/DetGva26pIRiZPdeJYjYKarIlb4uxVzi6bwHO6EWH82eZ5Nuv4T5DUg==}
+
+  '@mapbox/whoots-js@3.1.0':
+    resolution: {integrity: sha512-Es6WcD0nO5l+2BOQS4uLfNPYQaNDfbot3X1XUoloz+x0mPDS3eeORZJl06HXjwBG1fOGwCRnzK88LMdxKRrd6Q==}
+    engines: {node: '>=6.0.0'}
+
+  '@maplibre/maplibre-gl-style-spec@24.2.0':
+    resolution: {integrity: sha512-cE80g83fRcBbZbQC70siOUxUK6YJ/5ZkClDZbmm+hzrUbv+J6yntkMmcpdz9DbOrWOM7FHKR5rruc6Q/hWx5cA==}
+    hasBin: true
+
+  '@maplibre/vt-pbf@4.0.3':
+    resolution: {integrity: sha512-YsW99BwnT+ukJRkseBcLuZHfITB4puJoxnqPVjo72rhW/TaawVYsgQHcqWLzTxqknttYoDpgyERzWSa/XrETdA==}
+
   '@mongodb-js/saslprep@1.3.1':
     resolution: {integrity: sha512-6nZrq5kfAz0POWyhljnbWQQJQ5uT8oE2ddX303q1uY0tWsivWKgBDXBBvuFPwOqRRalXJuVO9EjOdVtuhLX0zg==}
 
@@ -803,8 +1269,8 @@ packages:
       typescript:
         optional: true
 
-  '@prisma/client@6.16.2':
-    resolution: {integrity: sha512-E00PxBcalMfYO/TWnXobBVUai6eW/g5OsifWQsQDzJYm7yaY+IRLo7ZLsaefi0QkTpxfuhFcQ/w180i6kX3iJw==}
+  '@prisma/client@6.16.3':
+    resolution: {integrity: sha512-JfNfAtXG+/lIopsvoZlZiH2k5yNx87mcTS4t9/S5oufM1nKdXYxOvpDC1XoTCFBa5cQh7uXnbMPsmZrwZY80xw==}
     engines: {node: '>=18.18'}
     peerDependencies:
       prisma: '*'
@@ -818,35 +1284,38 @@ packages:
   '@prisma/config@6.16.1':
     resolution: {integrity: sha512-sz3uxRPNL62QrJ0EYiujCFkIGZ3hg+9hgC1Ae1HjoYuj0BxCqHua4JNijYvYCrh9LlofZDZcRBX3tHBfLvAngA==}
 
-  '@prisma/config@6.16.2':
-    resolution: {integrity: sha512-mKXSUrcqXj0LXWPmJsK2s3p9PN+aoAbyMx7m5E1v1FufofR1ZpPoIArjjzOIm+bJRLLvYftoNYLx1tbHgF9/yg==}
+  '@prisma/config@6.16.3':
+    resolution: {integrity: sha512-VlsLnG4oOuKGGMToEeVaRhoTBZu5H3q51jTQXb/diRags3WV0+BQK5MolJTtP6G7COlzoXmWeS11rNBtvg+qFQ==}
 
   '@prisma/debug@6.16.1':
     resolution: {integrity: sha512-RWv/VisW5vJE4cDRTuAHeVedtGoItXTnhuLHsSlJ9202QKz60uiXWywBlVcqXVq8bFeIZoCoWH+R1duZJPwqLw==}
 
-  '@prisma/debug@6.16.2':
-    resolution: {integrity: sha512-bo4/gA/HVV6u8YK2uY6glhNsJ7r+k/i5iQ9ny/3q5bt9ijCj7WMPUwfTKPvtEgLP+/r26Z686ly11hhcLiQ8zA==}
+  '@prisma/debug@6.16.3':
+    resolution: {integrity: sha512-89DdqWtdKd7qoc9/qJCKLTazj3W3zPEiz0hc7HfZdpjzm21c7orOUB5oHWJsG+4KbV4cWU5pefq3CuDVYF9vgA==}
 
   '@prisma/engines-version@6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43':
     resolution: {integrity: sha512-ThvlDaKIVrnrv97ujNFDYiQbeMQpLa0O86HFA2mNoip4mtFqM7U5GSz2ie1i2xByZtvPztJlNRgPsXGeM/kqAA==}
 
+  '@prisma/engines-version@6.16.1-1.bb420e667c1820a8c05a38023385f6cc7ef8e83a':
+    resolution: {integrity: sha512-fftRmosBex48Ph1v2ll1FrPpirwtPZpNkE5CDCY1Lw2SD2ctyrLlVlHiuxDAAlALwWBOkPbAll4+EaqdGuMhJw==}
+
   '@prisma/engines@6.16.1':
     resolution: {integrity: sha512-EOnEM5HlosPudBqbI+jipmaW/vQEaF0bKBo4gVkGabasINHR6RpC6h44fKZEqx4GD8CvH+einD2+b49DQrwrAg==}
 
-  '@prisma/engines@6.16.2':
-    resolution: {integrity: sha512-7yf3AjfPUgsg/l7JSu1iEhsmZZ/YE00yURPjTikqm2z4btM0bCl2coFtTGfeSOWbQMmq45Jab+53yGUIAT1sjA==}
+  '@prisma/engines@6.16.3':
+    resolution: {integrity: sha512-b+Rl4nzQDcoqe6RIpSHv8f5lLnwdDGvXhHjGDiokObguAAv/O1KaX1Oc69mBW/GFWKQpCkOraobLjU6s1h8HGg==}
 
   '@prisma/fetch-engine@6.16.1':
     resolution: {integrity: sha512-fl/PKQ8da5YTayw86WD3O9OmKJEM43gD3vANy2hS5S1CnfW2oPXk+Q03+gUWqcKK306QqhjjIHRFuTZ31WaosQ==}
 
-  '@prisma/fetch-engine@6.16.2':
-    resolution: {integrity: sha512-wPnZ8DMRqpgzye758ZvfAMiNJRuYpz+rhgEBZi60ZqDIgOU2694oJxiuu3GKFeYeR/hXxso4/2oBC243t/whxQ==}
+  '@prisma/fetch-engine@6.16.3':
+    resolution: {integrity: sha512-bUoRIkVaI+CCaVGrSfcKev0/Mk4ateubqWqGZvQ9uCqFv2ENwWIR3OeNuGin96nZn5+SkebcD7RGgKr/+mJelw==}
 
   '@prisma/get-platform@6.16.1':
     resolution: {integrity: sha512-kUfg4vagBG7dnaGRcGd1c0ytQFcDj2SUABiuveIpL3bthFdTLI6PJeLEia6Q8Dgh+WhPdo0N2q0Fzjk63XTyaA==}
 
-  '@prisma/get-platform@6.16.2':
-    resolution: {integrity: sha512-U/P36Uke5wS7r1+omtAgJpEB94tlT4SdlgaeTc6HVTTT93pXj7zZ+B/cZnmnvjcNPfWddgoDx8RLjmQwqGDYyA==}
+  '@prisma/get-platform@6.16.3':
+    resolution: {integrity: sha512-X1LxiFXinJ4iQehrodGp0f66Dv6cDL0GbRlcCoLtSu6f4Wi+hgo7eND/afIs5029GQLgNWKZ46vn8hjyXTsHLA==}
 
   '@radix-ui/primitive@1.1.3':
     resolution: {integrity: sha512-JTF99U/6XIjCBo0wqkU5sK10glYe27MRRsfwoiq5zzOEZLHU3A3KCMa5X/azekYRCJ0HlwI0crAXS/5dEHTzDg==}
@@ -1217,55 +1686,274 @@ packages:
   '@rushstack/eslint-patch@1.12.0':
     resolution: {integrity: sha512-5EwMtOqvJMMa3HbmxLlF74e+3/HhwBTMcvt3nqVJgGCozO6hzIPOBlwm8mGVNR9SN2IJpxSnlxczyDjcn7qIyw==}
 
-  '@standard-schema/spec@1.0.0':
-    resolution: {integrity: sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==}
+  '@smithy/abort-controller@4.2.0':
+    resolution: {integrity: sha512-PLUYa+SUKOEZtXFURBu/CNxlsxfaFGxSBPcStL13KpVeVWIfdezWyDqkz7iDLmwnxojXD0s5KzuB5HGHvt4Aeg==}
+    engines: {node: '>=18.0.0'}
 
-  '@standard-schema/utils@0.3.0':
-    resolution: {integrity: sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==}
+  '@smithy/chunked-blob-reader-native@4.2.0':
+    resolution: {integrity: sha512-HNbGWdyTfSM1nfrZKQjYTvD8k086+M8s1EYkBUdGC++lhxegUp2HgNf5RIt6oOGVvsC26hBCW/11tv8KbwLn/Q==}
+    engines: {node: '>=18.0.0'}
 
-  '@swc/counter@0.1.3':
-    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}
+  '@smithy/chunked-blob-reader@5.2.0':
+    resolution: {integrity: sha512-WmU0TnhEAJLWvfSeMxBNe5xtbselEO8+4wG0NtZeL8oR21WgH1xiO37El+/Y+H/Ie4SCwBy3MxYWmOYaGgZueA==}
+    engines: {node: '>=18.0.0'}
 
-  '@swc/helpers@0.5.15':
-    resolution: {integrity: sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==}
+  '@smithy/config-resolver@4.3.0':
+    resolution: {integrity: sha512-9oH+n8AVNiLPK/iK/agOsoWfrKZ3FGP3502tkksd6SRsKMYiu7AFX0YXo6YBADdsAj7C+G/aLKdsafIJHxuCkQ==}
+    engines: {node: '>=18.0.0'}
 
-  '@tailwindcss/forms@0.5.10':
-    resolution: {integrity: sha512-utI1ONF6uf/pPNO68kmN1b8rEwNXv3czukalo8VtJH8ksIkZXr3Q3VYudZLkCsDd4Wku120uF02hYK25XGPorw==}
-    peerDependencies:
-      tailwindcss: '>=3.0.0 || >= 3.0.0-alpha.1 || >= 4.0.0-alpha.20 || >= 4.0.0-beta.1'
+  '@smithy/core@3.14.0':
+    resolution: {integrity: sha512-XJ4z5FxvY/t0Dibms/+gLJrI5niRoY0BCmE02fwmPcRYFPI4KI876xaE79YGWIKnEslMbuQPsIEsoU/DXa0DoA==}
+    engines: {node: '>=18.0.0'}
 
-  '@tailwindcss/typography@0.5.19':
-    resolution: {integrity: sha512-w31dd8HOx3k9vPtcQh5QHP9GwKcgbMp87j58qi6xgiBnFFtKEAgCWnDw4qUT8aHwkCp8bKvb/KGKWWHedP0AAg==}
-    peerDependencies:
-      tailwindcss: '>=3.0.0 || insiders || >=4.0.0-alpha.20 || >=4.0.0-beta.1'
+  '@smithy/credential-provider-imds@4.2.0':
+    resolution: {integrity: sha512-SOhFVvFH4D5HJZytb0bLKxCrSnwcqPiNlrw+S4ZXjMnsC+o9JcUQzbZOEQcA8yv9wJFNhfsUiIUKiEnYL68Big==}
+    engines: {node: '>=18.0.0'}
 
-  '@tybys/wasm-util@0.10.1':
-    resolution: {integrity: sha512-9tTaPJLSiejZKx+Bmog4uSubteqTvFrVrURwkmHixBo0G4seD0zUxp98E1DzUBJxLQ3NPwXrGKDiVjwx/DpPsg==}
+  '@smithy/eventstream-codec@4.2.0':
+    resolution: {integrity: sha512-XE7CtKfyxYiNZ5vz7OvyTf1osrdbJfmUy+rbh+NLQmZumMGvY0mT0Cq1qKSfhrvLtRYzMsOBuRpi10dyI0EBPg==}
+    engines: {node: '>=18.0.0'}
 
-  '@types/bcryptjs@3.0.0':
-    resolution: {integrity: sha512-WRZOuCuaz8UcZZE4R5HXTco2goQSI2XxjGY3hbM/xDvwmqFWd4ivooImsMx65OKM6CtNKbnZ5YL+YwAwK7c1dg==}
-    deprecated: This is a stub types definition. bcryptjs provides its own type definitions, so you do not need this installed.
+  '@smithy/eventstream-serde-browser@4.2.0':
+    resolution: {integrity: sha512-U53p7fcrk27k8irLhOwUu+UYnBqsXNLKl1XevOpsxK3y1Lndk8R7CSiZV6FN3fYFuTPuJy5pP6qa/bjDzEkRvA==}
+    engines: {node: '>=18.0.0'}
 
-  '@types/d3-array@3.2.2':
-    resolution: {integrity: sha512-hOLWVbm7uRza0BYXpIIW5pxfrKe0W+D5lrFiAEYR+pb6w3N2SwSMaJbXdUfSEv+dT4MfHBLtn5js0LAWaO6otw==}
+  '@smithy/eventstream-serde-config-resolver@4.3.0':
+    resolution: {integrity: sha512-uwx54t8W2Yo9Jr3nVF5cNnkAAnMCJ8Wrm+wDlQY6rY/IrEgZS3OqagtCu/9ceIcZFQ1zVW/zbN9dxb5esuojfA==}
+    engines: {node: '>=18.0.0'}
 
-  '@types/d3-color@3.1.3':
-    resolution: {integrity: sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==}
+  '@smithy/eventstream-serde-node@4.2.0':
+    resolution: {integrity: sha512-yjM2L6QGmWgJjVu/IgYd6hMzwm/tf4VFX0lm8/SvGbGBwc+aFl3hOzvO/e9IJ2XI+22Tx1Zg3vRpFRs04SWFcg==}
+    engines: {node: '>=18.0.0'}
 
-  '@types/d3-ease@3.0.2':
-    resolution: {integrity: sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==}
+  '@smithy/eventstream-serde-universal@4.2.0':
+    resolution: {integrity: sha512-C3jxz6GeRzNyGKhU7oV656ZbuHY93mrfkT12rmjDdZch142ykjn8do+VOkeRNjSGKw01p4g+hdalPYPhmMwk1g==}
+    engines: {node: '>=18.0.0'}
 
-  '@types/d3-interpolate@3.0.4':
-    resolution: {integrity: sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==}
+  '@smithy/fetch-http-handler@5.3.0':
+    resolution: {integrity: sha512-BG3KSmsx9A//KyIfw+sqNmWFr1YBUr+TwpxFT7yPqAk0yyDh7oSNgzfNH7pS6OC099EGx2ltOULvumCFe8bcgw==}
+    engines: {node: '>=18.0.0'}
 
-  '@types/d3-path@3.1.1':
-    resolution: {integrity: sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==}
+  '@smithy/hash-blob-browser@4.2.0':
+    resolution: {integrity: sha512-MWmrRTPqVKpN8NmxmJPTeQuhewTt8Chf+waB38LXHZoA02+BeWYVQ9ViAwHjug8m7lQb1UWuGqp3JoGDOWvvuA==}
+    engines: {node: '>=18.0.0'}
 
-  '@types/d3-scale@4.0.9':
-    resolution: {integrity: sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==}
+  '@smithy/hash-node@4.2.0':
+    resolution: {integrity: sha512-ugv93gOhZGysTctZh9qdgng8B+xO0cj+zN0qAZ+Sgh7qTQGPOJbMdIuyP89KNfUyfAqFSNh5tMvC+h2uCpmTtA==}
+    engines: {node: '>=18.0.0'}
 
-  '@types/d3-shape@3.1.7':
-    resolution: {integrity: sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==}
+  '@smithy/hash-stream-node@4.2.0':
+    resolution: {integrity: sha512-8dELAuGv+UEjtzrpMeNBZc1sJhO8GxFVV/Yh21wE35oX4lOE697+lsMHBoUIFAUuYkTMIeu0EuJSEsH7/8Y+UQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/invalid-dependency@4.2.0':
+    resolution: {integrity: sha512-ZmK5X5fUPAbtvRcUPtk28aqIClVhbfcmfoS4M7UQBTnDdrNxhsrxYVv0ZEl5NaPSyExsPWqL4GsPlRvtlwg+2A==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/is-array-buffer@2.2.0':
+    resolution: {integrity: sha512-GGP3O9QFD24uGeAXYUjwSTXARoqpZykHadOmA8G5vfJPK0/DC67qa//0qvqrJzL1xc8WQWX7/yc7fwudjPHPhA==}
+    engines: {node: '>=14.0.0'}
+
+  '@smithy/is-array-buffer@4.2.0':
+    resolution: {integrity: sha512-DZZZBvC7sjcYh4MazJSGiWMI2L7E0oCiRHREDzIxi/M2LY79/21iXt6aPLHge82wi5LsuRF5A06Ds3+0mlh6CQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/md5-js@4.2.0':
+    resolution: {integrity: sha512-LFEPniXGKRQArFmDQ3MgArXlClFJMsXDteuQQY8WG1/zzv6gVSo96+qpkuu1oJp4MZsKrwchY0cuAoPKzEbaNA==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/middleware-content-length@4.2.0':
+    resolution: {integrity: sha512-6ZAnwrXFecrA4kIDOcz6aLBhU5ih2is2NdcZtobBDSdSHtE9a+MThB5uqyK4XXesdOCvOcbCm2IGB95birTSOQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/middleware-endpoint@4.3.0':
+    resolution: {integrity: sha512-jFVjuQeV8TkxaRlcCNg0GFVgg98tscsmIrIwRFeC74TIUyLE3jmY9xgc1WXrPQYRjQNK3aRoaIk6fhFRGOIoGw==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/middleware-retry@4.4.0':
+    resolution: {integrity: sha512-yaVBR0vQnOnzex45zZ8ZrPzUnX73eUC8kVFaAAbn04+6V7lPtxn56vZEBBAhgS/eqD6Zm86o6sJs6FuQVoX5qg==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/middleware-serde@4.2.0':
+    resolution: {integrity: sha512-rpTQ7D65/EAbC6VydXlxjvbifTf4IH+sADKg6JmAvhkflJO2NvDeyU9qsWUNBelJiQFcXKejUHWRSdmpJmEmiw==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/middleware-stack@4.2.0':
+    resolution: {integrity: sha512-G5CJ//eqRd9OARrQu9MK1H8fNm2sMtqFh6j8/rPozhEL+Dokpvi1Og+aCixTuwDAGZUkJPk6hJT5jchbk/WCyg==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/node-config-provider@4.3.0':
+    resolution: {integrity: sha512-5QgHNuWdT9j9GwMPPJCKxy2KDxZ3E5l4M3/5TatSZrqYVoEiqQrDfAq8I6KWZw7RZOHtVtCzEPdYz7rHZixwcA==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/node-http-handler@4.3.0':
+    resolution: {integrity: sha512-RHZ/uWCmSNZ8cneoWEVsVwMZBKy/8123hEpm57vgGXA3Irf/Ja4v9TVshHK2ML5/IqzAZn0WhINHOP9xl+Qy6Q==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/property-provider@4.2.0':
+    resolution: {integrity: sha512-rV6wFre0BU6n/tx2Ztn5LdvEdNZ2FasQbPQmDOPfV9QQyDmsCkOAB0osQjotRCQg+nSKFmINhyda0D3AnjSBJw==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/protocol-http@5.3.0':
+    resolution: {integrity: sha512-6POSYlmDnsLKb7r1D3SVm7RaYW6H1vcNcTWGWrF7s9+2noNYvUsm7E4tz5ZQ9HXPmKn6Hb67pBDRIjrT4w/d7Q==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/querystring-builder@4.2.0':
+    resolution: {integrity: sha512-Q4oFD0ZmI8yJkiPPeGUITZj++4HHYCW3pYBYfIobUCkYpI6mbkzmG1MAQQ3lJYYWj3iNqfzOenUZu+jqdPQ16A==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/querystring-parser@4.2.0':
+    resolution: {integrity: sha512-BjATSNNyvVbQxOOlKse0b0pSezTWGMvA87SvoFoFlkRsKXVsN3bEtjCxvsNXJXfnAzlWFPaT9DmhWy1vn0sNEA==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/service-error-classification@4.2.0':
+    resolution: {integrity: sha512-Ylv1ttUeKatpR0wEOMnHf1hXMktPUMObDClSWl2TpCVT4DwtJhCeighLzSLbgH3jr5pBNM0LDXT5yYxUvZ9WpA==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/shared-ini-file-loader@4.3.0':
+    resolution: {integrity: sha512-VCUPPtNs+rKWlqqntX0CbVvWyjhmX30JCtzO+s5dlzzxrvSfRh5SY0yxnkirvc1c80vdKQttahL71a9EsdolSQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/signature-v4@5.3.0':
+    resolution: {integrity: sha512-MKNyhXEs99xAZaFhm88h+3/V+tCRDQ+PrDzRqL0xdDpq4gjxcMmf5rBA3YXgqZqMZ/XwemZEurCBQMfxZOWq/g==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/smithy-client@4.7.0':
+    resolution: {integrity: sha512-3BDx/aCCPf+kkinYf5QQhdQ9UAGihgOVqI3QO5xQfSaIWvUE4KYLtiGRWsNe1SR7ijXC0QEPqofVp5Sb0zC8xQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/types@4.6.0':
+    resolution: {integrity: sha512-4lI9C8NzRPOv66FaY1LL1O/0v0aLVrq/mXP/keUa9mJOApEeae43LsLd2kZRUJw91gxOQfLIrV3OvqPgWz1YsA==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/url-parser@4.2.0':
+    resolution: {integrity: sha512-AlBmD6Idav2ugmoAL6UtR6ItS7jU5h5RNqLMZC7QrLCoITA9NzIN3nx9GWi8g4z1pfWh2r9r96SX/jHiNwPJ9A==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-base64@4.2.0':
+    resolution: {integrity: sha512-+erInz8WDv5KPe7xCsJCp+1WCjSbah9gWcmUXc9NqmhyPx59tf7jqFz+za1tRG1Y5KM1Cy1rWCcGypylFp4mvA==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-body-length-browser@4.2.0':
+    resolution: {integrity: sha512-Fkoh/I76szMKJnBXWPdFkQJl2r9SjPt3cMzLdOB6eJ4Pnpas8hVoWPYemX/peO0yrrvldgCUVJqOAjUrOLjbxg==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-body-length-node@4.2.0':
+    resolution: {integrity: sha512-U8q1WsSZFjXijlD7a4wsDQOvOwV+72iHSfq1q7VD+V75xP/pdtm0WIGuaFJ3gcADDOKj2MIBn4+zisi140HEnQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-buffer-from@2.2.0':
+    resolution: {integrity: sha512-IJdWBbTcMQ6DA0gdNhh/BwrLkDR+ADW5Kr1aZmd4k3DIF6ezMV4R2NIAmT08wQJ3yUK82thHWmC/TnK/wpMMIA==}
+    engines: {node: '>=14.0.0'}
+
+  '@smithy/util-buffer-from@4.2.0':
+    resolution: {integrity: sha512-kAY9hTKulTNevM2nlRtxAG2FQ3B2OR6QIrPY3zE5LqJy1oxzmgBGsHLWTcNhWXKchgA0WHW+mZkQrng/pgcCew==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-config-provider@4.2.0':
+    resolution: {integrity: sha512-YEjpl6XJ36FTKmD+kRJJWYvrHeUvm5ykaUS5xK+6oXffQPHeEM4/nXlZPe+Wu0lsgRUcNZiliYNh/y7q9c2y6Q==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-defaults-mode-browser@4.2.0':
+    resolution: {integrity: sha512-qzHp7ZDk1Ba4LDwQVCNp90xPGqSu7kmL7y5toBpccuhi3AH7dcVBIT/pUxYcInK4jOy6FikrcTGq5wxcka8UaQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-defaults-mode-node@4.2.0':
+    resolution: {integrity: sha512-FxUHS3WXgx3bTWR6yQHNHHkQHZm/XKIi/CchTnKvBulN6obWpcbzJ6lDToXn+Wp0QlVKd7uYAz2/CTw1j7m+Kg==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-endpoints@3.2.0':
+    resolution: {integrity: sha512-TXeCn22D56vvWr/5xPqALc9oO+LN+QpFjrSM7peG/ckqEPoI3zaKZFp+bFwfmiHhn5MGWPaLCqDOJPPIixk9Wg==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-hex-encoding@4.2.0':
+    resolution: {integrity: sha512-CCQBwJIvXMLKxVbO88IukazJD9a4kQ9ZN7/UMGBjBcJYvatpWk+9g870El4cB8/EJxfe+k+y0GmR9CAzkF+Nbw==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-middleware@4.2.0':
+    resolution: {integrity: sha512-u9OOfDa43MjagtJZ8AapJcmimP+K2Z7szXn8xbty4aza+7P1wjFmy2ewjSbhEiYQoW1unTlOAIV165weYAaowA==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-retry@4.2.0':
+    resolution: {integrity: sha512-BWSiuGbwRnEE2SFfaAZEX0TqaxtvtSYPM/J73PFVm+A29Fg1HTPiYFb8TmX1DXp4hgcdyJcNQmprfd5foeORsg==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-stream@4.4.0':
+    resolution: {integrity: sha512-vtO7ktbixEcrVzMRmpQDnw/Ehr9UWjBvSJ9fyAbadKkC4w5Cm/4lMO8cHz8Ysb8uflvQUNRcuux/oNHKPXkffg==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-uri-escape@4.2.0':
+    resolution: {integrity: sha512-igZpCKV9+E/Mzrpq6YacdTQ0qTiLm85gD6N/IrmyDvQFA4UnU3d5g3m8tMT/6zG/vVkWSU+VxeUyGonL62DuxA==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-utf8@2.3.0':
+    resolution: {integrity: sha512-R8Rdn8Hy72KKcebgLiv8jQcQkXoLMOGGv5uI1/k0l+snqkOzQ1R0ChUBCxWMlBsFMekWjq0wRudIweFs7sKT5A==}
+    engines: {node: '>=14.0.0'}
+
+  '@smithy/util-utf8@4.2.0':
+    resolution: {integrity: sha512-zBPfuzoI8xyBtR2P6WQj63Rz8i3AmfAaJLuNG8dWsfvPe8lO4aCPYLn879mEgHndZH1zQ2oXmG8O1GGzzaoZiw==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/util-waiter@4.2.0':
+    resolution: {integrity: sha512-0Z+nxUU4/4T+SL8BCNN4ztKdQjToNvUYmkF1kXO5T7Yz3Gafzh0HeIG6mrkN8Fz3gn9hSyxuAT+6h4vM+iQSBQ==}
+    engines: {node: '>=18.0.0'}
+
+  '@smithy/uuid@1.1.0':
+    resolution: {integrity: sha512-4aUIteuyxtBUhVdiQqcDhKFitwfd9hqoSDYY2KRXiWtgoWJ9Bmise+KfEPDiVHWeJepvF8xJO9/9+WDIciMFFw==}
+    engines: {node: '>=18.0.0'}
+
+  '@standard-schema/spec@1.0.0':
+    resolution: {integrity: sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==}
+
+  '@standard-schema/utils@0.3.0':
+    resolution: {integrity: sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==}
+
+  '@swc/counter@0.1.3':
+    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}
+
+  '@swc/helpers@0.5.15':
+    resolution: {integrity: sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==}
+
+  '@tailwindcss/forms@0.5.10':
+    resolution: {integrity: sha512-utI1ONF6uf/pPNO68kmN1b8rEwNXv3czukalo8VtJH8ksIkZXr3Q3VYudZLkCsDd4Wku120uF02hYK25XGPorw==}
+    peerDependencies:
+      tailwindcss: '>=3.0.0 || >= 3.0.0-alpha.1 || >= 4.0.0-alpha.20 || >= 4.0.0-beta.1'
+
+  '@tailwindcss/typography@0.5.19':
+    resolution: {integrity: sha512-w31dd8HOx3k9vPtcQh5QHP9GwKcgbMp87j58qi6xgiBnFFtKEAgCWnDw4qUT8aHwkCp8bKvb/KGKWWHedP0AAg==}
+    peerDependencies:
+      tailwindcss: '>=3.0.0 || insiders || >=4.0.0-alpha.20 || >=4.0.0-beta.1'
+
+  '@ts-morph/common@0.28.0':
+    resolution: {integrity: sha512-4w6X/oFmvXcwux6y6ExfM/xSqMHw20cYwFJH+BlYrtGa6nwY9qGq8GXnUs1sVYeF2o/KT3S8hAH6sKBI3VOkBg==}
+
+  '@tybys/wasm-util@0.10.1':
+    resolution: {integrity: sha512-9tTaPJLSiejZKx+Bmog4uSubteqTvFrVrURwkmHixBo0G4seD0zUxp98E1DzUBJxLQ3NPwXrGKDiVjwx/DpPsg==}
+
+  '@types/bcryptjs@3.0.0':
+    resolution: {integrity: sha512-WRZOuCuaz8UcZZE4R5HXTco2goQSI2XxjGY3hbM/xDvwmqFWd4ivooImsMx65OKM6CtNKbnZ5YL+YwAwK7c1dg==}
+    deprecated: This is a stub types definition. bcryptjs provides its own type definitions, so you do not need this installed.
+
+  '@types/d3-array@3.2.2':
+    resolution: {integrity: sha512-hOLWVbm7uRza0BYXpIIW5pxfrKe0W+D5lrFiAEYR+pb6w3N2SwSMaJbXdUfSEv+dT4MfHBLtn5js0LAWaO6otw==}
+
+  '@types/d3-color@3.1.3':
+    resolution: {integrity: sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==}
+
+  '@types/d3-ease@3.0.2':
+    resolution: {integrity: sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==}
+
+  '@types/d3-interpolate@3.0.4':
+    resolution: {integrity: sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==}
+
+  '@types/d3-path@3.1.1':
+    resolution: {integrity: sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==}
+
+  '@types/d3-scale@4.0.9':
+    resolution: {integrity: sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==}
+
+  '@types/d3-shape@3.1.7':
+    resolution: {integrity: sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==}
 
   '@types/d3-time@3.0.4':
     resolution: {integrity: sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==}
@@ -1276,21 +1964,47 @@ packages:
   '@types/estree@1.0.8':
     resolution: {integrity: sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==}
 
+  '@types/geojson-vt@3.2.5':
+    resolution: {integrity: sha512-qDO7wqtprzlpe8FfQ//ClPV9xiuoh2nkIgiouIptON9w5jvD/fA4szvP9GBlDVdJ5dldAl0kX/sy3URbWwLx0g==}
+
+  '@types/geojson@7946.0.16':
+    resolution: {integrity: sha512-6C8nqWur3j98U6+lXDfTUWIfgvZU+EumvpHKcYjujKH7woYyLj2sUmff0tRhrqM7BohUw7Pz3ZB1jj2gW9Fvmg==}
+
+  '@types/hoist-non-react-statics@3.3.7':
+    resolution: {integrity: sha512-PQTyIulDkIDro8P+IHbKCsw7U2xxBYflVzW/FgWdCAePD9xGSidgA76/GeJ6lBKoblyhf9pBY763gbrN+1dI8g==}
+    peerDependencies:
+      '@types/react': '*'
+
   '@types/json-schema@7.0.15':
     resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}
 
   '@types/json5@0.0.29':
     resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}
 
+  '@types/jsonwebtoken@9.0.10':
+    resolution: {integrity: sha512-asx5hIG9Qmf/1oStypjanR7iKTv0gXQ1Ov/jfrX6kS/EO0OFni8orbmGCn0672NHR3kXHwpAwR+B368ZGN/2rA==}
+
+  '@types/lodash@4.17.20':
+    resolution: {integrity: sha512-H3MHACvFUEiujabxhaI/ImO6gUrd8oOurg7LQtS7mbwIXA/cUqWrvBsaeJ23aZEPk1TAYkurjfMbSELfoCXlGA==}
+
+  '@types/ms@2.1.0':
+    resolution: {integrity: sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==}
+
   '@types/node@20.19.17':
     resolution: {integrity: sha512-gfehUI8N1z92kygssiuWvLiwcbOB3IRktR6hTDgJlXMYh5OvkPSRmgfoBUmfZt+vhwJtX7v1Yw4KvvAf7c5QKQ==}
 
   '@types/node@22.18.7':
     resolution: {integrity: sha512-3E97nlWEVp2V6J7aMkR8eOnw/w0pArPwf/5/W0865f+xzBoGL/ZuHkTAKAGN7cOWNwd+sG+hZOqj+fjzeHS75g==}
 
+  '@types/nodemailer@7.0.2':
+    resolution: {integrity: sha512-Zo6uOA9157WRgBk/ZhMpTQ/iCWLMk7OIs/Q9jvHarMvrzUUP/MDdPHL2U1zpf57HrrWGv4nYQn5uIxna0xY3xw==}
+
   '@types/pako@2.0.4':
     resolution: {integrity: sha512-VWDCbrLeVXJM9fihYodcLiIv0ku+AlOa/TQ1SvYOaBuyrSKgEcro95LJyIsJ4vSo6BXIxOKxiJAat04CmST9Fw==}
 
+  '@types/qrcode@1.5.5':
+    resolution: {integrity: sha512-CdfBi/e3Qk+3Z/fXYShipBT13OJ2fDO2Q2w5CIP5anLTLIndQG9z6P1cnm+8zCWSpm5dnxMFd/uREtb0EXuQzg==}
+
   '@types/raf@3.4.3':
     resolution: {integrity: sha512-c4YAvMedbPZ5tEyxzQdMoOhhJ4RD3rngZIdwC2/qDN3d7JpEhB6fiBRKVY1lg5B7Wk+uPBjn5f39j1/2MY1oOw==}
 
@@ -1299,9 +2013,15 @@ packages:
     peerDependencies:
       '@types/react': ^19.0.0
 
+  '@types/react-redux@7.1.34':
+    resolution: {integrity: sha512-GdFaVjEbYv4Fthm2ZLvj1VSCedV7TqE5y1kNwnjSdBOTXuRSgowux6J8TAct15T3CKBr63UMk+2CO7ilRhyrAQ==}
+
   '@types/react@19.1.13':
     resolution: {integrity: sha512-hHkbU/eoO3EG5/MZkuFSKmYqPbSVk5byPFa3e7y/8TybHiLMACgI8seVYlicwk7H5K/rI2px9xrQp/C+AUDTiQ==}
 
+  '@types/supercluster@7.1.3':
+    resolution: {integrity: sha512-Z0pOY34GDFl3Q6hUFYf3HkTwKEE02e7QgtJppBt+beEAxnyOpJua+voGFvxINBHa06GwLFFym7gRPY2SiKIfIA==}
+
   '@types/trusted-types@2.0.7':
     resolution: {integrity: sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==}
 
@@ -1468,6 +2188,9 @@ packages:
     cpu: [x64]
     os: [win32]
 
+  '@upstash/redis@1.35.4':
+    resolution: {integrity: sha512-WE1ZnhFyBiIjTDW13GbO6JjkiMVVjw5VsvS8ENmvvJsze/caMQ5paxVD44+U68IUVmkXcbsLSoE+VIYsHtbQEw==}
+
   acorn-jsx@5.3.2:
     resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
     peerDependencies:
@@ -1478,6 +2201,10 @@ packages:
     engines: {node: '>=0.4.0'}
     hasBin: true
 
+  adler-32@1.3.1:
+    resolution: {integrity: sha512-ynZ4w/nUUv5rrsR8UUGoe1VC9hZj6V5hU9Qw1HlMDJGEJw5S7TfTErWTjMys6M7vr0YWcPqs3qAr4ss0nDfP+A==}
+    engines: {node: '>=0.8'}
+
   ajv@6.12.6:
     resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}
 
@@ -1504,6 +2231,15 @@ packages:
     resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
     engines: {node: '>= 8'}
 
+  arangojs@10.1.2:
+    resolution: {integrity: sha512-25Gy2dwSYOaKNWJixpGZXCSeOxS+k/E0sFuADcYm9ZhywFYwsTgh2hOB83fZy0ZOhC7Xc/zEhOL+tR6wujoyfQ==}
+    engines: {node: '>=20'}
+    peerDependencies:
+      undici: '>=5.21.0'
+    peerDependenciesMeta:
+      undici:
+        optional: true
+
   arg@5.0.2:
     resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}
 
@@ -1549,10 +2285,21 @@ packages:
   ast-types-flow@0.0.8:
     resolution: {integrity: sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==}
 
+  ast-types@0.16.1:
+    resolution: {integrity: sha512-6t10qk83GOG8p0vKmaCr8eiilZwO171AvbROMtvvNiwrTly62t+7XkA8RdIIVbpMhCASAsxgAzdRSwh6nw/5Dg==}
+    engines: {node: '>=4'}
+
   async-function@1.0.0:
     resolution: {integrity: sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==}
     engines: {node: '>= 0.4'}
 
+  asynckit@0.4.0:
+    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}
+
+  atomic-sleep@1.0.0:
+    resolution: {integrity: sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==}
+    engines: {node: '>=8.0.0'}
+
   autoprefixer@10.4.21:
     resolution: {integrity: sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==}
     engines: {node: ^10 || ^12 || >=14}
@@ -1568,6 +2315,9 @@ packages:
     resolution: {integrity: sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==}
     engines: {node: '>=4'}
 
+  axios@1.12.2:
+    resolution: {integrity: sha512-vMJzPewAlRyOgxV2dU0Cuz2O8zzzx9VYtbJOaBgXFeLc4IV/Eg50n4LowmehOOR61S8ZMpc2K5Sa7g6A4jfkUw==}
+
   axobject-query@4.1.0:
     resolution: {integrity: sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==}
     engines: {node: '>= 0.4'}
@@ -1594,6 +2344,9 @@ packages:
     resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
     engines: {node: '>=8'}
 
+  bowser@2.12.1:
+    resolution: {integrity: sha512-z4rE2Gxh7tvshQ4hluIT7XcFrgLIQaw9X3A+kTTRdovCz5PMukm/0QC/BKSYPj3omF5Qfypn9O/c5kgpmvYUCw==}
+
   brace-expansion@1.1.12:
     resolution: {integrity: sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==}
 
@@ -1616,6 +2369,9 @@ packages:
   buffer-equal-constant-time@1.0.1:
     resolution: {integrity: sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==}
 
+  buffer-from@1.1.2:
+    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}
+
   buffer@6.0.3:
     resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}
 
@@ -1675,6 +2431,10 @@ packages:
     resolution: {integrity: sha512-5ON+q7jCTgMp9cjpu4Jo6XbvfYwSB2Ow3kzHKfIyJfaCAOHLbdKPQqGKgfED/R5B+3TFFfe8pegYA+b423SRyA==}
     engines: {node: '>=10.0.0'}
 
+  cfb@1.2.2:
+    resolution: {integrity: sha512-KfdUZsSOw19/ObEWasvBP/Ac4reZvAGauZhs6S/gqNhXhI7cKwvlH7ulj+dOEYnca4bm4SGo8C1bTAQvnTjgQA==}
+    engines: {node: '>=0.8'}
+
   chalk@4.1.2:
     resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
     engines: {node: '>=10'}
@@ -1696,6 +2456,10 @@ packages:
   cliui@6.0.0:
     resolution: {integrity: sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==}
 
+  clone-deep@4.0.1:
+    resolution: {integrity: sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==}
+    engines: {node: '>=6'}
+
   clsx@2.1.1:
     resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}
     engines: {node: '>=6'}
@@ -1704,6 +2468,13 @@ packages:
     resolution: {integrity: sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==}
     engines: {node: '>=0.10.0'}
 
+  code-block-writer@13.0.3:
+    resolution: {integrity: sha512-Oofo0pq3IKnsFtuHqSF7TqBfr71aeyZDVJ0HpmqB7FBM2qEigL0iPONSCZSO9pE9dZTAxANe5XHG9Uy0YMv8cg==}
+
+  codepage@1.15.0:
+    resolution: {integrity: sha512-3g6NUTPd/YtuuGrhMnOMRjFc+LJw/bnMp3+0r/Wcz3IXUuCosKRJvMphm5+Q+bvTVGcJJuRvVLuYba+WojaFaA==}
+    engines: {node: '>=0.8'}
+
   color-convert@2.0.1:
     resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
     engines: {node: '>=7.0.0'}
@@ -1711,10 +2482,17 @@ packages:
   color-name@1.1.4:
     resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}
 
+  combined-stream@1.0.8:
+    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
+    engines: {node: '>= 0.8'}
+
   commander@4.1.1:
     resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
     engines: {node: '>= 6'}
 
+  commondir@1.0.1:
+    resolution: {integrity: sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==}
+
   concat-map@0.0.1:
     resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}
 
@@ -1728,6 +2506,9 @@ packages:
     resolution: {integrity: sha512-5IKcdX0nnYavi6G7TtOhwkYzyjfJlatbjMjuLSfE2kYT5pMDOilZ4OvMhi637CcDICTmz3wARPoyhqyX1Y+XvA==}
     engines: {node: ^14.18.0 || >=16.10.0}
 
+  convert-source-map@2.0.0:
+    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}
+
   cookie@0.7.2:
     resolution: {integrity: sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==}
     engines: {node: '>= 0.6'}
@@ -1735,6 +2516,11 @@ packages:
   core-js@3.45.1:
     resolution: {integrity: sha512-L4NPsJlCfZsPeXukyzHFlg/i7IIVwHSItR0wg0FLNqYClJ4MQYTYLbC7EkjKYRLZF2iof2MUgN0EGy7MdQFChg==}
 
+  crc-32@1.2.2:
+    resolution: {integrity: sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==}
+    engines: {node: '>=0.8'}
+    hasBin: true
+
   cron-parser@4.9.0:
     resolution: {integrity: sha512-p0SaNjrHOnQeR8/VnfGbmg9te2kfyYSQ7Sc/j/6DtPL3JQvKxmjO9TSjNFpujqV3vEYYBvNNvXSxzyksBWAx1Q==}
     engines: {node: '>=12.0.0'}
@@ -1743,6 +2529,9 @@ packages:
     resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
     engines: {node: '>= 8'}
 
+  css-box-model@1.2.1:
+    resolution: {integrity: sha512-a7Vr4Q/kd/aw96bnJG332W9V9LkJO69JRcaCYDUqjp6/z0w6VcZjgAcTbgFxEPfBgdnAwlh3iwu+hLopa+flJw==}
+
   css-line-break@2.1.0:
     resolution: {integrity: sha512-FHcKFCZcAha3LwfVBhCQbW2nCNbkZXn7KVUJcsT5/P8YmfsVja0FMPJr0B903j/E69HUphKiV9iQArX8SDYA4w==}
 
@@ -1862,6 +2651,10 @@ packages:
   defu@6.1.4:
     resolution: {integrity: sha512-mEQCMmwJu317oSz8CwdIOdwf3xMif1ttiM8LTufzc3g6kR+9Pe236twL8j3IYT1F7GfRgGcW6MWxzZjLIkuHIg==}
 
+  delayed-stream@1.0.0:
+    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
+    engines: {node: '>=0.4.0'}
+
   denque@2.1.0:
     resolution: {integrity: sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==}
     engines: {node: '>=0.10'}
@@ -1914,6 +2707,9 @@ packages:
     resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
     engines: {node: '>= 0.4'}
 
+  earcut@3.0.2:
+    resolution: {integrity: sha512-X7hshQbLyMJ/3RPhyObLARM2sNxxmRALLKx1+NVFFnQ9gKzmCrxm9+uLIAdBcvc8FNLpctqlQ2V6AE92Ol9UDQ==}
+
   eastasianwidth@0.2.0:
     resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}
 
@@ -2088,6 +2884,11 @@ packages:
     resolution: {integrity: sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==}
     engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
 
+  esprima@4.0.1:
+    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
+    engines: {node: '>=4'}
+    hasBin: true
+
   esquery@1.6.0:
     resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
     engines: {node: '>=0.10'}
@@ -2134,6 +2935,10 @@ packages:
   fast-png@6.4.0:
     resolution: {integrity: sha512-kAqZq1TlgBjZcLr5mcN6NP5Rv4V2f22z00c3g8vRrwkcqjerx7BEhPbOnWCPqaHUl2XWQBJQvOT/FQhdMT7X/Q==}
 
+  fast-xml-parser@5.2.5:
+    resolution: {integrity: sha512-pfX9uG9Ki0yekDHx2SiuRIyFdyAr1kMIMitPvb0YBo8SUfKvia7w7FIyd/l6av85pFYRhZscS75MwMnbvY+hcQ==}
+    hasBin: true
+
   fastq@1.19.1:
     resolution: {integrity: sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==}
 
@@ -2157,6 +2962,14 @@ packages:
     resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
     engines: {node: '>=8'}
 
+  find-cache-dir@2.1.0:
+    resolution: {integrity: sha512-Tq6PixE0w/VMFfCgbONnkiQIVol/JJL7nRMi20fqzA4NRs9AfeqMGeRdPi3wIhYkxjeBaWh2rxwapn5Tu3IqOQ==}
+    engines: {node: '>=6'}
+
+  find-up@3.0.0:
+    resolution: {integrity: sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==}
+    engines: {node: '>=6'}
+
   find-up@4.1.0:
     resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
     engines: {node: '>=8'}
@@ -2175,6 +2988,19 @@ packages:
   flatted@3.3.3:
     resolution: {integrity: sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==}
 
+  flow-parser@0.287.0:
+    resolution: {integrity: sha512-92XfPmSg6zV/UD/R3Hw+sxBUi3SiIL8COqD7p3HRZysX1ksrw5MdPhpqox0U0Hd5lqQ9F1AJCi92fnRO7WDgFw==}
+    engines: {node: '>=0.4.0'}
+
+  follow-redirects@1.15.11:
+    resolution: {integrity: sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==}
+    engines: {node: '>=4.0'}
+    peerDependencies:
+      debug: '*'
+    peerDependenciesMeta:
+      debug:
+        optional: true
+
   for-each@0.3.5:
     resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
     engines: {node: '>= 0.4'}
@@ -2183,6 +3009,14 @@ packages:
     resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
     engines: {node: '>=14'}
 
+  form-data@4.0.4:
+    resolution: {integrity: sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==}
+    engines: {node: '>= 6'}
+
+  frac@1.1.2:
+    resolution: {integrity: sha512-w/XBfkibaTl3YDqASwfDUqkna4Z2p9cFSr1aHDt0WoMTECnRfBOv2WArlZILlqgWlmdIlALXGpM2AOhEk5W3IA==}
+    engines: {node: '>=0.8'}
+
   fraction.js@4.3.7:
     resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}
 
@@ -2215,6 +3049,13 @@ packages:
   functions-have-names@1.2.3:
     resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}
 
+  gensync@1.0.0-beta.2:
+    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
+    engines: {node: '>=6.9.0'}
+
+  geojson-vt@4.0.2:
+    resolution: {integrity: sha512-AV9ROqlNqoZEIJGfm1ncNjEXfkz2hdFlZf0qkVfmkwdKa8vj7H16YUOT81rJw1rdFhyEDlN2Tds91p/glzbl5A==}
+
   get-caller-file@2.0.5:
     resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
     engines: {node: 6.* || 8.* || >= 10.*}
@@ -2227,6 +3068,10 @@ packages:
     resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
     engines: {node: '>= 0.4'}
 
+  get-stream@6.0.1:
+    resolution: {integrity: sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==}
+    engines: {node: '>=10'}
+
   get-symbol-description@1.1.0:
     resolution: {integrity: sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==}
     engines: {node: '>= 0.4'}
@@ -2238,6 +3083,9 @@ packages:
     resolution: {integrity: sha512-L5bGsVkxJbJgdnwyuheIunkGatUF/zssUoxxjACCseZYAVbaqdh9Tsmmlkl8vYan09H7sbvKt4pS8GqKLBrEzA==}
     hasBin: true
 
+  gl-matrix@3.4.4:
+    resolution: {integrity: sha512-latSnyDNt/8zYUB6VIJ6PCh2jBjJX6gnDsoCZ7LyW7GkqrD51EWwa9qCoGixj8YqBtETQK/xY7OmpTF8xz1DdQ==}
+
   glob-parent@5.1.2:
     resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
     engines: {node: '>= 6'}
@@ -2250,6 +3098,11 @@ packages:
     resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
     hasBin: true
 
+  glob@11.0.3:
+    resolution: {integrity: sha512-2Nim7dha1KVkaiF4q6Dj+ngPPMdfvLJEOpZk/jKiUAkqKebpGAWQXAq9z1xu9HKu5lWfqw/FASuccEjyznjPaA==}
+    engines: {node: 20 || >=22}
+    hasBin: true
+
   globals@14.0.0:
     resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
     engines: {node: '>=18'}
@@ -2267,6 +3120,9 @@ packages:
     resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
     engines: {node: '>= 0.4'}
 
+  graceful-fs@4.2.11:
+    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}
+
   graphemer@1.4.0:
     resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}
 
@@ -2297,6 +3153,9 @@ packages:
     resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
     engines: {node: '>= 0.4'}
 
+  hoist-non-react-statics@3.3.2:
+    resolution: {integrity: sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==}
+
   html2canvas@1.4.1:
     resolution: {integrity: sha512-fPU6BHNpsyIhr8yyMpTLLxAbkaK8ArIBcmZIRiBLiDhjeqvXolaEmDGmELFuX9I4xDcaKKcJl+TKZLqruBbmWA==}
     engines: {node: '>=8.0.0'}
@@ -2419,6 +3278,10 @@ packages:
     resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
     engines: {node: '>=0.12.0'}
 
+  is-plain-object@2.0.4:
+    resolution: {integrity: sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==}
+    engines: {node: '>=0.10.0'}
+
   is-plain-object@5.0.0:
     resolution: {integrity: sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==}
     engines: {node: '>=0.10.0'}
@@ -2465,6 +3328,10 @@ packages:
   isexe@2.0.0:
     resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}
 
+  isobject@3.0.1:
+    resolution: {integrity: sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==}
+    engines: {node: '>=0.10.0'}
+
   iterator.prototype@1.1.5:
     resolution: {integrity: sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==}
     engines: {node: '>= 0.4'}
@@ -2472,6 +3339,10 @@ packages:
   jackspeak@3.4.3:
     resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}
 
+  jackspeak@4.1.1:
+    resolution: {integrity: sha512-zptv57P3GpL+O0I7VdMJNBZCu+BPHVQUk55Ft8/QCJjTVxrnJHuVuX/0Bl2A6/+2oyR/ZMEuFKwmzqqZ/U5nPQ==}
+    engines: {node: 20 || >=22}
+
   jiti@1.21.7:
     resolution: {integrity: sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==}
     hasBin: true
@@ -2483,6 +3354,9 @@ packages:
   jose@4.15.9:
     resolution: {integrity: sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==}
 
+  jose@6.1.0:
+    resolution: {integrity: sha512-TTQJyoEoKcC1lscpVDCSsVgYzUDg/0Bt3WE//WiTPK6uOCQC2KZS4MpugbMWt/zyjkopgZoXhZuCi00gLudfUA==}
+
   joycon@3.1.1:
     resolution: {integrity: sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==}
     engines: {node: '>=10'}
@@ -2494,6 +3368,21 @@ packages:
     resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
     hasBin: true
 
+  jscodeshift@17.3.0:
+    resolution: {integrity: sha512-LjFrGOIORqXBU+jwfC9nbkjmQfFldtMIoS6d9z2LG/lkmyNXsJAySPT+2SWXJEoE68/bCWcxKpXH37npftgmow==}
+    engines: {node: '>=16'}
+    hasBin: true
+    peerDependencies:
+      '@babel/preset-env': ^7.1.6
+    peerDependenciesMeta:
+      '@babel/preset-env':
+        optional: true
+
+  jsesc@3.1.0:
+    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
+    engines: {node: '>=6'}
+    hasBin: true
+
   json-buffer@3.0.1:
     resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}
 
@@ -2503,6 +3392,9 @@ packages:
   json-stable-stringify-without-jsonify@1.0.1:
     resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}
 
+  json-stringify-pretty-compact@4.0.0:
+    resolution: {integrity: sha512-3CNZ2DnrpByG9Nqj6Xo8vqbjT4F6N+tb4Gb28ESAZjYZ5yqvmc56J+/kuIwkaAMOyblTQhUW7PxMkUb8Q36N3Q==}
+
   json5@1.0.2:
     resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
     hasBin: true
@@ -2533,9 +3425,16 @@ packages:
     resolution: {integrity: sha512-C3iHfuGUXK2u8/ipq9LfjFfXFxAZMQJJq7vLS45r3D9Y2xQ/m4S8zaR4zMLFWh9AsNPXmcFfUDhTEO8UIC/V6Q==}
     engines: {node: '>=12.0.0'}
 
+  kdbush@4.0.2:
+    resolution: {integrity: sha512-WbCVYJ27Sz8zi9Q7Q0xHC+05iwkm3Znipc2XTlrnJbsHMYktW4hPhXUE8Ys1engBrvffoSCqbil1JQAa7clRpA==}
+
   keyv@4.5.4:
     resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}
 
+  kind-of@6.0.3:
+    resolution: {integrity: sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==}
+    engines: {node: '>=0.10.0'}
+
   language-subtag-registry@0.3.23:
     resolution: {integrity: sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==}
 
@@ -2558,6 +3457,10 @@ packages:
     resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}
     engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
 
+  locate-path@3.0.0:
+    resolution: {integrity: sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==}
+    engines: {node: '>=6'}
+
   locate-path@5.0.0:
     resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
     engines: {node: '>=8'}
@@ -2606,10 +3509,22 @@ packages:
   lru-cache@10.4.3:
     resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}
 
+  lru-cache@11.2.2:
+    resolution: {integrity: sha512-F9ODfyqML2coTIsQpSkRHnLSZMtkU8Q+mSfcaIyKwy58u+8k5nvAYeiNhsyMARvzNcXJ9QfWVrcPsC9e9rAxtg==}
+    engines: {node: 20 || >=22}
+
+  lru-cache@5.1.1:
+    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}
+
   lru-cache@6.0.0:
     resolution: {integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==}
     engines: {node: '>=10'}
 
+  lucide-react@0.545.0:
+    resolution: {integrity: sha512-7r1/yUuflQDSt4f1bpn5ZAocyIxcTyVyBBChSVtBKn5M+392cPmI5YJMWOJKk/HUWGm5wg83chlAZtCcGbEZtw==}
+    peerDependencies:
+      react: ^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0
+
   luxon@3.7.2:
     resolution: {integrity: sha512-vtEhXh/gNjI9Yg1u4jX/0YVPMvxzHuGgCm6tC5kZyb08yjGWGnqAjGJvcXbqQR2P3MyMEFnRbpcdFS6PBcLqew==}
     engines: {node: '>=12'}
@@ -2617,10 +3532,21 @@ packages:
   magic-string@0.30.19:
     resolution: {integrity: sha512-2N21sPY9Ws53PZvsEpVtNuSW+ScYbQdp4b9qUaL+9QkHUrGFKo56Lg9Emg5s9V/qrtNBmiR01sYhUOwu3H+VOw==}
 
+  make-dir@2.1.0:
+    resolution: {integrity: sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==}
+    engines: {node: '>=6'}
+
+  maplibre-gl@5.8.0:
+    resolution: {integrity: sha512-zLblPFK+z5sxeitDF8RL2cnqfRaivNwxbGoQMfwAm9st6d1lRGTxgI7NNNr/U1AEPkp5+X+wjROagiHvJD8aqg==}
+    engines: {node: '>=16.14.0', npm: '>=8.1.0'}
+
   math-intrinsics@1.1.0:
     resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
     engines: {node: '>= 0.4'}
 
+  memoize-one@5.2.1:
+    resolution: {integrity: sha512-zYiwtZUcYyXKo/np96AGZAckk+FWWsUdJ3cHGGmld7+AhvcWmQyGCYUh1hc4Q/pkOhb65dQR/pqCyK0cOaHz4Q==}
+
   memory-pager@1.5.0:
     resolution: {integrity: sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==}
 
@@ -2632,10 +3558,22 @@ packages:
     resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
     engines: {node: '>=8.6'}
 
+  mime-db@1.52.0:
+    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
+    engines: {node: '>= 0.6'}
+
+  mime-types@2.1.35:
+    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
+    engines: {node: '>= 0.6'}
+
   mini-svg-data-uri@1.4.4:
     resolution: {integrity: sha512-r9deDe9p5FJUPZAk3A59wGH7Ii9YrjjWw0jmw/liSbHl2CHiyXj6FcDXDu2K3TjVAXqiJdaw3xxwlZZr9E6nHg==}
     hasBin: true
 
+  minimatch@10.0.3:
+    resolution: {integrity: sha512-IPZ167aShDZZUMdRk66cyQAW3qr0WzbHkPdMYa8bzZhlHhO3jALbKdxcaak7W9FfT2rZNpQuUu4Od7ILEpXSaw==}
+    engines: {node: 20 || >=22}
+
   minimatch@3.1.2:
     resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}
 
@@ -2738,6 +3676,9 @@ packages:
   msgpackr@1.11.5:
     resolution: {integrity: sha512-UjkUHN0yqp9RWKy0Lplhh+wlpdt9oQBYgULZOiFhV3VclSF1JnSQWZ5r9gORQlNYaUKQoR8itv7g7z1xDDuACA==}
 
+  murmurhash-js@1.0.0:
+    resolution: {integrity: sha512-TvmkNhkv8yct0SVBSy+o8wYzXjE4Zz3PCesbfs8HiCXXdcTuocApFv11UWlNFWKYsP2okqrhb7JNlSm9InBhIw==}
+
   mz@2.7.0:
     resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}
 
@@ -2758,6 +3699,9 @@ packages:
     resolution: {integrity: sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==}
     engines: {node: '>= 0.6'}
 
+  neo-async@2.6.2:
+    resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}
+
   neo4j-driver-bolt-connection@5.28.2:
     resolution: {integrity: sha512-dEX06iNPEo9iyCb0NssxJeA3REN+H+U/Y0MdAjJBEoil4tGz5PxBNZL6/+noQnu2pBJT5wICepakXCrN3etboA==}
 
@@ -2892,6 +3836,22 @@ packages:
     resolution: {integrity: sha512-D7EmwxJV6DsEB6vOFLrBM2OzsVgQzgPWyHlV2OOAVj772n+WTXpudC9e9u5BVKQnYwaD30Ivhi9b+4UeBcGu9g==}
     engines: {node: ^10.13.0 || >=12.0.0}
 
+  on-exit-leak-free@2.1.2:
+    resolution: {integrity: sha512-0eJJY6hXLGf1udHwfNftBqH+g73EU4B504nZeKpz1sYRKafAghwxEJunB2O7rDZkL4PGfsMVnTXZ2EjibbqcsA==}
+    engines: {node: '>=14.0.0'}
+
+  openai@6.2.0:
+    resolution: {integrity: sha512-qqjzHls7F5xkXNGy9P1Ei1rorI5LWupUUFWP66zPU8FlZbiITX8SFcHMKNZg/NATJ0LpIZcMUFxSwQmdeQPwSw==}
+    hasBin: true
+    peerDependencies:
+      ws: ^8.18.0
+      zod: ^3.25 || ^4.0
+    peerDependenciesMeta:
+      ws:
+        optional: true
+      zod:
+        optional: true
+
   openid-client@5.7.1:
     resolution: {integrity: sha512-jDBPgSVfTnkIh71Hg9pRvtJc6wTwqjRkN88+gCFtYWrlP4Yx2Dsrow8uPi3qLr/aeymPF3o2+dS+wOpglK04ew==}
 
@@ -2914,6 +3874,10 @@ packages:
     resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
     engines: {node: '>=10'}
 
+  p-locate@3.0.0:
+    resolution: {integrity: sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==}
+    engines: {node: '>=6'}
+
   p-locate@4.1.0:
     resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
     engines: {node: '>=8'}
@@ -2939,6 +3903,13 @@ packages:
   parse-srcset@1.0.2:
     resolution: {integrity: sha512-/2qh0lav6CmI15FzA3i/2Bzk2zCgQhGMkvhOhKNcBVQ1ldgpbfiNTVslmooUmWJcADi1f1kIeynbDRVzNlfR6Q==}
 
+  path-browserify@1.0.1:
+    resolution: {integrity: sha512-b7uo2UCUOYZcnF/3ID0lulOJi/bafxa1xPe7ZPsammBSpjSWQkjNxlt635YGS2MiR9GjvuXCtz2emr3jbsz98g==}
+
+  path-exists@3.0.0:
+    resolution: {integrity: sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==}
+    engines: {node: '>=4'}
+
   path-exists@4.0.0:
     resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
     engines: {node: '>=8'}
@@ -2954,9 +3925,17 @@ packages:
     resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
     engines: {node: '>=16 || 14 >=14.18'}
 
+  path-scurry@2.0.0:
+    resolution: {integrity: sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==}
+    engines: {node: 20 || >=22}
+
   pathe@2.0.3:
     resolution: {integrity: sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==}
 
+  pbf@4.0.1:
+    resolution: {integrity: sha512-SuLdBvS42z33m8ejRbInMapQe8n0D3vN/Xd5fmWM3tufNgRQFBpaW2YVJxQZV4iPNqb0vEFvssMEo5w9c6BTIA==}
+    hasBin: true
+
   perfect-debounce@1.0.0:
     resolution: {integrity: sha512-xCy9V055GLEqoFaHoC1SoLIaLmWctgCUaBaWxDZ7/Zx4CTyX7cJQLJOok/orfjZAh9kEYpjJa4d0KcJmCbctZA==}
 
@@ -2978,10 +3957,28 @@ packages:
     resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
     engines: {node: '>=0.10.0'}
 
+  pify@4.0.1:
+    resolution: {integrity: sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==}
+    engines: {node: '>=6'}
+
+  pino-abstract-transport@2.0.0:
+    resolution: {integrity: sha512-F63x5tizV6WCh4R6RHyi2Ml+M70DNRXt/+HANowMflpgGFMAym/VKm6G7ZOQRjqN7XbGxK1Lg9t6ZrtzOaivMw==}
+
+  pino-std-serializers@7.0.0:
+    resolution: {integrity: sha512-e906FRY0+tV27iq4juKzSYPbUj2do2X2JX4EzSca1631EB2QJQUqGbDuERal7LCtOpxl6x3+nvo9NPZcmjkiFA==}
+
+  pino@10.0.0:
+    resolution: {integrity: sha512-eI9pKwWEix40kfvSzqEP6ldqOoBIN7dwD/o91TY5z8vQI12sAffpR/pOqAD1IVVwIVHDpHjkq0joBPdJD0rafA==}
+    hasBin: true
+
   pirates@4.0.7:
     resolution: {integrity: sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==}
     engines: {node: '>= 6'}
 
+  pkg-dir@3.0.0:
+    resolution: {integrity: sha512-/E57AYkoeQ25qkxMj5PBOVgF8Kiu/h7cYS30Z5+R7WaiCCBfLq58ZI/dSeaEKb9WVJV5n/03QwrN3IeWIFllvw==}
+    engines: {node: '>=6'}
+
   pkg-types@1.3.1:
     resolution: {integrity: sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ==}
 
@@ -3063,6 +4060,9 @@ packages:
     resolution: {integrity: sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==}
     engines: {node: ^10 || ^12 || >=14}
 
+  potpack@2.1.0:
+    resolution: {integrity: sha512-pcaShQc1Shq0y+E7GqJqvZj8DTthWV1KeHGdi0Z6IAin2Oi3JnLCOfwnCo84qc+HAp52wT9nK9H7FAJp5a44GQ==}
+
   preact-render-to-string@5.2.6:
     resolution: {integrity: sha512-JyhErpYOvBV1hEPwIxc/fHWXPfnEGdRKxc8gFdAZ7XV4tlzyzG847XAyEZqoDnynP88akM4eaHcSOzNcLWFguw==}
     peerDependencies:
@@ -3093,8 +4093,8 @@ packages:
       typescript:
         optional: true
 
-  prisma@6.16.2:
-    resolution: {integrity: sha512-aRvldGE5UUJTtVmFiH3WfNFNiqFlAtePUxcI0UEGlnXCX7DqhiMT5TRYwncHFeA/Reca5W6ToXXyCMTeFPdSXA==}
+  prisma@6.16.3:
+    resolution: {integrity: sha512-4tJq3KB9WRshH5+QmzOLV54YMkNlKOtLKaSdvraI5kC/axF47HuOw6zDM8xrxJ6s9o2WodY654On4XKkrobQdQ==}
     engines: {node: '>=18.18'}
     hasBin: true
     peerDependencies:
@@ -3103,9 +4103,18 @@ packages:
       typescript:
         optional: true
 
+  process-warning@5.0.0:
+    resolution: {integrity: sha512-a39t9ApHNx2L4+HBnQKqxxHNs1r7KF+Intd8Q/g1bUh6q0WIp9voPXJ/x0j+ZL45KF1pJd9+q2jLIRMfvEshkA==}
+
   prop-types@15.8.1:
     resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}
 
+  protocol-buffers-schema@3.6.0:
+    resolution: {integrity: sha512-TdDRD+/QNdrCGCE7v8340QyuXd4kIWIgapsE2+n/SaGiSSbomYl4TjHlvIoCWRpE7wFt02EpB35VVA2ImcBVqw==}
+
+  proxy-from-env@1.1.0:
+    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}
+
   punycode@2.3.1:
     resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
     engines: {node: '>=6'}
@@ -3113,6 +4122,9 @@ packages:
   pure-rand@6.1.0:
     resolution: {integrity: sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==}
 
+  qr.js@0.0.0:
+    resolution: {integrity: sha512-c4iYnWb+k2E+vYpRimHqSu575b1/wKl4XFeJGpFmrJQz5I88v9aY2czh7s0w36srfCM1sXgC/xpoJz5dJfq+OQ==}
+
   qrcode@1.5.4:
     resolution: {integrity: sha512-1ca71Zgiu6ORjHqFBDpnSMTR2ReToX4l1Au1VFLyVeBTFavzQnv5JxMFr3ukHVKpSrSA2MCk0lNJSykjUfz7Zg==}
     engines: {node: '>=10.13.0'}
@@ -3121,12 +4133,28 @@ packages:
   queue-microtask@1.2.3:
     resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}
 
+  quick-format-unescaped@4.0.4:
+    resolution: {integrity: sha512-tYC1Q1hgyRuHgloV/YXs2w15unPVh8qfu/qCTfhTYamaw7fyhumKa2yGpdSo87vY32rIclj+4fWYQXUMs9EHvg==}
+
+  quickselect@3.0.0:
+    resolution: {integrity: sha512-XdjUArbK4Bm5fLLvlm5KpTFOiOThgfWWI4axAZDWg4E/0mKdZyI9tNEfds27qCi1ze/vwTR16kvmmGhRra3c2g==}
+
+  raf-schd@4.0.3:
+    resolution: {integrity: sha512-tQkJl2GRWh83ui2DiPTJz9wEiMN20syf+5oKfB03yYP7ioZcJwsIK8FjrtLwH1m7C7e+Tt2yYBlrOpdT+dyeIQ==}
+
   raf@3.4.1:
     resolution: {integrity: sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==}
 
   rc9@2.1.2:
     resolution: {integrity: sha512-btXCnMmRIBINM2LDZoEmOogIZU7Qe7zn4BpomSKZ/ykbLObuBdvG+mFq11DL6fjH1DRwHhrlgtYWG96bJiC7Cg==}
 
+  react-beautiful-dnd@13.1.1:
+    resolution: {integrity: sha512-0Lvs4tq2VcrEjEgDXHjT98r+63drkKEgqyxdA7qD3mvKwga6a5SscbdLPO2IExotU1jW8L0Ksdl0Cj2AF67nPQ==}
+    deprecated: 'react-beautiful-dnd is now deprecated. Context and options: https://github.com/atlassian/react-beautiful-dnd/issues/2672'
+    peerDependencies:
+      react: ^16.8.5 || ^17.0.0 || ^18.0.0
+      react-dom: ^16.8.5 || ^17.0.0 || ^18.0.0
+
   react-dom@19.1.1:
     resolution: {integrity: sha512-Dlq/5LAZgF0Gaz6yiqZCf6VCcZs1ghAJyrsu84Q/GT0gV+mCxbfmKNoGRKBYMJ8IEdGPqu49YWXD02GCknEDkw==}
     peerDependencies:
@@ -3147,9 +4175,29 @@ packages:
   react-is@16.13.1:
     resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}
 
+  react-is@17.0.2:
+    resolution: {integrity: sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==}
+
   react-is@19.1.1:
     resolution: {integrity: sha512-tr41fA15Vn8p4X9ntI+yCyeGSf1TlYaY5vlTZfQmeLBrFo3psOPX6HhTDnFNL9uj3EhP0KAQ80cugCl4b4BERA==}
 
+  react-qr-code@2.0.18:
+    resolution: {integrity: sha512-v1Jqz7urLMhkO6jkgJuBYhnqvXagzceg3qJUWayuCK/c6LTIonpWbwxR1f1APGd4xrW/QcQEovNrAojbUz65Tg==}
+    peerDependencies:
+      react: '*'
+
+  react-redux@7.2.9:
+    resolution: {integrity: sha512-Gx4L3uM182jEEayZfRbI/G11ZpYdNAnBs70lFVMNdHJI76XYtR+7m0MN+eAs7UHBPhWXcnFPaS+9owSCJQHNpQ==}
+    peerDependencies:
+      react: ^16.8.3 || ^17 || ^18
+      react-dom: '*'
+      react-native: '*'
+    peerDependenciesMeta:
+      react-dom:
+        optional: true
+      react-native:
+        optional: true
+
   react-redux@9.2.0:
     resolution: {integrity: sha512-ROY9fvHhwOD9ySfrF0wmvu//bKCQ6AeZZq1nJNtbDC+kk5DuSuNX/n6YWYF/SYy7bSba4D4FSz8DJeKY/S/r+g==}
     peerDependencies:
@@ -3177,6 +4225,14 @@ packages:
     resolution: {integrity: sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==}
     engines: {node: '>= 14.18.0'}
 
+  real-require@0.2.0:
+    resolution: {integrity: sha512-57frrGM/OCTLqLOAh0mhVA9VBMHd+9U7Zb2THMGdBUoZVOtGbJzjxsYGDJ3A9AYYCP4hn6y1TVbaOfzWtm5GFg==}
+    engines: {node: '>= 12.13.0'}
+
+  recast@0.23.11:
+    resolution: {integrity: sha512-YTUo+Flmw4ZXiWfQKGcwwc11KnoRAYgzAE2E7mXKCjSviTKShtxBsN6YUUBB2gtaBzKzeKunxhUwNHQuRryhWA==}
+    engines: {node: '>= 4'}
+
   recharts@3.2.1:
     resolution: {integrity: sha512-0JKwHRiFZdmLq/6nmilxEZl3pqb4T+aKkOkOi/ZISRZwfBhVMgInxzlYU9D4KnCH3KINScLy68m/OvMXoYGZUw==}
     engines: {node: '>=18'}
@@ -3202,6 +4258,9 @@ packages:
     peerDependencies:
       redux: ^5.0.0
 
+  redux@4.2.1:
+    resolution: {integrity: sha512-LAUYz4lc+Do8/g7aeRa8JkyDErK6ekstQaqWQrNRW//MY1TvCEpMtpTWvlQ+FPbWCx+Xixu/6SHt5N0HR+SB4w==}
+
   redux@5.0.1:
     resolution: {integrity: sha512-M9/ELqF6fy8FwmkpnF0S3YKOqMyoWJ4+CS5Efg2ct3oY9daQvd/Pc71FpGZsVsbl3Cpb+IIcjBDUnnyBdQbq4w==}
 
@@ -3237,6 +4296,9 @@ packages:
   resolve-pkg-maps@1.0.0:
     resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}
 
+  resolve-protobuf-schema@2.1.0:
+    resolution: {integrity: sha512-kI5ffTiZWmJaS/huM8wZfEMer1eRd7oJQhDuxeCLe3t7N7mX3z94CN0xPxBQxFYQTSNz9T0i+v6inKqSdK8xrQ==}
+
   resolve@1.22.10:
     resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
     engines: {node: '>= 0.4'}
@@ -3266,6 +4328,9 @@ packages:
   run-parallel@1.2.0:
     resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}
 
+  rw@1.3.3:
+    resolution: {integrity: sha512-PdhdWy89SiZogBLaw42zdeqtRJ//zFd2PgQavcICDUgJT5oW10QCRKbJ6bg4r0/UY2M6BWd5tkxuGFRvCkgfHQ==}
+
   rxjs@7.8.2:
     resolution: {integrity: sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==}
 
@@ -3284,12 +4349,20 @@ packages:
     resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
     engines: {node: '>= 0.4'}
 
+  safe-stable-stringify@2.5.0:
+    resolution: {integrity: sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==}
+    engines: {node: '>=10'}
+
   sanitize-html@2.17.0:
     resolution: {integrity: sha512-dLAADUSS8rBwhaevT12yCezvioCA+bmUTPH/u57xKPT8d++voeYE6HeluA/bPbQ15TwDBG2ii+QZIEmYx8VdxA==}
 
   scheduler@0.26.0:
     resolution: {integrity: sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==}
 
+  semver@5.7.2:
+    resolution: {integrity: sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==}
+    hasBin: true
+
   semver@6.3.1:
     resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
     hasBin: true
@@ -3314,6 +4387,10 @@ packages:
     resolution: {integrity: sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==}
     engines: {node: '>= 0.4'}
 
+  shallow-clone@3.0.1:
+    resolution: {integrity: sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==}
+    engines: {node: '>=8'}
+
   sharp@0.34.4:
     resolution: {integrity: sha512-FUH39xp3SBPnxWvd5iib1X8XY7J0K0X7d93sie9CJg2PO8/7gmg89Nve6OjItK53/MlAushNNxteBYfM6DEuoA==}
     engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
@@ -3349,10 +4426,23 @@ packages:
     resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
     engines: {node: '>=14'}
 
+  slow-redact@0.3.1:
+    resolution: {integrity: sha512-NvFvl1GuLZNW4U046Tfi8b26zXo8aBzgCAS2f7yVJR/fArN93mOqSA99cB9uITm92ajSz01bsu1K7SCVVjIMpQ==}
+
+  sonic-boom@4.2.0:
+    resolution: {integrity: sha512-INb7TM37/mAcsGmc9hyyI6+QR3rR1zVRu36B0NeGXKnOOLiZOfER5SA+N7X7k3yUYRzLWafduTDvJAfDswwEww==}
+
   source-map-js@1.2.1:
     resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
     engines: {node: '>=0.10.0'}
 
+  source-map-support@0.5.21:
+    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}
+
+  source-map@0.6.1:
+    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
+    engines: {node: '>=0.10.0'}
+
   source-map@0.8.0-beta.0:
     resolution: {integrity: sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==}
     engines: {node: '>= 8'}
@@ -3361,6 +4451,14 @@ packages:
   sparse-bitfield@3.0.3:
     resolution: {integrity: sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==}
 
+  split2@4.2.0:
+    resolution: {integrity: sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==}
+    engines: {node: '>= 10.x'}
+
+  ssf@0.11.2:
+    resolution: {integrity: sha512-+idbmIXoYET47hH+d7dfm2epdOMUDjqcB4648sTZ+t2JwoyBFL/insLfB/racrDmsKB3diwsDA696pZMieAC5g==}
+    engines: {node: '>=0.8'}
+
   stable-hash@0.0.5:
     resolution: {integrity: sha512-+L3ccpzibovGXFK+Ap/f8LOS0ahMrHTf3xu7mMLSpEGU0EO9ucaysSylKo9eRDFNhWve/y275iPmIZ4z39a9iA==}
 
@@ -3429,6 +4527,9 @@ packages:
     resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
     engines: {node: '>=8'}
 
+  strnum@2.1.1:
+    resolution: {integrity: sha512-7ZvoFTiCnGxBtDqJ//Cu6fWtZtc7Y3x+QOirG15wztbdngGSkht27o2pyGWrVy0b4WAy3jbKmnoK6g5VlVNUUw==}
+
   styled-jsx@5.1.6:
     resolution: {integrity: sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==}
     engines: {node: '>= 12.0.0'}
@@ -3447,6 +4548,9 @@ packages:
     engines: {node: '>=16 || 14 >=14.17'}
     hasBin: true
 
+  supercluster@8.0.1:
+    resolution: {integrity: sha512-IiOea5kJ9iqzD2t7QJq/cREyLHTtSmUT6gQsweojg9WH2sYJqZK9SswTu6jrscO6D1G5v5vYZ9ru/eq85lXeZQ==}
+
   supports-color@7.2.0:
     resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
     engines: {node: '>=8'}
@@ -3486,6 +4590,9 @@ packages:
     resolution: {integrity: sha512-OEI0IWCe+Dw46019YLl6V10Us5bi574EvlJEOcAkB29IzQ/mYD1A6RyNHLjZPiHCmuodxvgF6U+vZO1L15lxVA==}
     engines: {node: '>=0.2.6'}
 
+  thread-stream@3.1.0:
+    resolution: {integrity: sha512-OqyPZ9u96VohAyMfJykzmivOrY2wfMSf3C5TtFJVgN+Hm6aj+voFhlK+kZEIv2FBh1X6Xp3DlnCOfEQ3B2J86A==}
+
   tiny-invariant@1.3.3:
     resolution: {integrity: sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==}
 
@@ -3499,6 +4606,13 @@ packages:
     resolution: {integrity: sha512-j2Zq4NyQYG5XMST4cbs02Ak8iJUdxRM0XI5QyxXuZOzKOINmWurp3smXu3y5wDcJrptwpSjgXHzIQxR0omXljQ==}
     engines: {node: '>=12.0.0'}
 
+  tinyqueue@3.0.0:
+    resolution: {integrity: sha512-gRa9gwYU3ECmQYv3lslts5hxuIa90veaEcxDYuu3QGOIAEM2mOZkVHp48ANJuu1CURtRdHKUBY5Lm1tHV+sD4g==}
+
+  tmp@0.2.5:
+    resolution: {integrity: sha512-voyz6MApa1rQGUxT3E+BK7/ROe8itEx7vD8/HEvt4xwXucvQ5G5oeEiHkmHZJuBO21RpOf+YYm9MOivj709jow==}
+    engines: {node: '>=14.14'}
+
   to-regex-range@5.0.1:
     resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
     engines: {node: '>=8.0'}
@@ -3523,6 +4637,9 @@ packages:
   ts-interface-checker@0.1.13:
     resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}
 
+  ts-morph@27.0.0:
+    resolution: {integrity: sha512-xcqelpTR5PCuZMs54qp9DE3t7tPgA2v/P1/qdW4ke5b3Y5liTGTYj6a/twT35EQW/H5okRqp1UOqwNlgg0K0eQ==}
+
   tsconfig-paths@3.15.0:
     resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}
 
@@ -3582,13 +4699,25 @@ packages:
     engines: {node: '>=14.17'}
     hasBin: true
 
+  typescript@5.9.3:
+    resolution: {integrity: sha512-jl1vZzPDinLr9eUt3J/t7V6FgNEw9QjvBPdysz9KfQDD41fQrC2Y4vKQdiaUpFT4bXlb1RHhLpp8wtm6M5TgSw==}
+    engines: {node: '>=14.17'}
+    hasBin: true
+
   ufo@1.6.1:
     resolution: {integrity: sha512-9a4/uxlTWJ4+a5i0ooc1rU7C7YOw3wT+UGqdeNNHWnOF9qcMBgLRS+4IYUqbczewFx4mLEig6gawh7X6mFlEkA==}
 
+  ulid@3.0.1:
+    resolution: {integrity: sha512-dPJyqPzx8preQhqq24bBG1YNkvigm87K8kVEHCD+ruZg24t6IFEFv00xMWfxcC4djmFtiTLdFuADn4+DOz6R7Q==}
+    hasBin: true
+
   unbox-primitive@1.1.0:
     resolution: {integrity: sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==}
     engines: {node: '>= 0.4'}
 
+  uncrypto@0.1.3:
+    resolution: {integrity: sha512-Ql87qFHB3s/De2ClA9e0gsnS6zXG27SkTiSJwjCc9MebbfapQfuPzumMIUMi38ezPZVNFcHI9sUIepeQfw8J8Q==}
+
   undici-types@6.21.0:
     resolution: {integrity: sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==}
 
@@ -3609,6 +4738,11 @@ packages:
     peerDependencies:
       react: ^16.8.0 || ^17.0.0 || ^18.0.0 || >=19.0.0-rc <19.0.0 || ^19.0.0
 
+  use-memo-one@1.1.3:
+    resolution: {integrity: sha512-g66/K7ZQGYrI6dy8GLpVcMsBp4s17xNkYJVSMvTEevGy3nDxHOfE6z8BVE22+5G5x7t3+bhzrlTDB7ObrEE0cQ==}
+    peerDependencies:
+      react: ^16.8.0 || ^17.0.0 || ^18.0.0
+
   use-sync-external-store@1.5.0:
     resolution: {integrity: sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==}
     peerDependencies:
@@ -3624,6 +4758,10 @@ packages:
     resolution: {integrity: sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==}
     hasBin: true
 
+  uuid@13.0.0:
+    resolution: {integrity: sha512-XQegIaBTVUjSHliKqcnFqYypAd4S+WCYt5NIeRs6w/UAry7z8Y9j5ZwRRL4kzq9U3sD6v+85er9FvkEaBpji2w==}
+    hasBin: true
+
   uuid@8.3.2:
     resolution: {integrity: sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==}
     hasBin: true
@@ -3669,10 +4807,18 @@ packages:
     engines: {node: '>= 8'}
     hasBin: true
 
+  wmf@1.0.2:
+    resolution: {integrity: sha512-/p9K7bEh0Dj6WbXg4JG0xvLQmIadrner1bi45VMJTfnbVHsc7yIajZyoSoK60/dtVBs12Fm6WkUI5/3WAVsNMw==}
+    engines: {node: '>=0.8'}
+
   word-wrap@1.2.5:
     resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
     engines: {node: '>=0.10.0'}
 
+  word@0.3.0:
+    resolution: {integrity: sha512-OELeY0Q61OXpdUfTp+oweA/vtLVg5VDOXh+3he3PNzLGG/y0oylSOC1xRVj0+l4vQ3tj/bB1HVHv1ocXkQceFA==}
+    engines: {node: '>=0.8'}
+
   wrap-ansi@6.2.0:
     resolution: {integrity: sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==}
     engines: {node: '>=8'}
@@ -3685,9 +4831,21 @@ packages:
     resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
     engines: {node: '>=12'}
 
+  write-file-atomic@5.0.1:
+    resolution: {integrity: sha512-+QU2zd6OTD8XWIJCbffaiQeH9U73qIqafo1x6V1snCWYGJf6cVE0cDR4D8xRzcEnfI21IFrUPzPGtcPf8AC+Rw==}
+    engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}
+
+  xlsx@0.18.5:
+    resolution: {integrity: sha512-dmg3LCjBPHZnQp5/F/+nnTa+miPJxUXB6vtk42YjBBKayDNagxGEeIdWApkYPOf3Z3pm3k62Knjzp7lMeTEtFQ==}
+    engines: {node: '>=0.8'}
+    hasBin: true
+
   y18n@4.0.3:
     resolution: {integrity: sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==}
 
+  yallist@3.1.1:
+    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}
+
   yallist@4.0.0:
     resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}
 
@@ -3718,8 +4876,763 @@ snapshots:
 
   '@alloc/quick-lru@5.2.0': {}
 
+  '@aws-crypto/crc32@5.2.0':
+    dependencies:
+      '@aws-crypto/util': 5.2.0
+      '@aws-sdk/types': 3.901.0
+      tslib: 2.8.1
+
+  '@aws-crypto/crc32c@5.2.0':
+    dependencies:
+      '@aws-crypto/util': 5.2.0
+      '@aws-sdk/types': 3.901.0
+      tslib: 2.8.1
+
+  '@aws-crypto/sha1-browser@5.2.0':
+    dependencies:
+      '@aws-crypto/supports-web-crypto': 5.2.0
+      '@aws-crypto/util': 5.2.0
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-locate-window': 3.893.0
+      '@smithy/util-utf8': 2.3.0
+      tslib: 2.8.1
+
+  '@aws-crypto/sha256-browser@5.2.0':
+    dependencies:
+      '@aws-crypto/sha256-js': 5.2.0
+      '@aws-crypto/supports-web-crypto': 5.2.0
+      '@aws-crypto/util': 5.2.0
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-locate-window': 3.893.0
+      '@smithy/util-utf8': 2.3.0
+      tslib: 2.8.1
+
+  '@aws-crypto/sha256-js@5.2.0':
+    dependencies:
+      '@aws-crypto/util': 5.2.0
+      '@aws-sdk/types': 3.901.0
+      tslib: 2.8.1
+
+  '@aws-crypto/supports-web-crypto@5.2.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@aws-crypto/util@5.2.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/util-utf8': 2.3.0
+      tslib: 2.8.1
+
+  '@aws-sdk/client-s3@3.901.0':
+    dependencies:
+      '@aws-crypto/sha1-browser': 5.2.0
+      '@aws-crypto/sha256-browser': 5.2.0
+      '@aws-crypto/sha256-js': 5.2.0
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/credential-provider-node': 3.901.0
+      '@aws-sdk/middleware-bucket-endpoint': 3.901.0
+      '@aws-sdk/middleware-expect-continue': 3.901.0
+      '@aws-sdk/middleware-flexible-checksums': 3.901.0
+      '@aws-sdk/middleware-host-header': 3.901.0
+      '@aws-sdk/middleware-location-constraint': 3.901.0
+      '@aws-sdk/middleware-logger': 3.901.0
+      '@aws-sdk/middleware-recursion-detection': 3.901.0
+      '@aws-sdk/middleware-sdk-s3': 3.901.0
+      '@aws-sdk/middleware-ssec': 3.901.0
+      '@aws-sdk/middleware-user-agent': 3.901.0
+      '@aws-sdk/region-config-resolver': 3.901.0
+      '@aws-sdk/signature-v4-multi-region': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-endpoints': 3.901.0
+      '@aws-sdk/util-user-agent-browser': 3.901.0
+      '@aws-sdk/util-user-agent-node': 3.901.0
+      '@aws-sdk/xml-builder': 3.901.0
+      '@smithy/config-resolver': 4.3.0
+      '@smithy/core': 3.14.0
+      '@smithy/eventstream-serde-browser': 4.2.0
+      '@smithy/eventstream-serde-config-resolver': 4.3.0
+      '@smithy/eventstream-serde-node': 4.2.0
+      '@smithy/fetch-http-handler': 5.3.0
+      '@smithy/hash-blob-browser': 4.2.0
+      '@smithy/hash-node': 4.2.0
+      '@smithy/hash-stream-node': 4.2.0
+      '@smithy/invalid-dependency': 4.2.0
+      '@smithy/md5-js': 4.2.0
+      '@smithy/middleware-content-length': 4.2.0
+      '@smithy/middleware-endpoint': 4.3.0
+      '@smithy/middleware-retry': 4.4.0
+      '@smithy/middleware-serde': 4.2.0
+      '@smithy/middleware-stack': 4.2.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/node-http-handler': 4.3.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      '@smithy/url-parser': 4.2.0
+      '@smithy/util-base64': 4.2.0
+      '@smithy/util-body-length-browser': 4.2.0
+      '@smithy/util-body-length-node': 4.2.0
+      '@smithy/util-defaults-mode-browser': 4.2.0
+      '@smithy/util-defaults-mode-node': 4.2.0
+      '@smithy/util-endpoints': 3.2.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-retry': 4.2.0
+      '@smithy/util-stream': 4.4.0
+      '@smithy/util-utf8': 4.2.0
+      '@smithy/util-waiter': 4.2.0
+      '@smithy/uuid': 1.1.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/client-sesv2@3.901.0':
+    dependencies:
+      '@aws-crypto/sha256-browser': 5.2.0
+      '@aws-crypto/sha256-js': 5.2.0
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/credential-provider-node': 3.901.0
+      '@aws-sdk/middleware-host-header': 3.901.0
+      '@aws-sdk/middleware-logger': 3.901.0
+      '@aws-sdk/middleware-recursion-detection': 3.901.0
+      '@aws-sdk/middleware-user-agent': 3.901.0
+      '@aws-sdk/region-config-resolver': 3.901.0
+      '@aws-sdk/signature-v4-multi-region': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-endpoints': 3.901.0
+      '@aws-sdk/util-user-agent-browser': 3.901.0
+      '@aws-sdk/util-user-agent-node': 3.901.0
+      '@smithy/config-resolver': 4.3.0
+      '@smithy/core': 3.14.0
+      '@smithy/fetch-http-handler': 5.3.0
+      '@smithy/hash-node': 4.2.0
+      '@smithy/invalid-dependency': 4.2.0
+      '@smithy/middleware-content-length': 4.2.0
+      '@smithy/middleware-endpoint': 4.3.0
+      '@smithy/middleware-retry': 4.4.0
+      '@smithy/middleware-serde': 4.2.0
+      '@smithy/middleware-stack': 4.2.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/node-http-handler': 4.3.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      '@smithy/url-parser': 4.2.0
+      '@smithy/util-base64': 4.2.0
+      '@smithy/util-body-length-browser': 4.2.0
+      '@smithy/util-body-length-node': 4.2.0
+      '@smithy/util-defaults-mode-browser': 4.2.0
+      '@smithy/util-defaults-mode-node': 4.2.0
+      '@smithy/util-endpoints': 3.2.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-retry': 4.2.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/client-sso@3.901.0':
+    dependencies:
+      '@aws-crypto/sha256-browser': 5.2.0
+      '@aws-crypto/sha256-js': 5.2.0
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/middleware-host-header': 3.901.0
+      '@aws-sdk/middleware-logger': 3.901.0
+      '@aws-sdk/middleware-recursion-detection': 3.901.0
+      '@aws-sdk/middleware-user-agent': 3.901.0
+      '@aws-sdk/region-config-resolver': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-endpoints': 3.901.0
+      '@aws-sdk/util-user-agent-browser': 3.901.0
+      '@aws-sdk/util-user-agent-node': 3.901.0
+      '@smithy/config-resolver': 4.3.0
+      '@smithy/core': 3.14.0
+      '@smithy/fetch-http-handler': 5.3.0
+      '@smithy/hash-node': 4.2.0
+      '@smithy/invalid-dependency': 4.2.0
+      '@smithy/middleware-content-length': 4.2.0
+      '@smithy/middleware-endpoint': 4.3.0
+      '@smithy/middleware-retry': 4.4.0
+      '@smithy/middleware-serde': 4.2.0
+      '@smithy/middleware-stack': 4.2.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/node-http-handler': 4.3.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      '@smithy/url-parser': 4.2.0
+      '@smithy/util-base64': 4.2.0
+      '@smithy/util-body-length-browser': 4.2.0
+      '@smithy/util-body-length-node': 4.2.0
+      '@smithy/util-defaults-mode-browser': 4.2.0
+      '@smithy/util-defaults-mode-node': 4.2.0
+      '@smithy/util-endpoints': 3.2.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-retry': 4.2.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/core@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/xml-builder': 3.901.0
+      '@smithy/core': 3.14.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/signature-v4': 5.3.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-base64': 4.2.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+
+  '@aws-sdk/credential-provider-env@3.901.0':
+    dependencies:
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/credential-provider-http@3.901.0':
+    dependencies:
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/fetch-http-handler': 5.3.0
+      '@smithy/node-http-handler': 4.3.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-stream': 4.4.0
+      tslib: 2.8.1
+
+  '@aws-sdk/credential-provider-ini@3.901.0':
+    dependencies:
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/credential-provider-env': 3.901.0
+      '@aws-sdk/credential-provider-http': 3.901.0
+      '@aws-sdk/credential-provider-process': 3.901.0
+      '@aws-sdk/credential-provider-sso': 3.901.0
+      '@aws-sdk/credential-provider-web-identity': 3.901.0
+      '@aws-sdk/nested-clients': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/credential-provider-imds': 4.2.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/shared-ini-file-loader': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/credential-provider-node@3.901.0':
+    dependencies:
+      '@aws-sdk/credential-provider-env': 3.901.0
+      '@aws-sdk/credential-provider-http': 3.901.0
+      '@aws-sdk/credential-provider-ini': 3.901.0
+      '@aws-sdk/credential-provider-process': 3.901.0
+      '@aws-sdk/credential-provider-sso': 3.901.0
+      '@aws-sdk/credential-provider-web-identity': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/credential-provider-imds': 4.2.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/shared-ini-file-loader': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/credential-provider-process@3.901.0':
+    dependencies:
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/shared-ini-file-loader': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/credential-provider-sso@3.901.0':
+    dependencies:
+      '@aws-sdk/client-sso': 3.901.0
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/token-providers': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/shared-ini-file-loader': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/credential-provider-web-identity@3.901.0':
+    dependencies:
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/nested-clients': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/shared-ini-file-loader': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/middleware-bucket-endpoint@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-arn-parser': 3.893.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-config-provider': 4.2.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-expect-continue@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-flexible-checksums@3.901.0':
+    dependencies:
+      '@aws-crypto/crc32': 5.2.0
+      '@aws-crypto/crc32c': 5.2.0
+      '@aws-crypto/util': 5.2.0
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/is-array-buffer': 4.2.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-stream': 4.4.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-host-header@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-location-constraint@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-logger@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-recursion-detection@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@aws/lambda-invoke-store': 0.0.1
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-sdk-s3@3.901.0':
+    dependencies:
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-arn-parser': 3.893.0
+      '@smithy/core': 3.14.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/signature-v4': 5.3.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-config-provider': 4.2.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-stream': 4.4.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-ssec@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/middleware-user-agent@3.901.0':
+    dependencies:
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-endpoints': 3.901.0
+      '@smithy/core': 3.14.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/nested-clients@3.901.0':
+    dependencies:
+      '@aws-crypto/sha256-browser': 5.2.0
+      '@aws-crypto/sha256-js': 5.2.0
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/middleware-host-header': 3.901.0
+      '@aws-sdk/middleware-logger': 3.901.0
+      '@aws-sdk/middleware-recursion-detection': 3.901.0
+      '@aws-sdk/middleware-user-agent': 3.901.0
+      '@aws-sdk/region-config-resolver': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@aws-sdk/util-endpoints': 3.901.0
+      '@aws-sdk/util-user-agent-browser': 3.901.0
+      '@aws-sdk/util-user-agent-node': 3.901.0
+      '@smithy/config-resolver': 4.3.0
+      '@smithy/core': 3.14.0
+      '@smithy/fetch-http-handler': 5.3.0
+      '@smithy/hash-node': 4.2.0
+      '@smithy/invalid-dependency': 4.2.0
+      '@smithy/middleware-content-length': 4.2.0
+      '@smithy/middleware-endpoint': 4.3.0
+      '@smithy/middleware-retry': 4.4.0
+      '@smithy/middleware-serde': 4.2.0
+      '@smithy/middleware-stack': 4.2.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/node-http-handler': 4.3.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      '@smithy/url-parser': 4.2.0
+      '@smithy/util-base64': 4.2.0
+      '@smithy/util-body-length-browser': 4.2.0
+      '@smithy/util-body-length-node': 4.2.0
+      '@smithy/util-defaults-mode-browser': 4.2.0
+      '@smithy/util-defaults-mode-node': 4.2.0
+      '@smithy/util-endpoints': 3.2.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-retry': 4.2.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/region-config-resolver@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-config-provider': 4.2.0
+      '@smithy/util-middleware': 4.2.0
+      tslib: 2.8.1
+
+  '@aws-sdk/signature-v4-multi-region@3.901.0':
+    dependencies:
+      '@aws-sdk/middleware-sdk-s3': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/signature-v4': 5.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/token-providers@3.901.0':
+    dependencies:
+      '@aws-sdk/core': 3.901.0
+      '@aws-sdk/nested-clients': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/shared-ini-file-loader': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+    transitivePeerDependencies:
+      - aws-crt
+
+  '@aws-sdk/types@3.901.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/util-arn-parser@3.893.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@aws-sdk/util-endpoints@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/types': 4.6.0
+      '@smithy/url-parser': 4.2.0
+      '@smithy/util-endpoints': 3.2.0
+      tslib: 2.8.1
+
+  '@aws-sdk/util-locate-window@3.893.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@aws-sdk/util-user-agent-browser@3.901.0':
+    dependencies:
+      '@aws-sdk/types': 3.901.0
+      '@smithy/types': 4.6.0
+      bowser: 2.12.1
+      tslib: 2.8.1
+
+  '@aws-sdk/util-user-agent-node@3.901.0':
+    dependencies:
+      '@aws-sdk/middleware-user-agent': 3.901.0
+      '@aws-sdk/types': 3.901.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@aws-sdk/xml-builder@3.901.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      fast-xml-parser: 5.2.5
+      tslib: 2.8.1
+
+  '@aws/lambda-invoke-store@0.0.1': {}
+
+  '@babel/code-frame@7.27.1':
+    dependencies:
+      '@babel/helper-validator-identifier': 7.27.1
+      js-tokens: 4.0.0
+      picocolors: 1.1.1
+
+  '@babel/compat-data@7.28.4': {}
+
+  '@babel/core@7.28.4':
+    dependencies:
+      '@babel/code-frame': 7.27.1
+      '@babel/generator': 7.28.3
+      '@babel/helper-compilation-targets': 7.27.2
+      '@babel/helper-module-transforms': 7.28.3(@babel/core@7.28.4)
+      '@babel/helpers': 7.28.4
+      '@babel/parser': 7.28.4
+      '@babel/template': 7.27.2
+      '@babel/traverse': 7.28.4
+      '@babel/types': 7.28.4
+      '@jridgewell/remapping': 2.3.5
+      convert-source-map: 2.0.0
+      debug: 4.4.3
+      gensync: 1.0.0-beta.2
+      json5: 2.2.3
+      semver: 6.3.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/generator@7.28.3':
+    dependencies:
+      '@babel/parser': 7.28.4
+      '@babel/types': 7.28.4
+      '@jridgewell/gen-mapping': 0.3.13
+      '@jridgewell/trace-mapping': 0.3.31
+      jsesc: 3.1.0
+
+  '@babel/helper-annotate-as-pure@7.27.3':
+    dependencies:
+      '@babel/types': 7.28.4
+
+  '@babel/helper-compilation-targets@7.27.2':
+    dependencies:
+      '@babel/compat-data': 7.28.4
+      '@babel/helper-validator-option': 7.27.1
+      browserslist: 4.26.2
+      lru-cache: 5.1.1
+      semver: 6.3.1
+
+  '@babel/helper-create-class-features-plugin@7.28.3(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-annotate-as-pure': 7.27.3
+      '@babel/helper-member-expression-to-functions': 7.27.1
+      '@babel/helper-optimise-call-expression': 7.27.1
+      '@babel/helper-replace-supers': 7.27.1(@babel/core@7.28.4)
+      '@babel/helper-skip-transparent-expression-wrappers': 7.27.1
+      '@babel/traverse': 7.28.4
+      semver: 6.3.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/helper-globals@7.28.0': {}
+
+  '@babel/helper-member-expression-to-functions@7.27.1':
+    dependencies:
+      '@babel/traverse': 7.28.4
+      '@babel/types': 7.28.4
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/helper-module-imports@7.27.1':
+    dependencies:
+      '@babel/traverse': 7.28.4
+      '@babel/types': 7.28.4
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/helper-module-transforms@7.28.3(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-module-imports': 7.27.1
+      '@babel/helper-validator-identifier': 7.27.1
+      '@babel/traverse': 7.28.4
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/helper-optimise-call-expression@7.27.1':
+    dependencies:
+      '@babel/types': 7.28.4
+
+  '@babel/helper-plugin-utils@7.27.1': {}
+
+  '@babel/helper-replace-supers@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-member-expression-to-functions': 7.27.1
+      '@babel/helper-optimise-call-expression': 7.27.1
+      '@babel/traverse': 7.28.4
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/helper-skip-transparent-expression-wrappers@7.27.1':
+    dependencies:
+      '@babel/traverse': 7.28.4
+      '@babel/types': 7.28.4
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/helper-string-parser@7.27.1': {}
+
+  '@babel/helper-validator-identifier@7.27.1': {}
+
+  '@babel/helper-validator-option@7.27.1': {}
+
+  '@babel/helpers@7.28.4':
+    dependencies:
+      '@babel/template': 7.27.2
+      '@babel/types': 7.28.4
+
+  '@babel/parser@7.28.4':
+    dependencies:
+      '@babel/types': 7.28.4
+
+  '@babel/plugin-syntax-flow@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-plugin-utils': 7.27.1
+
+  '@babel/plugin-syntax-jsx@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-plugin-utils': 7.27.1
+
+  '@babel/plugin-syntax-typescript@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-plugin-utils': 7.27.1
+
+  '@babel/plugin-transform-class-properties@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-create-class-features-plugin': 7.28.3(@babel/core@7.28.4)
+      '@babel/helper-plugin-utils': 7.27.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/plugin-transform-flow-strip-types@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-plugin-utils': 7.27.1
+      '@babel/plugin-syntax-flow': 7.27.1(@babel/core@7.28.4)
+
+  '@babel/plugin-transform-modules-commonjs@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-module-transforms': 7.28.3(@babel/core@7.28.4)
+      '@babel/helper-plugin-utils': 7.27.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/plugin-transform-nullish-coalescing-operator@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-plugin-utils': 7.27.1
+
+  '@babel/plugin-transform-optional-chaining@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-plugin-utils': 7.27.1
+      '@babel/helper-skip-transparent-expression-wrappers': 7.27.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/plugin-transform-private-methods@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-create-class-features-plugin': 7.28.3(@babel/core@7.28.4)
+      '@babel/helper-plugin-utils': 7.27.1
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/plugin-transform-typescript@7.28.0(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-annotate-as-pure': 7.27.3
+      '@babel/helper-create-class-features-plugin': 7.28.3(@babel/core@7.28.4)
+      '@babel/helper-plugin-utils': 7.27.1
+      '@babel/helper-skip-transparent-expression-wrappers': 7.27.1
+      '@babel/plugin-syntax-typescript': 7.27.1(@babel/core@7.28.4)
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/preset-flow@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-plugin-utils': 7.27.1
+      '@babel/helper-validator-option': 7.27.1
+      '@babel/plugin-transform-flow-strip-types': 7.27.1(@babel/core@7.28.4)
+
+  '@babel/preset-typescript@7.27.1(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/helper-plugin-utils': 7.27.1
+      '@babel/helper-validator-option': 7.27.1
+      '@babel/plugin-syntax-jsx': 7.27.1(@babel/core@7.28.4)
+      '@babel/plugin-transform-modules-commonjs': 7.27.1(@babel/core@7.28.4)
+      '@babel/plugin-transform-typescript': 7.28.0(@babel/core@7.28.4)
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/register@7.28.3(@babel/core@7.28.4)':
+    dependencies:
+      '@babel/core': 7.28.4
+      clone-deep: 4.0.1
+      find-cache-dir: 2.1.0
+      make-dir: 2.1.0
+      pirates: 4.0.7
+      source-map-support: 0.5.21
+
   '@babel/runtime@7.28.4': {}
 
+  '@babel/template@7.27.2':
+    dependencies:
+      '@babel/code-frame': 7.27.1
+      '@babel/parser': 7.28.4
+      '@babel/types': 7.28.4
+
+  '@babel/traverse@7.28.4':
+    dependencies:
+      '@babel/code-frame': 7.27.1
+      '@babel/generator': 7.28.3
+      '@babel/helper-globals': 7.28.0
+      '@babel/parser': 7.28.4
+      '@babel/template': 7.27.2
+      '@babel/types': 7.28.4
+      debug: 4.4.3
+    transitivePeerDependencies:
+      - supports-color
+
+  '@babel/types@7.28.4':
+    dependencies:
+      '@babel/helper-string-parser': 7.27.1
+      '@babel/helper-validator-identifier': 7.27.1
+
   '@emnapi/core@1.5.0':
     dependencies:
       '@emnapi/wasi-threads': 1.1.0
@@ -4007,6 +5920,12 @@ snapshots:
 
   '@ioredis/commands@1.4.0': {}
 
+  '@isaacs/balanced-match@4.0.1': {}
+
+  '@isaacs/brace-expansion@5.0.0':
+    dependencies:
+      '@isaacs/balanced-match': 4.0.1
+
   '@isaacs/cliui@8.0.2':
     dependencies:
       string-width: 5.1.2
@@ -4021,6 +5940,11 @@ snapshots:
       '@jridgewell/sourcemap-codec': 1.5.5
       '@jridgewell/trace-mapping': 0.3.31
 
+  '@jridgewell/remapping@2.3.5':
+    dependencies:
+      '@jridgewell/gen-mapping': 0.3.13
+      '@jridgewell/trace-mapping': 0.3.31
+
   '@jridgewell/resolve-uri@3.1.2': {}
 
   '@jridgewell/sourcemap-codec@1.5.5': {}
@@ -4030,6 +5954,47 @@ snapshots:
       '@jridgewell/resolve-uri': 3.1.2
       '@jridgewell/sourcemap-codec': 1.5.5
 
+  '@mapbox/geojson-rewind@0.5.2':
+    dependencies:
+      get-stream: 6.0.1
+      minimist: 1.2.8
+
+  '@mapbox/jsonlint-lines-primitives@2.0.2': {}
+
+  '@mapbox/point-geometry@1.1.0': {}
+
+  '@mapbox/tiny-sdf@2.0.7': {}
+
+  '@mapbox/unitbezier@0.0.1': {}
+
+  '@mapbox/vector-tile@2.0.4':
+    dependencies:
+      '@mapbox/point-geometry': 1.1.0
+      '@types/geojson': 7946.0.16
+      pbf: 4.0.1
+
+  '@mapbox/whoots-js@3.1.0': {}
+
+  '@maplibre/maplibre-gl-style-spec@24.2.0':
+    dependencies:
+      '@mapbox/jsonlint-lines-primitives': 2.0.2
+      '@mapbox/unitbezier': 0.0.1
+      json-stringify-pretty-compact: 4.0.0
+      minimist: 1.2.8
+      quickselect: 3.0.0
+      rw: 1.3.3
+      tinyqueue: 3.0.0
+
+  '@maplibre/vt-pbf@4.0.3':
+    dependencies:
+      '@mapbox/point-geometry': 1.1.0
+      '@mapbox/vector-tile': 2.0.4
+      '@types/geojson-vt': 3.2.5
+      '@types/supercluster': 7.1.3
+      geojson-vt: 4.0.2
+      pbf: 4.0.1
+      supercluster: 8.0.1
+
   '@mongodb-js/saslprep@1.3.1':
     dependencies:
       sparse-bitfield: 3.0.3
@@ -4136,10 +6101,10 @@ snapshots:
       prisma: 6.16.1(typescript@5.9.2)
       typescript: 5.9.2
 
-  '@prisma/client@6.16.2(prisma@6.16.2(typescript@5.9.2))(typescript@5.9.2)':
+  '@prisma/client@6.16.3(prisma@6.16.3(typescript@5.9.3))(typescript@5.9.3)':
     optionalDependencies:
-      prisma: 6.16.2(typescript@5.9.2)
-      typescript: 5.9.2
+      prisma: 6.16.3(typescript@5.9.3)
+      typescript: 5.9.3
 
   '@prisma/config@6.16.1':
     dependencies:
@@ -4150,7 +6115,7 @@ snapshots:
     transitivePeerDependencies:
       - magicast
 
-  '@prisma/config@6.16.2':
+  '@prisma/config@6.16.3':
     dependencies:
       c12: 3.1.0
       deepmerge-ts: 7.1.5
@@ -4158,15 +6123,15 @@ snapshots:
       empathic: 2.0.0
     transitivePeerDependencies:
       - magicast
-    optional: true
 
   '@prisma/debug@6.16.1': {}
 
-  '@prisma/debug@6.16.2':
-    optional: true
+  '@prisma/debug@6.16.3': {}
 
   '@prisma/engines-version@6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43': {}
 
+  '@prisma/engines-version@6.16.1-1.bb420e667c1820a8c05a38023385f6cc7ef8e83a': {}
+
   '@prisma/engines@6.16.1':
     dependencies:
       '@prisma/debug': 6.16.1
@@ -4174,13 +6139,12 @@ snapshots:
       '@prisma/fetch-engine': 6.16.1
       '@prisma/get-platform': 6.16.1
 
-  '@prisma/engines@6.16.2':
+  '@prisma/engines@6.16.3':
     dependencies:
-      '@prisma/debug': 6.16.2
-      '@prisma/engines-version': 6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43
-      '@prisma/fetch-engine': 6.16.2
-      '@prisma/get-platform': 6.16.2
-    optional: true
+      '@prisma/debug': 6.16.3
+      '@prisma/engines-version': 6.16.1-1.bb420e667c1820a8c05a38023385f6cc7ef8e83a
+      '@prisma/fetch-engine': 6.16.3
+      '@prisma/get-platform': 6.16.3
 
   '@prisma/fetch-engine@6.16.1':
     dependencies:
@@ -4188,21 +6152,19 @@ snapshots:
       '@prisma/engines-version': 6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43
       '@prisma/get-platform': 6.16.1
 
-  '@prisma/fetch-engine@6.16.2':
+  '@prisma/fetch-engine@6.16.3':
     dependencies:
-      '@prisma/debug': 6.16.2
-      '@prisma/engines-version': 6.16.0-7.1c57fdcd7e44b29b9313256c76699e91c3ac3c43
-      '@prisma/get-platform': 6.16.2
-    optional: true
+      '@prisma/debug': 6.16.3
+      '@prisma/engines-version': 6.16.1-1.bb420e667c1820a8c05a38023385f6cc7ef8e83a
+      '@prisma/get-platform': 6.16.3
 
   '@prisma/get-platform@6.16.1':
     dependencies:
       '@prisma/debug': 6.16.1
 
-  '@prisma/get-platform@6.16.2':
+  '@prisma/get-platform@6.16.3':
     dependencies:
-      '@prisma/debug': 6.16.2
-    optional: true
+      '@prisma/debug': 6.16.3
 
   '@radix-ui/primitive@1.1.3': {}
 
@@ -4455,36 +6417,374 @@ snapshots:
   '@rollup/rollup-linux-riscv64-gnu@4.52.3':
     optional: true
 
-  '@rollup/rollup-linux-riscv64-musl@4.52.3':
-    optional: true
+  '@rollup/rollup-linux-riscv64-musl@4.52.3':
+    optional: true
+
+  '@rollup/rollup-linux-s390x-gnu@4.52.3':
+    optional: true
+
+  '@rollup/rollup-linux-x64-gnu@4.52.3':
+    optional: true
+
+  '@rollup/rollup-linux-x64-musl@4.52.3':
+    optional: true
+
+  '@rollup/rollup-openharmony-arm64@4.52.3':
+    optional: true
+
+  '@rollup/rollup-win32-arm64-msvc@4.52.3':
+    optional: true
+
+  '@rollup/rollup-win32-ia32-msvc@4.52.3':
+    optional: true
+
+  '@rollup/rollup-win32-x64-gnu@4.52.3':
+    optional: true
+
+  '@rollup/rollup-win32-x64-msvc@4.52.3':
+    optional: true
+
+  '@rtsao/scc@1.1.0': {}
+
+  '@rushstack/eslint-patch@1.12.0': {}
+
+  '@smithy/abort-controller@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/chunked-blob-reader-native@4.2.0':
+    dependencies:
+      '@smithy/util-base64': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/chunked-blob-reader@5.2.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@smithy/config-resolver@4.3.0':
+    dependencies:
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-config-provider': 4.2.0
+      '@smithy/util-middleware': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/core@3.14.0':
+    dependencies:
+      '@smithy/middleware-serde': 4.2.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-base64': 4.2.0
+      '@smithy/util-body-length-browser': 4.2.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-stream': 4.4.0
+      '@smithy/util-utf8': 4.2.0
+      '@smithy/uuid': 1.1.0
+      tslib: 2.8.1
+
+  '@smithy/credential-provider-imds@4.2.0':
+    dependencies:
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/types': 4.6.0
+      '@smithy/url-parser': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/eventstream-codec@4.2.0':
+    dependencies:
+      '@aws-crypto/crc32': 5.2.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-hex-encoding': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/eventstream-serde-browser@4.2.0':
+    dependencies:
+      '@smithy/eventstream-serde-universal': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/eventstream-serde-config-resolver@4.3.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/eventstream-serde-node@4.2.0':
+    dependencies:
+      '@smithy/eventstream-serde-universal': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/eventstream-serde-universal@4.2.0':
+    dependencies:
+      '@smithy/eventstream-codec': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/fetch-http-handler@5.3.0':
+    dependencies:
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/querystring-builder': 4.2.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-base64': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/hash-blob-browser@4.2.0':
+    dependencies:
+      '@smithy/chunked-blob-reader': 5.2.0
+      '@smithy/chunked-blob-reader-native': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/hash-node@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      '@smithy/util-buffer-from': 4.2.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/hash-stream-node@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/invalid-dependency@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/is-array-buffer@2.2.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@smithy/is-array-buffer@4.2.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@smithy/md5-js@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/middleware-content-length@4.2.0':
+    dependencies:
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/middleware-endpoint@4.3.0':
+    dependencies:
+      '@smithy/core': 3.14.0
+      '@smithy/middleware-serde': 4.2.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/shared-ini-file-loader': 4.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/url-parser': 4.2.0
+      '@smithy/util-middleware': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/middleware-retry@4.4.0':
+    dependencies:
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/service-error-classification': 4.2.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-retry': 4.2.0
+      '@smithy/uuid': 1.1.0
+      tslib: 2.8.1
+
+  '@smithy/middleware-serde@4.2.0':
+    dependencies:
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/middleware-stack@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/node-config-provider@4.3.0':
+    dependencies:
+      '@smithy/property-provider': 4.2.0
+      '@smithy/shared-ini-file-loader': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/node-http-handler@4.3.0':
+    dependencies:
+      '@smithy/abort-controller': 4.2.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/querystring-builder': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/property-provider@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/protocol-http@5.3.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/querystring-builder@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      '@smithy/util-uri-escape': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/querystring-parser@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/service-error-classification@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+
+  '@smithy/shared-ini-file-loader@4.3.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/signature-v4@5.3.0':
+    dependencies:
+      '@smithy/is-array-buffer': 4.2.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-hex-encoding': 4.2.0
+      '@smithy/util-middleware': 4.2.0
+      '@smithy/util-uri-escape': 4.2.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/smithy-client@4.7.0':
+    dependencies:
+      '@smithy/core': 3.14.0
+      '@smithy/middleware-endpoint': 4.3.0
+      '@smithy/middleware-stack': 4.2.0
+      '@smithy/protocol-http': 5.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-stream': 4.4.0
+      tslib: 2.8.1
+
+  '@smithy/types@4.6.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@smithy/url-parser@4.2.0':
+    dependencies:
+      '@smithy/querystring-parser': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
+
+  '@smithy/util-base64@4.2.0':
+    dependencies:
+      '@smithy/util-buffer-from': 4.2.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/util-body-length-browser@4.2.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@smithy/util-body-length-node@4.2.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@smithy/util-buffer-from@2.2.0':
+    dependencies:
+      '@smithy/is-array-buffer': 2.2.0
+      tslib: 2.8.1
+
+  '@smithy/util-buffer-from@4.2.0':
+    dependencies:
+      '@smithy/is-array-buffer': 4.2.0
+      tslib: 2.8.1
+
+  '@smithy/util-config-provider@4.2.0':
+    dependencies:
+      tslib: 2.8.1
+
+  '@smithy/util-defaults-mode-browser@4.2.0':
+    dependencies:
+      '@smithy/property-provider': 4.2.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      bowser: 2.12.1
+      tslib: 2.8.1
+
+  '@smithy/util-defaults-mode-node@4.2.0':
+    dependencies:
+      '@smithy/config-resolver': 4.3.0
+      '@smithy/credential-provider-imds': 4.2.0
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/property-provider': 4.2.0
+      '@smithy/smithy-client': 4.7.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
 
-  '@rollup/rollup-linux-s390x-gnu@4.52.3':
-    optional: true
+  '@smithy/util-endpoints@3.2.0':
+    dependencies:
+      '@smithy/node-config-provider': 4.3.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
 
-  '@rollup/rollup-linux-x64-gnu@4.52.3':
-    optional: true
+  '@smithy/util-hex-encoding@4.2.0':
+    dependencies:
+      tslib: 2.8.1
 
-  '@rollup/rollup-linux-x64-musl@4.52.3':
-    optional: true
+  '@smithy/util-middleware@4.2.0':
+    dependencies:
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
 
-  '@rollup/rollup-openharmony-arm64@4.52.3':
-    optional: true
+  '@smithy/util-retry@4.2.0':
+    dependencies:
+      '@smithy/service-error-classification': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
 
-  '@rollup/rollup-win32-arm64-msvc@4.52.3':
-    optional: true
+  '@smithy/util-stream@4.4.0':
+    dependencies:
+      '@smithy/fetch-http-handler': 5.3.0
+      '@smithy/node-http-handler': 4.3.0
+      '@smithy/types': 4.6.0
+      '@smithy/util-base64': 4.2.0
+      '@smithy/util-buffer-from': 4.2.0
+      '@smithy/util-hex-encoding': 4.2.0
+      '@smithy/util-utf8': 4.2.0
+      tslib: 2.8.1
 
-  '@rollup/rollup-win32-ia32-msvc@4.52.3':
-    optional: true
+  '@smithy/util-uri-escape@4.2.0':
+    dependencies:
+      tslib: 2.8.1
 
-  '@rollup/rollup-win32-x64-gnu@4.52.3':
-    optional: true
+  '@smithy/util-utf8@2.3.0':
+    dependencies:
+      '@smithy/util-buffer-from': 2.2.0
+      tslib: 2.8.1
 
-  '@rollup/rollup-win32-x64-msvc@4.52.3':
-    optional: true
+  '@smithy/util-utf8@4.2.0':
+    dependencies:
+      '@smithy/util-buffer-from': 4.2.0
+      tslib: 2.8.1
 
-  '@rtsao/scc@1.1.0': {}
+  '@smithy/util-waiter@4.2.0':
+    dependencies:
+      '@smithy/abort-controller': 4.2.0
+      '@smithy/types': 4.6.0
+      tslib: 2.8.1
 
-  '@rushstack/eslint-patch@1.12.0': {}
+  '@smithy/uuid@1.1.0':
+    dependencies:
+      tslib: 2.8.1
 
   '@standard-schema/spec@1.0.0': {}
 
@@ -4506,6 +6806,12 @@ snapshots:
       postcss-selector-parser: 6.0.10
       tailwindcss: 3.4.17
 
+  '@ts-morph/common@0.28.0':
+    dependencies:
+      minimatch: 10.0.3
+      path-browserify: 1.0.1
+      tinyglobby: 0.2.15
+
   '@tybys/wasm-util@0.10.1':
     dependencies:
       tslib: 2.8.1
@@ -4541,10 +6847,30 @@ snapshots:
 
   '@types/estree@1.0.8': {}
 
+  '@types/geojson-vt@3.2.5':
+    dependencies:
+      '@types/geojson': 7946.0.16
+
+  '@types/geojson@7946.0.16': {}
+
+  '@types/hoist-non-react-statics@3.3.7(@types/react@19.1.13)':
+    dependencies:
+      '@types/react': 19.1.13
+      hoist-non-react-statics: 3.3.2
+
   '@types/json-schema@7.0.15': {}
 
   '@types/json5@0.0.29': {}
 
+  '@types/jsonwebtoken@9.0.10':
+    dependencies:
+      '@types/ms': 2.1.0
+      '@types/node': 22.18.7
+
+  '@types/lodash@4.17.20': {}
+
+  '@types/ms@2.1.0': {}
+
   '@types/node@20.19.17':
     dependencies:
       undici-types: 6.21.0
@@ -4553,8 +6879,19 @@ snapshots:
     dependencies:
       undici-types: 6.21.0
 
+  '@types/nodemailer@7.0.2':
+    dependencies:
+      '@aws-sdk/client-sesv2': 3.901.0
+      '@types/node': 22.18.7
+    transitivePeerDependencies:
+      - aws-crt
+
   '@types/pako@2.0.4': {}
 
+  '@types/qrcode@1.5.5':
+    dependencies:
+      '@types/node': 22.18.7
+
   '@types/raf@3.4.3':
     optional: true
 
@@ -4562,10 +6899,21 @@ snapshots:
     dependencies:
       '@types/react': 19.1.13
 
+  '@types/react-redux@7.1.34':
+    dependencies:
+      '@types/hoist-non-react-statics': 3.3.7(@types/react@19.1.13)
+      '@types/react': 19.1.13
+      hoist-non-react-statics: 3.3.2
+      redux: 4.2.1
+
   '@types/react@19.1.13':
     dependencies:
       csstype: 3.1.3
 
+  '@types/supercluster@7.1.3':
+    dependencies:
+      '@types/geojson': 7946.0.16
+
   '@types/trusted-types@2.0.7':
     optional: true
 
@@ -4729,12 +7077,18 @@ snapshots:
   '@unrs/resolver-binding-win32-x64-msvc@1.11.1':
     optional: true
 
+  '@upstash/redis@1.35.4':
+    dependencies:
+      uncrypto: 0.1.3
+
   acorn-jsx@5.3.2(acorn@8.15.0):
     dependencies:
       acorn: 8.15.0
 
   acorn@8.15.0: {}
 
+  adler-32@1.3.1: {}
+
   ajv@6.12.6:
     dependencies:
       fast-deep-equal: 3.1.3
@@ -4759,6 +7113,10 @@ snapshots:
       normalize-path: 3.0.0
       picomatch: 2.3.1
 
+  arangojs@10.1.2:
+    dependencies:
+      '@types/node': 20.19.17
+
   arg@5.0.2: {}
 
   argparse@2.0.1: {}
@@ -4834,8 +7192,16 @@ snapshots:
 
   ast-types-flow@0.0.8: {}
 
+  ast-types@0.16.1:
+    dependencies:
+      tslib: 2.8.1
+
   async-function@1.0.0: {}
 
+  asynckit@0.4.0: {}
+
+  atomic-sleep@1.0.0: {}
+
   autoprefixer@10.4.21(postcss@8.5.6):
     dependencies:
       browserslist: 4.26.2
@@ -4852,6 +7218,14 @@ snapshots:
 
   axe-core@4.10.3: {}
 
+  axios@1.12.2:
+    dependencies:
+      follow-redirects: 1.15.11
+      form-data: 4.0.4
+      proxy-from-env: 1.1.0
+    transitivePeerDependencies:
+      - debug
+
   axobject-query@4.1.0: {}
 
   balanced-match@1.0.2: {}
@@ -4866,6 +7240,8 @@ snapshots:
 
   binary-extensions@2.3.0: {}
 
+  bowser@2.12.1: {}
+
   brace-expansion@1.1.12:
     dependencies:
       balanced-match: 1.0.2
@@ -4891,6 +7267,8 @@ snapshots:
 
   buffer-equal-constant-time@1.0.1: {}
 
+  buffer-from@1.1.2: {}
+
   buffer@6.0.3:
     dependencies:
       base64-js: 1.5.1
@@ -4971,6 +7349,11 @@ snapshots:
       svg-pathdata: 6.0.3
     optional: true
 
+  cfb@1.2.2:
+    dependencies:
+      adler-32: 1.3.1
+      crc-32: 1.2.2
+
   chalk@4.1.2:
     dependencies:
       ansi-styles: 4.3.0
@@ -5004,18 +7387,34 @@ snapshots:
       strip-ansi: 6.0.1
       wrap-ansi: 6.2.0
 
+  clone-deep@4.0.1:
+    dependencies:
+      is-plain-object: 2.0.4
+      kind-of: 6.0.3
+      shallow-clone: 3.0.1
+
   clsx@2.1.1: {}
 
   cluster-key-slot@1.1.2: {}
 
+  code-block-writer@13.0.3: {}
+
+  codepage@1.15.0: {}
+
   color-convert@2.0.1:
     dependencies:
       color-name: 1.1.4
 
   color-name@1.1.4: {}
 
+  combined-stream@1.0.8:
+    dependencies:
+      delayed-stream: 1.0.0
+
   commander@4.1.1: {}
 
+  commondir@1.0.1: {}
+
   concat-map@0.0.1: {}
 
   confbox@0.1.8: {}
@@ -5024,11 +7423,15 @@ snapshots:
 
   consola@3.4.2: {}
 
+  convert-source-map@2.0.0: {}
+
   cookie@0.7.2: {}
 
   core-js@3.45.1:
     optional: true
 
+  crc-32@1.2.2: {}
+
   cron-parser@4.9.0:
     dependencies:
       luxon: 3.7.2
@@ -5039,6 +7442,10 @@ snapshots:
       shebang-command: 2.0.0
       which: 2.0.2
 
+  css-box-model@1.2.1:
+    dependencies:
+      tiny-invariant: 1.3.3
+
   css-line-break@2.1.0:
     dependencies:
       utrie: 1.0.2
@@ -5139,6 +7546,8 @@ snapshots:
 
   defu@6.1.4: {}
 
+  delayed-stream@1.0.0: {}
+
   denque@2.1.0: {}
 
   dequal@2.0.3: {}
@@ -5189,6 +7598,8 @@ snapshots:
       es-errors: 1.3.0
       gopd: 1.2.0
 
+  earcut@3.0.2: {}
+
   eastasianwidth@0.2.0: {}
 
   ecdsa-sig-formatter@1.0.11:
@@ -5531,6 +7942,8 @@ snapshots:
       acorn-jsx: 5.3.2(acorn@8.15.0)
       eslint-visitor-keys: 4.2.1
 
+  esprima@4.0.1: {}
+
   esquery@1.6.0:
     dependencies:
       estraverse: 5.3.0
@@ -5579,6 +7992,10 @@ snapshots:
       iobuffer: 5.4.0
       pako: 2.1.0
 
+  fast-xml-parser@5.2.5:
+    dependencies:
+      strnum: 2.1.1
+
   fastq@1.19.1:
     dependencies:
       reusify: 1.1.0
@@ -5597,6 +8014,16 @@ snapshots:
     dependencies:
       to-regex-range: 5.0.1
 
+  find-cache-dir@2.1.0:
+    dependencies:
+      commondir: 1.0.1
+      make-dir: 2.1.0
+      pkg-dir: 3.0.0
+
+  find-up@3.0.0:
+    dependencies:
+      locate-path: 3.0.0
+
   find-up@4.1.0:
     dependencies:
       locate-path: 5.0.0
@@ -5620,6 +8047,10 @@ snapshots:
 
   flatted@3.3.3: {}
 
+  flow-parser@0.287.0: {}
+
+  follow-redirects@1.15.11: {}
+
   for-each@0.3.5:
     dependencies:
       is-callable: 1.2.7
@@ -5629,6 +8060,16 @@ snapshots:
       cross-spawn: 7.0.6
       signal-exit: 4.1.0
 
+  form-data@4.0.4:
+    dependencies:
+      asynckit: 0.4.0
+      combined-stream: 1.0.8
+      es-set-tostringtag: 2.1.0
+      hasown: 2.0.2
+      mime-types: 2.1.35
+
+  frac@1.1.2: {}
+
   fraction.js@4.3.7: {}
 
   framer-motion@12.23.22(react-dom@19.1.1(react@19.1.1))(react@19.1.1):
@@ -5656,6 +8097,10 @@ snapshots:
 
   functions-have-names@1.2.3: {}
 
+  gensync@1.0.0-beta.2: {}
+
+  geojson-vt@4.0.2: {}
+
   get-caller-file@2.0.5: {}
 
   get-intrinsic@1.3.0:
@@ -5676,6 +8121,8 @@ snapshots:
       dunder-proto: 1.0.1
       es-object-atoms: 1.1.1
 
+  get-stream@6.0.1: {}
+
   get-symbol-description@1.1.0:
     dependencies:
       call-bound: 1.0.4
@@ -5695,6 +8142,8 @@ snapshots:
       nypm: 0.6.2
       pathe: 2.0.3
 
+  gl-matrix@3.4.4: {}
+
   glob-parent@5.1.2:
     dependencies:
       is-glob: 4.0.3
@@ -5712,6 +8161,15 @@ snapshots:
       package-json-from-dist: 1.0.1
       path-scurry: 1.11.1
 
+  glob@11.0.3:
+    dependencies:
+      foreground-child: 3.3.1
+      jackspeak: 4.1.1
+      minimatch: 10.0.3
+      minipass: 7.1.2
+      package-json-from-dist: 1.0.1
+      path-scurry: 2.0.0
+
   globals@14.0.0: {}
 
   globalthis@1.0.4:
@@ -5725,6 +8183,8 @@ snapshots:
 
   gopd@1.2.0: {}
 
+  graceful-fs@4.2.11: {}
+
   graphemer@1.4.0: {}
 
   has-bigints@1.1.0: {}
@@ -5749,6 +8209,10 @@ snapshots:
     dependencies:
       function-bind: 1.1.2
 
+  hoist-non-react-statics@3.3.2:
+    dependencies:
+      react-is: 16.13.1
+
   html2canvas@1.4.1:
     dependencies:
       css-line-break: 2.1.0
@@ -5885,6 +8349,10 @@ snapshots:
 
   is-number@7.0.0: {}
 
+  is-plain-object@2.0.4:
+    dependencies:
+      isobject: 3.0.1
+
   is-plain-object@5.0.0: {}
 
   is-regex@1.2.1:
@@ -5930,6 +8398,8 @@ snapshots:
 
   isexe@2.0.0: {}
 
+  isobject@3.0.1: {}
+
   iterator.prototype@1.1.5:
     dependencies:
       define-data-property: 1.1.4
@@ -5945,12 +8415,18 @@ snapshots:
     optionalDependencies:
       '@pkgjs/parseargs': 0.11.0
 
+  jackspeak@4.1.1:
+    dependencies:
+      '@isaacs/cliui': 8.0.2
+
   jiti@1.21.7: {}
 
   jiti@2.6.0: {}
 
   jose@4.15.9: {}
 
+  jose@6.1.0: {}
+
   joycon@3.1.1: {}
 
   js-tokens@4.0.0: {}
@@ -5959,12 +8435,39 @@ snapshots:
     dependencies:
       argparse: 2.0.1
 
+  jscodeshift@17.3.0:
+    dependencies:
+      '@babel/core': 7.28.4
+      '@babel/parser': 7.28.4
+      '@babel/plugin-transform-class-properties': 7.27.1(@babel/core@7.28.4)
+      '@babel/plugin-transform-modules-commonjs': 7.27.1(@babel/core@7.28.4)
+      '@babel/plugin-transform-nullish-coalescing-operator': 7.27.1(@babel/core@7.28.4)
+      '@babel/plugin-transform-optional-chaining': 7.27.1(@babel/core@7.28.4)
+      '@babel/plugin-transform-private-methods': 7.27.1(@babel/core@7.28.4)
+      '@babel/preset-flow': 7.27.1(@babel/core@7.28.4)
+      '@babel/preset-typescript': 7.27.1(@babel/core@7.28.4)
+      '@babel/register': 7.28.3(@babel/core@7.28.4)
+      flow-parser: 0.287.0
+      graceful-fs: 4.2.11
+      micromatch: 4.0.8
+      neo-async: 2.6.2
+      picocolors: 1.1.1
+      recast: 0.23.11
+      tmp: 0.2.5
+      write-file-atomic: 5.0.1
+    transitivePeerDependencies:
+      - supports-color
+
+  jsesc@3.1.0: {}
+
   json-buffer@3.0.1: {}
 
   json-schema-traverse@0.4.1: {}
 
   json-stable-stringify-without-jsonify@1.0.1: {}
 
+  json-stringify-pretty-compact@4.0.0: {}
+
   json5@1.0.2:
     dependencies:
       minimist: 1.2.8
@@ -6015,10 +8518,14 @@ snapshots:
 
   kareem@2.6.3: {}
 
+  kdbush@4.0.2: {}
+
   keyv@4.5.4:
     dependencies:
       json-buffer: 3.0.1
 
+  kind-of@6.0.3: {}
+
   language-subtag-registry@0.3.23: {}
 
   language-tags@1.0.9:
@@ -6036,6 +8543,11 @@ snapshots:
 
   load-tsconfig@0.2.5: {}
 
+  locate-path@3.0.0:
+    dependencies:
+      p-locate: 3.0.0
+      path-exists: 3.0.0
+
   locate-path@5.0.0:
     dependencies:
       p-locate: 4.1.0
@@ -6072,18 +8584,60 @@ snapshots:
 
   lru-cache@10.4.3: {}
 
+  lru-cache@11.2.2: {}
+
+  lru-cache@5.1.1:
+    dependencies:
+      yallist: 3.1.1
+
   lru-cache@6.0.0:
     dependencies:
       yallist: 4.0.0
 
+  lucide-react@0.545.0(react@19.1.1):
+    dependencies:
+      react: 19.1.1
+
   luxon@3.7.2: {}
 
   magic-string@0.30.19:
     dependencies:
       '@jridgewell/sourcemap-codec': 1.5.5
 
+  make-dir@2.1.0:
+    dependencies:
+      pify: 4.0.1
+      semver: 5.7.2
+
+  maplibre-gl@5.8.0:
+    dependencies:
+      '@mapbox/geojson-rewind': 0.5.2
+      '@mapbox/jsonlint-lines-primitives': 2.0.2
+      '@mapbox/point-geometry': 1.1.0
+      '@mapbox/tiny-sdf': 2.0.7
+      '@mapbox/unitbezier': 0.0.1
+      '@mapbox/vector-tile': 2.0.4
+      '@mapbox/whoots-js': 3.1.0
+      '@maplibre/maplibre-gl-style-spec': 24.2.0
+      '@maplibre/vt-pbf': 4.0.3
+      '@types/geojson': 7946.0.16
+      '@types/geojson-vt': 3.2.5
+      '@types/supercluster': 7.1.3
+      earcut: 3.0.2
+      geojson-vt: 4.0.2
+      gl-matrix: 3.4.4
+      kdbush: 4.0.2
+      murmurhash-js: 1.0.0
+      pbf: 4.0.1
+      potpack: 2.1.0
+      quickselect: 3.0.0
+      supercluster: 8.0.1
+      tinyqueue: 3.0.0
+
   math-intrinsics@1.1.0: {}
 
+  memoize-one@5.2.1: {}
+
   memory-pager@1.5.0: {}
 
   merge2@1.4.1: {}
@@ -6093,8 +8647,18 @@ snapshots:
       braces: 3.0.3
       picomatch: 2.3.1
 
+  mime-db@1.52.0: {}
+
+  mime-types@2.1.35:
+    dependencies:
+      mime-db: 1.52.0
+
   mini-svg-data-uri@1.4.4: {}
 
+  minimatch@10.0.3:
+    dependencies:
+      '@isaacs/brace-expansion': 5.0.0
+
   minimatch@3.1.2:
     dependencies:
       brace-expansion: 1.1.12
@@ -6182,6 +8746,8 @@ snapshots:
     optionalDependencies:
       msgpackr-extract: 3.0.3
 
+  murmurhash-js@1.0.0: {}
+
   mz@2.7.0:
     dependencies:
       any-promise: 1.3.0
@@ -6196,6 +8762,8 @@ snapshots:
 
   negotiator@1.0.0: {}
 
+  neo-async@2.6.2: {}
+
   neo4j-driver-bolt-connection@5.28.2:
     dependencies:
       buffer: 6.0.3
@@ -6210,13 +8778,13 @@ snapshots:
       neo4j-driver-core: 5.28.2
       rxjs: 7.8.2
 
-  next-auth@4.24.11(next@15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1))(nodemailer@6.9.13)(react-dom@19.1.1(react@19.1.1))(react@19.1.1):
+  next-auth@4.24.11(next@15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1))(nodemailer@6.9.13)(react-dom@19.1.1(react@19.1.1))(react@19.1.1):
     dependencies:
       '@babel/runtime': 7.28.4
       '@panva/hkdf': 1.2.1
       cookie: 0.7.2
       jose: 4.15.9
-      next: 15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+      next: 15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
       oauth: 0.9.15
       openid-client: 5.7.1
       preact: 10.27.2
@@ -6227,15 +8795,15 @@ snapshots:
     optionalDependencies:
       nodemailer: 6.9.13
 
-  next-intl@3.26.5(next@15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1))(react@19.1.1):
+  next-intl@3.26.5(next@15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1))(react@19.1.1):
     dependencies:
       '@formatjs/intl-localematcher': 0.5.10
       negotiator: 1.0.0
-      next: 15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+      next: 15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
       react: 19.1.1
       use-intl: 3.26.5(react@19.1.1)
 
-  next@15.3.2(react-dom@19.1.1(react@19.1.1))(react@19.1.1):
+  next@15.3.2(@babel/core@7.28.4)(react-dom@19.1.1(react@19.1.1))(react@19.1.1):
     dependencies:
       '@next/env': 15.3.2
       '@swc/counter': 0.1.3
@@ -6245,7 +8813,7 @@ snapshots:
       postcss: 8.4.31
       react: 19.1.1
       react-dom: 19.1.1(react@19.1.1)
-      styled-jsx: 5.1.6(react@19.1.1)
+      styled-jsx: 5.1.6(@babel/core@7.28.4)(react@19.1.1)
     optionalDependencies:
       '@next/swc-darwin-arm64': 15.3.2
       '@next/swc-darwin-x64': 15.3.2
@@ -6339,6 +8907,12 @@ snapshots:
 
   oidc-token-hash@5.1.1: {}
 
+  on-exit-leak-free@2.1.2: {}
+
+  openai@6.2.0(zod@4.1.11):
+    optionalDependencies:
+      zod: 4.1.11
+
   openid-client@5.7.1:
     dependencies:
       jose: 4.15.9
@@ -6375,6 +8949,10 @@ snapshots:
     dependencies:
       yocto-queue: 0.1.0
 
+  p-locate@3.0.0:
+    dependencies:
+      p-limit: 2.3.0
+
   p-locate@4.1.0:
     dependencies:
       p-limit: 2.3.0
@@ -6395,6 +8973,10 @@ snapshots:
 
   parse-srcset@1.0.2: {}
 
+  path-browserify@1.0.1: {}
+
+  path-exists@3.0.0: {}
+
   path-exists@4.0.0: {}
 
   path-key@3.1.1: {}
@@ -6406,8 +8988,17 @@ snapshots:
       lru-cache: 10.4.3
       minipass: 7.1.2
 
+  path-scurry@2.0.0:
+    dependencies:
+      lru-cache: 11.2.2
+      minipass: 7.1.2
+
   pathe@2.0.3: {}
 
+  pbf@4.0.1:
+    dependencies:
+      resolve-protobuf-schema: 2.1.0
+
   perfect-debounce@1.0.0: {}
 
   performance-now@2.1.0:
@@ -6421,8 +9012,34 @@ snapshots:
 
   pify@2.3.0: {}
 
+  pify@4.0.1: {}
+
+  pino-abstract-transport@2.0.0:
+    dependencies:
+      split2: 4.2.0
+
+  pino-std-serializers@7.0.0: {}
+
+  pino@10.0.0:
+    dependencies:
+      atomic-sleep: 1.0.0
+      on-exit-leak-free: 2.1.2
+      pino-abstract-transport: 2.0.0
+      pino-std-serializers: 7.0.0
+      process-warning: 5.0.0
+      quick-format-unescaped: 4.0.4
+      real-require: 0.2.0
+      safe-stable-stringify: 2.5.0
+      slow-redact: 0.3.1
+      sonic-boom: 4.2.0
+      thread-stream: 3.1.0
+
   pirates@4.0.7: {}
 
+  pkg-dir@3.0.0:
+    dependencies:
+      find-up: 3.0.0
+
   pkg-types@1.3.1:
     dependencies:
       confbox: 0.1.8
@@ -6496,6 +9113,8 @@ snapshots:
       picocolors: 1.1.1
       source-map-js: 1.2.1
 
+  potpack@2.1.0: {}
+
   preact-render-to-string@5.2.6(preact@10.27.2):
     dependencies:
       preact: 10.27.2
@@ -6518,15 +9137,16 @@ snapshots:
     transitivePeerDependencies:
       - magicast
 
-  prisma@6.16.2(typescript@5.9.2):
+  prisma@6.16.3(typescript@5.9.3):
     dependencies:
-      '@prisma/config': 6.16.2
-      '@prisma/engines': 6.16.2
+      '@prisma/config': 6.16.3
+      '@prisma/engines': 6.16.3
     optionalDependencies:
-      typescript: 5.9.2
+      typescript: 5.9.3
     transitivePeerDependencies:
       - magicast
-    optional: true
+
+  process-warning@5.0.0: {}
 
   prop-types@15.8.1:
     dependencies:
@@ -6534,10 +9154,16 @@ snapshots:
       object-assign: 4.1.1
       react-is: 16.13.1
 
+  protocol-buffers-schema@3.6.0: {}
+
+  proxy-from-env@1.1.0: {}
+
   punycode@2.3.1: {}
 
   pure-rand@6.1.0: {}
 
+  qr.js@0.0.0: {}
+
   qrcode@1.5.4:
     dependencies:
       dijkstrajs: 1.0.3
@@ -6546,6 +9172,12 @@ snapshots:
 
   queue-microtask@1.2.3: {}
 
+  quick-format-unescaped@4.0.4: {}
+
+  quickselect@3.0.0: {}
+
+  raf-schd@4.0.3: {}
+
   raf@3.4.1:
     dependencies:
       performance-now: 2.1.0
@@ -6556,6 +9188,20 @@ snapshots:
       defu: 6.1.4
       destr: 2.0.5
 
+  react-beautiful-dnd@13.1.1(react-dom@19.1.1(react@19.1.1))(react@19.1.1):
+    dependencies:
+      '@babel/runtime': 7.28.4
+      css-box-model: 1.2.1
+      memoize-one: 5.2.1
+      raf-schd: 4.0.3
+      react: 19.1.1
+      react-dom: 19.1.1(react@19.1.1)
+      react-redux: 7.2.9(react-dom@19.1.1(react@19.1.1))(react@19.1.1)
+      redux: 4.2.1
+      use-memo-one: 1.1.3(react@19.1.1)
+    transitivePeerDependencies:
+      - react-native
+
   react-dom@19.1.1(react@19.1.1):
     dependencies:
       react: 19.1.1
@@ -6574,8 +9220,28 @@ snapshots:
 
   react-is@16.13.1: {}
 
+  react-is@17.0.2: {}
+
   react-is@19.1.1: {}
 
+  react-qr-code@2.0.18(react@19.1.1):
+    dependencies:
+      prop-types: 15.8.1
+      qr.js: 0.0.0
+      react: 19.1.1
+
+  react-redux@7.2.9(react-dom@19.1.1(react@19.1.1))(react@19.1.1):
+    dependencies:
+      '@babel/runtime': 7.28.4
+      '@types/react-redux': 7.1.34
+      hoist-non-react-statics: 3.3.2
+      loose-envify: 1.4.0
+      prop-types: 15.8.1
+      react: 19.1.1
+      react-is: 17.0.2
+    optionalDependencies:
+      react-dom: 19.1.1(react@19.1.1)
+
   react-redux@9.2.0(@types/react@19.1.13)(react@19.1.1)(redux@5.0.1):
     dependencies:
       '@types/use-sync-external-store': 0.0.6
@@ -6597,6 +9263,16 @@ snapshots:
 
   readdirp@4.1.2: {}
 
+  real-require@0.2.0: {}
+
+  recast@0.23.11:
+    dependencies:
+      ast-types: 0.16.1
+      esprima: 4.0.1
+      source-map: 0.6.1
+      tiny-invariant: 1.3.3
+      tslib: 2.8.1
+
   recharts@3.2.1(@types/react@19.1.13)(react-dom@19.1.1(react@19.1.1))(react-is@19.1.1)(react@19.1.1)(redux@5.0.1):
     dependencies:
       '@reduxjs/toolkit': 2.9.0(react-redux@9.2.0(@types/react@19.1.13)(react@19.1.1)(redux@5.0.1))(react@19.1.1)
@@ -6635,6 +9311,10 @@ snapshots:
     dependencies:
       redux: 5.0.1
 
+  redux@4.2.1:
+    dependencies:
+      '@babel/runtime': 7.28.4
+
   redux@5.0.1: {}
 
   reflect.getprototypeof@1.0.10:
@@ -6672,6 +9352,10 @@ snapshots:
 
   resolve-pkg-maps@1.0.0: {}
 
+  resolve-protobuf-schema@2.1.0:
+    dependencies:
+      protocol-buffers-schema: 3.6.0
+
   resolve@1.22.10:
     dependencies:
       is-core-module: 2.16.1
@@ -6725,6 +9409,8 @@ snapshots:
     dependencies:
       queue-microtask: 1.2.3
 
+  rw@1.3.3: {}
+
   rxjs@7.8.2:
     dependencies:
       tslib: 2.8.1
@@ -6750,6 +9436,8 @@ snapshots:
       es-errors: 1.3.0
       is-regex: 1.2.1
 
+  safe-stable-stringify@2.5.0: {}
+
   sanitize-html@2.17.0:
     dependencies:
       deepmerge: 4.3.1
@@ -6761,6 +9449,8 @@ snapshots:
 
   scheduler@0.26.0: {}
 
+  semver@5.7.2: {}
+
   semver@6.3.1: {}
 
   semver@7.7.2: {}
@@ -6789,6 +9479,10 @@ snapshots:
       es-errors: 1.3.0
       es-object-atoms: 1.1.1
 
+  shallow-clone@3.0.1:
+    dependencies:
+      kind-of: 6.0.3
+
   sharp@0.34.4:
     dependencies:
       '@img/colour': 1.0.0
@@ -6857,8 +9551,21 @@ snapshots:
 
   signal-exit@4.1.0: {}
 
+  slow-redact@0.3.1: {}
+
+  sonic-boom@4.2.0:
+    dependencies:
+      atomic-sleep: 1.0.0
+
   source-map-js@1.2.1: {}
 
+  source-map-support@0.5.21:
+    dependencies:
+      buffer-from: 1.1.2
+      source-map: 0.6.1
+
+  source-map@0.6.1: {}
+
   source-map@0.8.0-beta.0:
     dependencies:
       whatwg-url: 7.1.0
@@ -6867,6 +9574,12 @@ snapshots:
     dependencies:
       memory-pager: 1.5.0
 
+  split2@4.2.0: {}
+
+  ssf@0.11.2:
+    dependencies:
+      frac: 1.1.2
+
   stable-hash@0.0.5: {}
 
   stackblur-canvas@2.7.0:
@@ -6959,10 +9672,14 @@ snapshots:
 
   strip-json-comments@3.1.1: {}
 
-  styled-jsx@5.1.6(react@19.1.1):
+  strnum@2.1.1: {}
+
+  styled-jsx@5.1.6(@babel/core@7.28.4)(react@19.1.1):
     dependencies:
       client-only: 0.0.1
       react: 19.1.1
+    optionalDependencies:
+      '@babel/core': 7.28.4
 
   sucrase@3.35.0:
     dependencies:
@@ -6974,6 +9691,10 @@ snapshots:
       pirates: 4.0.7
       ts-interface-checker: 0.1.13
 
+  supercluster@8.0.1:
+    dependencies:
+      kdbush: 4.0.2
+
   supports-color@7.2.0:
     dependencies:
       has-flag: 4.0.0
@@ -7032,6 +9753,10 @@ snapshots:
 
   thirty-two@1.0.2: {}
 
+  thread-stream@3.1.0:
+    dependencies:
+      real-require: 0.2.0
+
   tiny-invariant@1.3.3: {}
 
   tinyexec@0.3.2: {}
@@ -7043,6 +9768,10 @@ snapshots:
       fdir: 6.5.0(picomatch@4.0.3)
       picomatch: 4.0.3
 
+  tinyqueue@3.0.0: {}
+
+  tmp@0.2.5: {}
+
   to-regex-range@5.0.1:
     dependencies:
       is-number: 7.0.0
@@ -7063,6 +9792,11 @@ snapshots:
 
   ts-interface-checker@0.1.13: {}
 
+  ts-morph@27.0.0:
+    dependencies:
+      '@ts-morph/common': 0.28.0
+      code-block-writer: 13.0.3
+
   tsconfig-paths@3.15.0:
     dependencies:
       '@types/json5': 0.0.29
@@ -7152,8 +9886,12 @@ snapshots:
 
   typescript@5.9.2: {}
 
+  typescript@5.9.3: {}
+
   ufo@1.6.1: {}
 
+  ulid@3.0.1: {}
+
   unbox-primitive@1.1.0:
     dependencies:
       call-bound: 1.0.4
@@ -7161,6 +9899,8 @@ snapshots:
       has-symbols: 1.1.0
       which-boxed-primitive: 1.1.1
 
+  uncrypto@0.1.3: {}
+
   undici-types@6.21.0: {}
 
   unrs-resolver@1.11.1:
@@ -7203,6 +9943,10 @@ snapshots:
       intl-messageformat: 10.7.16
       react: 19.1.1
 
+  use-memo-one@1.1.3(react@19.1.1):
+    dependencies:
+      react: 19.1.1
+
   use-sync-external-store@1.5.0(react@19.1.1):
     dependencies:
       react: 19.1.1
@@ -7215,6 +9959,8 @@ snapshots:
 
   uuid@11.1.0: {}
 
+  uuid@13.0.0: {}
+
   uuid@8.3.2: {}
 
   victory-vendor@37.3.6:
@@ -7296,8 +10042,12 @@ snapshots:
     dependencies:
       isexe: 2.0.0
 
+  wmf@1.0.2: {}
+
   word-wrap@1.2.5: {}
 
+  word@0.3.0: {}
+
   wrap-ansi@6.2.0:
     dependencies:
       ansi-styles: 4.3.0
@@ -7316,8 +10066,25 @@ snapshots:
       string-width: 5.1.2
       strip-ansi: 7.1.2
 
+  write-file-atomic@5.0.1:
+    dependencies:
+      imurmurhash: 0.1.4
+      signal-exit: 4.1.0
+
+  xlsx@0.18.5:
+    dependencies:
+      adler-32: 1.3.1
+      cfb: 1.2.2
+      codepage: 1.15.0
+      crc-32: 1.2.2
+      ssf: 0.11.2
+      wmf: 1.0.2
+      word: 0.3.0
+
   y18n@4.0.3: {}
 
+  yallist@3.1.1: {}
+
   yallist@4.0.0: {}
 
   yaml@2.8.1: {}
diff --git a/prisma/core/schema.prisma b/prisma/core/schema.prisma
index 3a369be4..2a5b96f4 100644
--- a/prisma/core/schema.prisma
+++ b/prisma/core/schema.prisma
@@ -2,12 +2,12 @@
 
 generator client {
   provider = "prisma-client-js"
-  output   = "../../apps/web/src/db/core"
+  output   = "../../packages/db-core/src/generated"
 }
 
 datasource db {
-  provider = "mongodb"
-  url      = env("CORE_MONGODB_URI")
+  provider = "postgresql"
+  url      = env("CORE_DATABASE_URL")
 }
 
 //
@@ -66,7 +66,6 @@ enum ReviewStatus {
   REFUTED
   MIXED
   STALE
-  ARCHIVED
 }
 
 enum Interest {
@@ -81,19 +80,19 @@ enum Triage {
   escalate
 }
 
-// --- Stream & Source Enums (ADD) ---
+// --- Stream & Source ---
 enum SourceKind {
-  USER      // direkte User-Einsendung
-  NEWS      // News/Crawler
-  SOCIAL    // Social API
-  API       // Partner-API
-  SYSTEM    // interne Jobs
+  USER
+  NEWS
+  SOCIAL
+  API
+  SYSTEM
 }
 
 enum StreamKind {
-  EVENT     // fachliche Events (ContributionCreated, VoteCast, ...)
-  METRIC    // Kennzahlen, Z√§hler
-  LOG       // Prozess-/Workflow-Logs
+  EVENT
+  METRIC
+  LOG
 }
 
 enum StreamStatus {
@@ -105,13 +104,13 @@ enum StreamStatus {
 //
 // ---------- CONTENT / TOPIC / TAG ----------
 model Topic {
-  id          String     @id @default(auto()) @map("_id") @db.ObjectId
-  slug        String     @unique
+  id          String   @id @default(cuid())
+  slug        String   @unique
   title       String
   description String?
-  locale      Locale     @default(de)
-  createdAt   DateTime   @default(now())
-  updatedAt   DateTime   @updatedAt
+  locale      Locale   @default(de)
+  createdAt   DateTime @default(now())
+  updatedAt   DateTime @updatedAt
 
   items ContentItem[]
   tags  TopicTag[]
@@ -121,20 +120,20 @@ model Topic {
 }
 
 model Tag {
-  id     String  @id @default(cuid()) @map("_id")
-  slug   String  @unique
+  id     String     @id @default(cuid())
+  slug   String     @unique
   label  String
   topics TopicTag[]
   items  ItemTag[]
 }
 
 model TopicTag {
-  id      String @id @default(cuid()) @map("_id") // Mongo: keine Composite-IDs
-  topicId String @db.ObjectId
+  id      String @id @default(cuid())
+  topicId String
   tagId   String
 
-  topic Topic @relation(fields: [topicId], references: [id], onDelete: NoAction, onUpdate: NoAction)
-  tag   Tag   @relation(fields: [tagId],   references: [id], onDelete: NoAction, onUpdate: NoAction)
+  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)
+  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
 
   @@unique([topicId, tagId])
   @@index([topicId])
@@ -142,12 +141,12 @@ model TopicTag {
 }
 
 model ItemTag {
-  id     String @id @default(cuid()) @map("_id") // Mongo: keine Composite-IDs
+  id     String @id @default(cuid())
   itemId String
   tagId  String
 
-  item ContentItem @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
-  tag  Tag         @relation(fields: [tagId],  references: [id], onDelete: NoAction, onUpdate: NoAction)
+  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)
+  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
 
   @@unique([itemId, tagId])
   @@index([itemId])
@@ -157,18 +156,18 @@ model ItemTag {
 //
 // ---------- REGION + CLOSURE ----------
 model Region {
-  id        String   @id @default(cuid()) @map("_id")
+  id        String   @id @default(cuid())
   code      String   @unique
   name      String
   level     Int
   parentId  String?
-  parent    Region?  @relation("RegionHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  parent    Region?  @relation("RegionHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
   children  Region[] @relation("RegionHierarchy")
   meta      Json?
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
 
-  // Relations zu ContentItem
+  // Relationen zu ContentItem
   itemsManual    ContentItem[] @relation("ItemRegionManual")
   itemsEffective ContentItem[] @relation("ItemRegionEffective")
 
@@ -180,13 +179,13 @@ model Region {
 }
 
 model RegionClosure {
-  id            String  @id @default(cuid()) @map("_id")
-  ancestorId    String
-  descendantId  String
-  depth         Int
+  id           String @id @default(cuid())
+  ancestorId   String
+  descendantId String
+  depth        Int
 
-  ancestor   Region @relation("RegionAncestor",   fields: [ancestorId],   references: [id], onDelete: NoAction, onUpdate: NoAction)
-  descendant Region @relation("RegionDescendant", fields: [descendantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  ancestor   Region @relation("RegionAncestor", fields: [ancestorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
+  descendant Region @relation("RegionDescendant", fields: [descendantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
   @@unique([ancestorId, descendantId])
   @@index([ancestorId, depth])
@@ -196,19 +195,19 @@ model RegionClosure {
 //
 // ---------- CONTENT ITEMS ----------
 model ContentItem {
-  id      String      @id @default(cuid()) @map("_id")
-  kind    ContentKind
+  id   String      @id @default(cuid())
+  kind ContentKind
 
-  topicId String   @db.ObjectId
-  topic   Topic    @relation(fields: [topicId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  topicId String
+  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)
 
-  locale   Locale          @default(de)
-  title    String?
-  text     String
-  richText String?
-  sortOrder Int            @default(0) @map("order") // statt "order"
+  locale    Locale  @default(de)
+  title     String?
+  text      String
+  richText  String?
+  sortOrder Int     @default(0) @map("order")
 
-  units    ExtractedUnit[]
+  units ExtractedUnit[]
 
   status     PublishStatus @default(draft)
   authorName String?
@@ -220,10 +219,10 @@ model ContentItem {
 
   regionMode        RegionMode @default(AUTO)
   regionManualId    String?
-  regionManual      Region?    @relation("ItemRegionManual",    fields: [regionManualId],    references: [id], onDelete: NoAction, onUpdate: NoAction)
+  regionManual      Region?    @relation("ItemRegionManual", fields: [regionManualId], references: [id], onDelete: SetNull, onUpdate: Cascade)
   regionAuto        Json?
   regionEffectiveId String?
-  regionEffective   Region?    @relation("ItemRegionEffective", fields: [regionEffectiveId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  regionEffective   Region?    @relation("ItemRegionEffective", fields: [regionEffectiveId], references: [id], onDelete: SetNull, onUpdate: Cascade)
 
   validation Json?
   meta       Json?
@@ -239,9 +238,9 @@ model ContentItem {
 }
 
 model AnswerOption {
-  id        String      @id @default(cuid()) @map("_id")
+  id        String      @id @default(cuid())
   itemId    String
-  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   label     String
   value     String
   sortOrder Int         @default(0) @map("order")
@@ -250,16 +249,15 @@ model AnswerOption {
 
   @@unique([itemId, sortOrder])
   @@unique([itemId, value])
-  // (kein weiterer @@index mehr auf order/sortOrder, sonst doppelt)
 }
 
 //
 // ---------- FACT-CHECK DOMAIN ----------
 model FactcheckJob {
-  id             String   @id @default(cuid()) @map("_id")
+  id             String   @id @default(cuid())
   jobId          String   @unique
   contributionId String
-  status         String   // PENDING | PROCESSING | COMPLETED | FAILED
+  status         String // PENDING | PROCESSING | COMPLETED | FAILED
   tokensUsed     Int      @default(0)
   durationMs     Int      @default(0)
   createdAt      DateTime @default(now())
@@ -272,7 +270,7 @@ model FactcheckJob {
 }
 
 model FactcheckClaim {
-  id              String   @id @default(cuid()) @map("_id")
+  id              String   @id @default(cuid())
   jobId           String
   text            String
   language        String?
@@ -286,7 +284,7 @@ model FactcheckClaim {
   timeframe    String?
   status       ReviewStatus @default(OPEN)
 
-  job             FactcheckJob     @relation(fields: [jobId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  job             FactcheckJob     @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   providerRuns    ProviderRun[]
   evidences       Evidence[]
   consensus       ConsensusRun?
@@ -302,7 +300,7 @@ model FactcheckClaim {
 }
 
 model ProviderRun {
-  id         String   @id @default(cuid()) @map("_id")
+  id         String   @id @default(cuid())
   claimId    String
   provider   String
   verdict    String
@@ -312,14 +310,14 @@ model ProviderRun {
   raw        Json
   createdAt  DateTime @default(now())
 
-  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
   @@index([claimId, provider])
   @@index([createdAt])
 }
 
 model ConsensusRun {
-  id             String   @id @default(cuid()) @map("_id")
+  id             String   @id @default(cuid())
   claimId        String   @unique
   method         String
   verdict        String
@@ -329,11 +327,11 @@ model ConsensusRun {
   providers      Json
   createdAt      DateTime @default(now())
 
-  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 }
 
 model Evidence {
-  id           String    @id @default(cuid()) @map("_id")
+  id           String    @id @default(cuid())
   claimId      String
   url          String
   domain       String
@@ -342,38 +340,38 @@ model Evidence {
   firstSeenAt  DateTime? @default(now())
   trustScore   Int?
 
-  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
   @@index([claimId, domain])
 }
 
 model VerdictVersion {
-  id         String   @id @default(cuid()) @map("_id")
+  id         String   @id @default(cuid())
   claimId    String
   verdict    String
   confidence Float
   asOf       DateTime @default(now())
   supersedes String?
 
-  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
   @@index([claimId, asOf])
 }
 
 model FactcheckResult {
-  id        String   @id @default(cuid()) @map("_id")
+  id        String   @id @default(cuid())
   jobId     String
   verdict   String
   rawOutput Json
   createdAt DateTime @default(now())
 
-  job FactcheckJob @relation(fields: [jobId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  job FactcheckJob @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
   @@index([jobId, createdAt])
 }
 
 model AuditLog {
-  id         String   @id @default(cuid()) @map("_id")
+  id         String   @id @default(cuid())
   entityType String
   entityId   String
   action     String
@@ -387,13 +385,13 @@ model AuditLog {
 //
 // ---------- ERWEITERUNG: Extracted Units & Findings ----------
 model ExtractedUnit {
-  id     String       @id @default(cuid()) @map("_id")
+  id String @id @default(cuid())
 
-  // V2-Relation (optional f√ºr V1-Kompatibilit√§t)
+  // optionale Verkn√ºpfung zu ContentItem (V2)
   itemId String?
-  item   ContentItem? @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  item   ContentItem? @relation(fields: [itemId], references: [id], onDelete: SetNull, onUpdate: Cascade)
 
-  // V1-Feld: externer/Mongo Statement-Ref (optional)
+  // externe Statement-Referenz (optional)
   statementId String?
 
   kind       UnitKind
@@ -407,9 +405,9 @@ model ExtractedUnit {
   scope        String?
   timeframe    String?
 
-  // Verkn√ºpfung auf Prisma-Claim
+  // Verkn√ºpfung auf Claim (optional)
   claimId String?
-  claim   FactcheckClaim? @relation(fields: [claimId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  claim   FactcheckClaim? @relation(fields: [claimId], references: [id], onDelete: SetNull, onUpdate: Cascade)
 
   interest   Interest @default(undecided)
   triage     Triage   @default(none)
@@ -425,14 +423,14 @@ model ExtractedUnit {
 }
 
 model Finding {
-  id      String         @id @default(cuid()) @map("_id")
+  id String @id @default(cuid())
 
-  // 1:1 ‚Äì Finding h√§lt den FK auf Claim (stabil & eindeutig)
+  // 1:1 ‚Äì Finding h√§lt den FK auf Claim
   claimId String         @unique
-  claim   FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: NoAction, onUpdate: NoAction)
+  claim   FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
   summary               String
-  outcome               String   // LIKELY_TRUE | LIKELY_FALSE | MIXED | UNDETERMINED
+  outcome               String // LIKELY_TRUE | LIKELY_FALSE | MIXED | UNDETERMINED
   rationale             String
   metrics               Json?
   comparedJurisdictions Json?
@@ -440,17 +438,3 @@ model Finding {
   createdAt             DateTime @default(now())
   updatedAt             DateTime @updatedAt
 }
-
-//
-// ---------- ADMIN SETTINGS (Singleton) ----------
-model AdminSettings {
-  id         String   @id @default("global") @map("_id") // feste ID
-  onboarding Json?
-  csp        Json?
-  updatedAt  DateTime @updatedAt
-}
-
-//
-
-
-
diff --git a/prisma/web/schema.prisma b/prisma/web/schema.prisma
index 19b9e3b7..e049af92 100644
--- a/prisma/web/schema.prisma
+++ b/prisma/web/schema.prisma
@@ -1,6 +1,8 @@
 // prisma/web/schema.prisma
+
 generator client {
   provider = "prisma-client-js"
+  output   = "../../packages/db-web/src/generated"
 }
 
 datasource db {
@@ -8,16 +10,17 @@ datasource db {
   url      = env("WEB_DATABASE_URL")
 }
 
+//
+// ---------- ENUMS ----------
 enum ContentKind {
-  POST
-  POLL
-  QUIZ
-  INFO
+  SWIPE
+  EVENT
+  SUNDAY_POLL
 }
 
 enum PublishStatus {
   draft
-  scheduled
+  review
   published
   archived
 }
@@ -27,57 +30,142 @@ enum RegionMode {
   MANUAL
 }
 
-model Topic {
-  id        String   @id @default(cuid())
-  slug      String   @unique
-  title     String
-  items     ContentItem[]
-  createdAt DateTime @default(now())
-  updatedAt DateTime @updatedAt
+enum Locale {
+  de
+  en
+  fr
+  it
+  es
+  pl
+  uk
+  ru
+  tr
+  hi
+  zh
+  ar
 }
 
+//
+// ---------- REGION ----------
 model Region {
   id    String @id @default(cuid())
   code  String @unique
   name  String
   level Int
+
+  // Back-Relations zu ContentItem (benannte Relationen)
+  manualItems    ContentItem[] @relation("ContentItemRegionManual")
+  effectiveItems ContentItem[] @relation("ContentItemRegionEffective")
+
+  @@index([code])
+}
+
+//
+// ---------- CONTENT / TOPIC / TAG ----------
+model Topic {
+  id          String   @id @default(cuid())
+  slug        String   @unique
+  title       String
+  description String?
+  locale      Locale   @default(de)
+  createdAt   DateTime @default(now())
+  updatedAt   DateTime @updatedAt
+
+  items ContentItem[]
+  tags  TopicTag[]
+
+  @@index([locale])
+  @@index([createdAt])
+}
+
+model Tag {
+  id     String   @id @default(cuid())
+  slug   String   @unique
+  label  String
+  topics TopicTag[]
+  items  ItemTag[]
+}
+
+model TopicTag {
+  id      String @id @default(cuid())
+  topicId String
+  tagId   String
+
+  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)
+  tag   Tag   @relation(fields: [tagId],   references: [id], onDelete: Restrict, onUpdate: Cascade)
+
+  @@unique([topicId, tagId])
+  @@index([topicId])
+  @@index([tagId])
+}
+
+model ItemTag {
+  id     String @id @default(cuid())
+  itemId String
+  tagId  String
+
+  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)
+  tag  Tag         @relation(fields: [tagId],  references: [id], onDelete: Restrict, onUpdate: Cascade)
+
+  @@unique([itemId, tagId])
+  @@index([itemId])
+  @@index([tagId])
 }
 
 model ContentItem {
-  id             String        @id @default(cuid())
-  kind           ContentKind
-  text           String
-  title          String?
-  richText       Json?
-  authorName     String?
-  locale         String        @default("de")
-  status         PublishStatus @default(draft)
-  publishAt      DateTime?
-  expireAt       DateTime?
-
-  regionMode     RegionMode    @default(AUTO)
-  regionManualId String?
-  regionManual   Region?       @relation(fields: [regionManualId], references: [id])
-  regionAuto     Json?
-
-  topicId        String
-  topic          Topic         @relation(fields: [topicId], references: [id])
-
-  answerOptions  AnswerOption[]
-  regionEffective Json?
-
-  createdAt DateTime @default(now())
-  updatedAt DateTime @updatedAt
-
-  @@index([locale, status, kind])
+  id   String      @id @default(cuid())
+  kind ContentKind
+
+  topicId String
+  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)
+
+  locale    Locale  @default(de)
+  title     String?
+  text      String
+  richText  String?
+  sortOrder Int     @default(0) @map("order") // statt "order"
+
+  status     PublishStatus @default(draft)
+  authorName String?
+  createdAt  DateTime      @default(now())
+  updatedAt  DateTime      @updatedAt
+
+  publishAt DateTime?
+  expireAt  DateTime?
+
+  regionMode        RegionMode @default(AUTO)
+  regionManualId    String?
+  regionEffectiveId String?
+  regionAuto        Json?
+
+  // --- benannte Relationen zu Region ---
+  regionManual    Region? @relation("ContentItemRegionManual",    fields: [regionManualId],    references: [id], onDelete: SetNull, onUpdate: Cascade)
+  regionEffective Region? @relation("ContentItemRegionEffective", fields: [regionEffectiveId], references: [id], onDelete: SetNull, onUpdate: Cascade)
+
+  validation Json?
+  meta       Json?
+
+  answerOptions AnswerOption[]
+  tags          ItemTag[]
+
+  @@index([kind, status, locale])
+  @@index([publishAt])
+  @@index([topicId])
+  @@index([createdAt])
+  @@index([regionManualId])
+  @@index([regionEffectiveId])
 }
 
 model AnswerOption {
-  id            String      @id @default(cuid())
-  label         String
-  value         String
-  exclusive     Boolean     @default(false)
-  order         Int         @default(0)
-  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
-  contentItemId String
+  id        String      @id @default(cuid())
+  itemId    String
+  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
+  label     String
+  value     String
+  sortOrder Int         @default(0) @map("order")
+  exclusive Boolean     @default(false)
+  meta      Json?
+
+  @@unique([itemId, sortOrder])
+  @@unique([itemId, value])
 }
diff --git a/scripts/oldscripts/e150_apply_batch.sh b/scripts/oldscripts/e150_apply_batch.sh
index c31902e1..02555dda 100755
--- a/scripts/oldscripts/e150_apply_batch.sh
+++ b/scripts/oldscripts/e150_apply_batch.sh
@@ -16,7 +16,7 @@ TS
 # ---------- API: REPORTS ----------
 CONTENT='
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -38,7 +38,7 @@ write "src/app/api/reports/route.ts" "$CONTENT"
 
 CONTENT='
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET(_req: NextRequest, { params }: { params: { id: string } }) {
   const db = await getDb();
@@ -141,7 +141,7 @@ write "src/app/reports/[id]/page.tsx" "$CONTENT"
 # ---------- API: STREAMS ----------
 CONTENT='
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -171,7 +171,7 @@ write "src/app/api/admin/streams/route.ts" "$CONTENT"
 
 CONTENT='
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export const runtime = "edge";
 
@@ -358,7 +358,7 @@ write "src/app/contributions/page.tsx" "$CONTENT"
 
 CONTENT='
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -380,7 +380,7 @@ write "src/app/api/contributions/analytics/summary/route.ts" "$CONTENT"
 # ---------- Fact-Check Queue (enqueue + status + worker) ----------
 CONTENT='
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function POST(req: NextRequest) {
   const db = await getDb();
@@ -395,7 +395,7 @@ write "src/app/api/factcheck/enqueue/route.ts" "$CONTENT"
 
 CONTENT='
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET(req: NextRequest) {
   const db = await getDb();
@@ -456,7 +456,7 @@ write "worker/factcheck/worker.ts" "$CONTENT"
 
 # ---------- Graph: Sync to Arango ----------
 CONTENT='
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 import { aql } from "@/graph/arangoRepo";
 
 /** Sync statements & reports to Arango (nodes + simple edges). */
@@ -550,7 +550,7 @@ write "src/app/admin/page.tsx" "$CONTENT"
 
 CONTENT='
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -563,7 +563,7 @@ write "src/app/api/admin/errors/last24/route.ts" "$CONTENT"
 
 CONTENT='
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -579,7 +579,7 @@ write "src/app/api/admin/analytics/summary/route.ts" "$CONTENT"
 # ---------- Admin: Orgs CRUD (minimal) ----------
 CONTENT='
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 import { can } from "@/config/accessControl";
 
 function roleFrom(req: NextRequest) {
@@ -610,7 +610,7 @@ write "src/app/api/admin/orgs/route.ts" "$CONTENT"
 # ---------- Profile: Location Save (f√ºr Onboarding-Seite) ----------
 CONTENT='
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function POST(req: NextRequest) {
   const db = await getDb();
diff --git a/scripts/oldscripts/e150_apply_batch_v2.sh b/scripts/oldscripts/e150_apply_batch_v2.sh
index 4f09fab9..e127d28c 100644
--- a/scripts/oldscripts/e150_apply_batch_v2.sh
+++ b/scripts/oldscripts/e150_apply_batch_v2.sh
@@ -26,13 +26,13 @@ write() {
 # ---------- Helpers ----------
 read -r -d '' R_GET_DB <<'TS'
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 TS
 
 # ---------- /api/admin/analytics/summary ----------
 read -r -d '' CONTENT <<'TS'
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -50,7 +50,7 @@ write "$SRC_BASE/app/api/admin/analytics/summary/route.ts" "$CONTENT"
 # ---------- /api/admin/errors/last24 ----------
 read -r -d '' CONTENT <<'TS'
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -68,7 +68,7 @@ write "$SRC_BASE/app/api/admin/errors/last24/route.ts" "$CONTENT"
 # ---------- /api/admin/users/detail (list + single via ?id=) ----------
 read -r -d '' CONTENT <<'TS'
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET(req: NextRequest) {
   const db = await getDb();
@@ -119,7 +119,7 @@ write "$SRC_BASE/app/api/health/system-matrix/route.ts" "$CONTENT"
 # ---------- Contributions: list/create ----------
 read -r -d '' CONTENT <<'TS'
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -142,7 +142,7 @@ write "$SRC_BASE/app/api/contributions/route.ts" "$CONTENT"
 # ---------- Contributions Analytics ----------
 read -r -d '' CONTENT <<'TS'
 import { NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -164,7 +164,7 @@ write "$SRC_BASE/app/api/contributions/analytics/summary/route.ts" "$CONTENT"
 # ---------- Reports (list/create + [id]) ----------
 read -r -d '' CONTENT <<'TS'
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -186,7 +186,7 @@ write "$SRC_BASE/app/api/reports/route.ts" "$CONTENT"
 
 read -r -d '' CONTENT <<'TS'
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET(_req: NextRequest, { params }: { params: { id: string } }) {
   const db = await getDb();
@@ -210,7 +210,7 @@ write "$SRC_BASE/app/api/reports/[id]/route.ts" "$CONTENT"
 # ---------- Streams (public + admin) ----------
 read -r -d '' CONTENT <<'TS'
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
@@ -222,7 +222,7 @@ write "$SRC_BASE/app/api/public/streams/route.ts" "$CONTENT"
 
 read -r -d '' CONTENT <<'TS'
 import { NextRequest, NextResponse } from "next/server";
-import { getDb } from "@/utils/mongoClient";
+import { getDb } from "@core/db/triMongo";
 
 export async function GET() {
   const db = await getDb();
diff --git a/tsconfig.base.json b/tsconfig.base.json
index 501356ba..5667b801 100644
--- a/tsconfig.base.json
+++ b/tsconfig.base.json
@@ -14,7 +14,10 @@
     "isolatedModules": true,
     "baseUrl": ".",
     "paths": {
+      "@db-web": ["packages/db-web/src/client.ts"],
+      "@db-core": ["packages/db-core/src/client.ts"],
       "core/*": ["core/*"],
+      "core/mongoose":["core/db/mongoose.ts"],
       "features/*": ["features/*"],
       "@core/*": ["core/*"],
       "@features/*": ["features/*"],
diff --git a/vpm25-structure.txt b/vpm25-structure.txt
index 3623d271..b88c4758 100644
--- a/vpm25-structure.txt
+++ b/vpm25-structure.txt
@@ -12,8 +12,6 @@
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ jest.config.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ landing
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .env
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .env.example
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .eslintrc.cjs
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .gitignore
@@ -27,14 +25,10 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ postcss.config.js
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ prisma
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dev.db
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ migrations
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 20250918193847_init
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ migration.sql
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ migration_lock.toml
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ schema.prisma
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ migrations
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250918193847_init
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ migration.sql
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ migration_lock.toml
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ public
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ media
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ intro.jpg
@@ -129,13 +123,12 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ locale.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ typedHref.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tailwind.config.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ tsconfig.json
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.json
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ tsconfig.tsbuildinfo
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mobile
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ web
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .env.atlas
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .env.example
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .env.local
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .eslintrc.cjs
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .gitignore
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Dockerfile
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ README.md
@@ -145,7 +138,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ postcss.config.mjs
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ public
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dummy
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dummy1.jpg
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dummy10.jpg
@@ -168,7 +160,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ WertderStimme_DE.mp4
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ window.svg
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ scripts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ check_incomplete_files.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core.ensureIndexes.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ data
@@ -190,6 +181,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mongo.ensure-geo-index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pii.ensureIndexes.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ping.all.dbs.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ prisma-generate-all.mjs
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ r2.smoke.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ seed.map.points.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tokens.ensureIndexes.ts
@@ -229,6 +221,8 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ csrf
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ editor
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ errors
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ events
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ export
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ factcheck
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ finding
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gdpr
@@ -249,7 +243,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ uploads
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ user-demographics
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ users
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vote
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ votes
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ you
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ auth
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 2fa-setup
@@ -270,7 +264,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ page.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dashboard
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ StreamDashboard.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api
@@ -316,6 +309,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ login
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ page.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ map
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ MapePageClient.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ page.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ messages
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ar.json
@@ -385,7 +379,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ verify
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ page.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ FAQTabs.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Headline.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ IntroSection.tsx
@@ -415,6 +408,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ RegionConsent.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ theme
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ ThemeProvider.tsx
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components.zip
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ config
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ accessControl.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ apiRoutes.ts
@@ -422,8 +416,10 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ constants
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ languages.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ roles.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ factcheck
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ triage.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ client.d.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ client.js
@@ -437,11 +433,11 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ libquery_engine-darwin-arm64.dylib.node
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ runtime
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ schema.prisma
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm-edge-light-loader.mjs
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm-worker-loader.mjs
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm.d.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ wasm.js
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mongoose.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ web
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ client.d.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ client.js
@@ -480,13 +476,14 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ useRouteGuardClient.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ useTranslate.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ lib
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ access
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ acl.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ permissions.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ audit.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ auth
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ getServerUser.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ getServerUser.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ci.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ contribution
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ analyze
@@ -502,8 +499,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ modelOn.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mongo.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mongoose.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pii.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ votes.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db.ts
@@ -511,13 +506,15 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dbWeb.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ errors
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ formatError.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ http
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ typedCookies.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ logging
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ pino.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mongo.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ neo4j.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pii
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ QuickSignup.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ press.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ prisma.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ redis.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ region
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ effective.ts
@@ -527,6 +524,8 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ csrf.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ services
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ stream
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ validation
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ contentValidation.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vote
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ stats.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ worker.ts
@@ -534,16 +533,21 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ editorAuth.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ middleware.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ models
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Contribution.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ErrorLog.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Contribution.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ErrorLog.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Event.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ MediaItem.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Report.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Source.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Statement.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Stream.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ StreamEvent.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ VotingRule.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ game
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ UserGameStats.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ org.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pii
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ UserDemographics.ts
@@ -555,6 +559,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pages
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ api
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ auth
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ prisma.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ server
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ handlers
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ contributions
@@ -567,6 +572,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ dashboard.css
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ types
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ contribution.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ env.d.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ optional-mods.d.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ shims.step.d.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ utils
@@ -579,6 +585,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ email.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ env.server.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ env.shared.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ errors.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ geo
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ normalize.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ gptTranslator.ts
@@ -590,8 +597,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ memgraphClient.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ mongo
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ votes.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ mongoClient.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ mongoClient.ts.bak.20250831183211
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ mongoPing.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ neo4jClient.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ normalizeStatus.ts
@@ -606,7 +611,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ session.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ tokens.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ translationCache.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ triMongo.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ useTranslation.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ validation.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tailwind.config.js
@@ -616,14 +620,15 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ admin.spec.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vote.stats.test.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tools
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ refactor-imports.js
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vog-next-intl-setup.zip
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ refactor-imports.js
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.json
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.only-fixed.json
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.step-app.json
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.tsbuildinfo
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.tsc-min.json
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.typecheck.json
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ types
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ sanitize-html.d.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ shims.d.ts
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ worker
 ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ package.json
@@ -640,7 +645,6 @@
 ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ testJob.ts
 ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ tsconfig.json
 ‚îú‚îÄ‚îÄ core
-‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ari
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ariClient.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ auth
@@ -650,7 +654,8 @@
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ context
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ LocaleContext.tsx
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ prisma.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mongoose.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ triMongo.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ errors
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ formatError.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ factcheck
@@ -670,7 +675,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ claude.provider.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mistral.provider.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ splitter.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ triage.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ trust.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ types.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ version.ts
@@ -704,7 +708,9 @@
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ schemas
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ editor.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.json
+‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tsconfig.tsbuildinfo
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ utils
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ errors.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hash.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ jsonRepair.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ validation
@@ -716,7 +722,6 @@
 ‚îú‚îÄ‚îÄ features
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ai
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ health.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orchestrator.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ providers
@@ -756,7 +761,6 @@
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ context
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ContextExplorer.tsx
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ contribution
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ README.md
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ SmartContribution.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
@@ -793,9 +797,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ retry.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ textSim.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dashboard
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ AnalyticsPanel.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ApiDashboard.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ DashboardLayout.tsx
@@ -805,10 +807,11 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ SystemMatrix.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ UsageKIPanel.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ SidebarNavAdmin.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ SidebarNavAdmin.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
+‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dist-types
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ tsconfig.tsbuildinfo
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ editor
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ItemClient.ts
@@ -836,9 +839,17 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ factcheck
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ EvidenceList.tsx
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ FactCheckBadge.tsx
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ JurisdictionToggle.tsx
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ SourceBadge.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ UnitList.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ trust
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ registry.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ score.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ types.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ map
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OLMap.tsx
@@ -847,14 +858,12 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ moderation
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ models
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ ModAction.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ngo
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ components
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ EngagementStats.tsx
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ organization
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ REDAME.md
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrgDashboard.tsx
@@ -917,6 +926,8 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ PublicReportType.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ Report.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.ts
+‚îÇ¬†¬† ‚îú‚îÄ‚îÄ routing
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ linkResolver.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ statement
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api.ts
@@ -938,9 +949,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ models
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ stream
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ StreamCard.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ StreamFilters.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ StreamForm.tsx
@@ -950,14 +959,15 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ VideoPlayer.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ data
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ compat.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ streamData.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ utils
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ nationalFlag.ts
+‚îÇ¬†¬† ‚îú‚îÄ‚îÄ stream.zip
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ swipe
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ AlternativeCard.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ImpactIndicator.tsx
@@ -978,7 +988,6 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ components
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ EventList.tsx
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ user
-‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ README.md
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __tests__
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ onboarding.test.ts
@@ -986,6 +995,7 @@
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ LogoutButton.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ UserAdminList.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ UserDashboard.tsx
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ UserHydrator.tsx
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ context
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ UserContext.tsx
@@ -1028,18 +1038,81 @@
 ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.ts
 ‚îú‚îÄ‚îÄ package.json
 ‚îú‚îÄ‚îÄ packages
-‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ analytics
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ projects
 ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ [id].ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ config
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db-core
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ src
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ client.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ generated
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ client.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ client.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ default.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ default.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edge.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edge.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index-browser.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ libquery_engine-darwin-arm64.dylib.node
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ query_engine_bg.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ query_engine_bg.wasm
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ runtime
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edge-esm.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edge.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index-browser.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index-browser.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ library.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ library.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ react-native.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm-compiler-edge.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ wasm-engine-edge.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ schema.prisma
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm-edge-light-loader.mjs
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm-worker-loader.mjs
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ wasm.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.ts
+‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db-web
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ src
-‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ client.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ client.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ generated
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ client.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ client.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ default.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ default.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edge.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edge.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index-browser.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ libquery_engine-darwin-arm64.dylib.node
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ query_engine_bg.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ query_engine_bg.wasm
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ runtime
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edge-esm.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edge.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index-browser.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index-browser.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ library.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ library.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ react-native.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm-compiler-edge.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ wasm-engine-edge.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ schema.prisma
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm-edge-light-loader.mjs
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm-worker-loader.mjs
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ wasm.d.ts
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ wasm.js
+‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ui
-‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ .DS_Store
 ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ package.json
 ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ src
 ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
@@ -1067,12 +1140,11 @@
 ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ tsconfig.build.json
 ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ tsconfig.build.tsbuildinfo
 ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ tsconfig.json
+‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ tsconfig.tsbuildinfo
 ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ tsup.config.ts
 ‚îú‚îÄ‚îÄ pnpm-lock.yaml
 ‚îú‚îÄ‚îÄ pnpm-workspace.yaml
 ‚îú‚îÄ‚îÄ prisma
-‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .DS_Store
-‚îÇ¬†¬† ‚îú‚îÄ‚îÄ .env
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ core
 ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ schema.prisma
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ migrations
@@ -1093,6 +1165,10 @@
 ‚îú‚îÄ‚îÄ scripts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ absurlify.mjs
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build-feature-barrels.mjs
+‚îÇ¬†¬† ‚îú‚îÄ‚îÄ codemods
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cookies-headers.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ prisma-order-to-sortOrder.ts
+‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ prisma-order-to-sortOrder.v2.ts
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ e150_bootstrap_content.sh
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ e150_seed.sh
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ensureIndexes.ts
@@ -1122,4 +1198,4 @@
     ‚îî‚îÄ‚îÄ factcheck
         ‚îî‚îÄ‚îÄ worker.ts
 
-357 directories, 766 files
+374 directories, 825 files
