
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  description: 'description',
  locale: 'locale',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  label: 'label'
};

exports.Prisma.TopicTagScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  tagId: 'tagId'
};

exports.Prisma.ItemTagScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  tagId: 'tagId'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  level: 'level',
  parentId: 'parentId',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegionClosureScalarFieldEnum = {
  id: 'id',
  ancestorId: 'ancestorId',
  descendantId: 'descendantId',
  depth: 'depth'
};

exports.Prisma.ContentItemScalarFieldEnum = {
  id: 'id',
  kind: 'kind',
  topicId: 'topicId',
  locale: 'locale',
  title: 'title',
  text: 'text',
  richText: 'richText',
  sortOrder: 'sortOrder',
  status: 'status',
  authorName: 'authorName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishAt: 'publishAt',
  expireAt: 'expireAt',
  regionMode: 'regionMode',
  regionManualId: 'regionManualId',
  regionAuto: 'regionAuto',
  regionEffectiveId: 'regionEffectiveId',
  validation: 'validation',
  meta: 'meta'
};

exports.Prisma.AnswerOptionScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  label: 'label',
  value: 'value',
  sortOrder: 'sortOrder',
  exclusive: 'exclusive',
  meta: 'meta'
};

exports.Prisma.FactcheckJobScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  contributionId: 'contributionId',
  status: 'status',
  tokensUsed: 'tokensUsed',
  durationMs: 'durationMs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FactcheckClaimScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  text: 'text',
  language: 'language',
  topic: 'topic',
  falsifiable: 'falsifiable',
  frames: 'frames',
  rhetoricalFlags: 'rhetoricalFlags',
  canonicalKey: 'canonicalKey',
  scope: 'scope',
  timeframe: 'timeframe',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderRunScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  provider: 'provider',
  verdict: 'verdict',
  confidence: 'confidence',
  costTokens: 'costTokens',
  latencyMs: 'latencyMs',
  raw: 'raw',
  createdAt: 'createdAt'
};

exports.Prisma.ConsensusRunScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  method: 'method',
  verdict: 'verdict',
  confidence: 'confidence',
  balanceScore: 'balanceScore',
  diversityIndex: 'diversityIndex',
  providers: 'providers',
  createdAt: 'createdAt'
};

exports.Prisma.EvidenceScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  url: 'url',
  domain: 'domain',
  stance: 'stance',
  snapshotHash: 'snapshotHash',
  firstSeenAt: 'firstSeenAt',
  trustScore: 'trustScore'
};

exports.Prisma.VerdictVersionScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  verdict: 'verdict',
  confidence: 'confidence',
  asOf: 'asOf',
  supersedes: 'supersedes'
};

exports.Prisma.FactcheckResultScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  verdict: 'verdict',
  rawOutput: 'rawOutput',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  actor: 'actor',
  at: 'at',
  meta: 'meta'
};

exports.Prisma.ExtractedUnitScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  statementId: 'statementId',
  kind: 'kind',
  text: 'text',
  spanStart: 'spanStart',
  spanEnd: 'spanEnd',
  confidence: 'confidence',
  canonicalKey: 'canonicalKey',
  scope: 'scope',
  timeframe: 'timeframe',
  claimId: 'claimId',
  interest: 'interest',
  triage: 'triage',
  editorNote: 'editorNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FindingScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  summary: 'summary',
  outcome: 'outcome',
  rationale: 'rationale',
  metrics: 'metrics',
  comparedJurisdictions: 'comparedJurisdictions',
  lastChecked: 'lastChecked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ContentKind = exports.$Enums.ContentKind = {
  SWIPE: 'SWIPE',
  EVENT: 'EVENT',
  SUNDAY_POLL: 'SUNDAY_POLL'
};

exports.PublishStatus = exports.$Enums.PublishStatus = {
  draft: 'draft',
  review: 'review',
  published: 'published',
  archived: 'archived'
};

exports.RegionMode = exports.$Enums.RegionMode = {
  AUTO: 'AUTO',
  MANUAL: 'MANUAL'
};

exports.Locale = exports.$Enums.Locale = {
  de: 'de',
  en: 'en',
  fr: 'fr',
  it: 'it',
  es: 'es',
  pl: 'pl',
  uk: 'uk',
  ru: 'ru',
  tr: 'tr',
  hi: 'hi',
  zh: 'zh',
  ar: 'ar'
};

exports.Stance = exports.$Enums.Stance = {
  FOR: 'FOR',
  AGAINST: 'AGAINST',
  NEUTRAL: 'NEUTRAL'
};

exports.UnitKind = exports.$Enums.UnitKind = {
  claim: 'claim',
  opinion: 'opinion',
  policy: 'policy',
  question: 'question',
  prediction: 'prediction'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  VERIFIED: 'VERIFIED',
  REFUTED: 'REFUTED',
  MIXED: 'MIXED',
  STALE: 'STALE'
};

exports.Interest = exports.$Enums.Interest = {
  interested: 'interested',
  ignored: 'ignored',
  undecided: 'undecided'
};

exports.Triage = exports.$Enums.Triage = {
  none: 'none',
  watchlist: 'watchlist',
  escalate: 'escalate'
};

exports.SourceKind = exports.$Enums.SourceKind = {
  USER: 'USER',
  NEWS: 'NEWS',
  SOCIAL: 'SOCIAL',
  API: 'API',
  SYSTEM: 'SYSTEM'
};

exports.StreamKind = exports.$Enums.StreamKind = {
  EVENT: 'EVENT',
  METRIC: 'METRIC',
  LOG: 'LOG'
};

exports.StreamStatus = exports.$Enums.StreamStatus = {
  ACCEPTED: 'ACCEPTED',
  APPLIED: 'APPLIED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  Topic: 'Topic',
  Tag: 'Tag',
  TopicTag: 'TopicTag',
  ItemTag: 'ItemTag',
  Region: 'Region',
  RegionClosure: 'RegionClosure',
  ContentItem: 'ContentItem',
  AnswerOption: 'AnswerOption',
  FactcheckJob: 'FactcheckJob',
  FactcheckClaim: 'FactcheckClaim',
  ProviderRun: 'ProviderRun',
  ConsensusRun: 'ConsensusRun',
  Evidence: 'Evidence',
  VerdictVersion: 'VerdictVersion',
  FactcheckResult: 'FactcheckResult',
  AuditLog: 'AuditLog',
  ExtractedUnit: 'ExtractedUnit',
  Finding: 'Finding'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/RF/VPM25/packages/db-core/src/generated",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/RF/VPM25/prisma/core/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../../prisma/core",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "CORE_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// prisma/core/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../packages/db-core/src/generated\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"CORE_DATABASE_URL\")\n}\n\n//\n// ---------- ENUMS ----------\nenum ContentKind {\n  SWIPE\n  EVENT\n  SUNDAY_POLL\n}\n\nenum PublishStatus {\n  draft\n  review\n  published\n  archived\n}\n\nenum RegionMode {\n  AUTO\n  MANUAL\n}\n\nenum Locale {\n  de\n  en\n  fr\n  it\n  es\n  pl\n  uk\n  ru\n  tr\n  hi\n  zh\n  ar\n}\n\nenum Stance {\n  FOR\n  AGAINST\n  NEUTRAL\n}\n\nenum UnitKind {\n  claim\n  opinion\n  policy\n  question\n  prediction\n}\n\nenum ReviewStatus {\n  OPEN\n  IN_PROGRESS\n  VERIFIED\n  REFUTED\n  MIXED\n  STALE\n}\n\nenum Interest {\n  interested\n  ignored\n  undecided\n}\n\nenum Triage {\n  none\n  watchlist\n  escalate\n}\n\n// --- Stream & Source ---\nenum SourceKind {\n  USER\n  NEWS\n  SOCIAL\n  API\n  SYSTEM\n}\n\nenum StreamKind {\n  EVENT\n  METRIC\n  LOG\n}\n\nenum StreamStatus {\n  ACCEPTED\n  APPLIED\n  REJECTED\n}\n\n//\n// ---------- CONTENT / TOPIC / TAG ----------\nmodel Topic {\n  id          String   @id @default(cuid())\n  slug        String   @unique\n  title       String\n  description String?\n  locale      Locale   @default(de)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  items ContentItem[]\n  tags  TopicTag[]\n\n  @@index([locale])\n  @@index([createdAt])\n}\n\nmodel Tag {\n  id     String     @id @default(cuid())\n  slug   String     @unique\n  label  String\n  topics TopicTag[]\n  items  ItemTag[]\n}\n\nmodel TopicTag {\n  id      String @id @default(cuid())\n  topicId String\n  tagId   String\n\n  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([topicId, tagId])\n  @@index([topicId])\n  @@index([tagId])\n}\n\nmodel ItemTag {\n  id     String @id @default(cuid())\n  itemId String\n  tagId  String\n\n  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([itemId, tagId])\n  @@index([itemId])\n  @@index([tagId])\n}\n\n//\n// ---------- REGION + CLOSURE ----------\nmodel Region {\n  id        String   @id @default(cuid())\n  code      String   @unique\n  name      String\n  level     Int\n  parentId  String?\n  parent    Region?  @relation(\"RegionHierarchy\", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  children  Region[] @relation(\"RegionHierarchy\")\n  meta      Json?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationen zu ContentItem\n  itemsManual    ContentItem[] @relation(\"ItemRegionManual\")\n  itemsEffective ContentItem[] @relation(\"ItemRegionEffective\")\n\n  // Closure-Table\n  ancestors   RegionClosure[] @relation(\"RegionAncestor\")\n  descendants RegionClosure[] @relation(\"RegionDescendant\")\n\n  @@index([level])\n}\n\nmodel RegionClosure {\n  id           String @id @default(cuid())\n  ancestorId   String\n  descendantId String\n  depth        Int\n\n  ancestor   Region @relation(\"RegionAncestor\", fields: [ancestorId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  descendant Region @relation(\"RegionDescendant\", fields: [descendantId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@unique([ancestorId, descendantId])\n  @@index([ancestorId, depth])\n  @@index([descendantId, depth])\n}\n\n//\n// ---------- CONTENT ITEMS ----------\nmodel ContentItem {\n  id   String      @id @default(cuid())\n  kind ContentKind\n\n  topicId String\n  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  locale    Locale  @default(de)\n  title     String?\n  text      String\n  richText  String?\n  sortOrder Int     @default(0) @map(\"order\")\n\n  units ExtractedUnit[]\n\n  status     PublishStatus @default(draft)\n  authorName String?\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  publishAt DateTime?\n  expireAt  DateTime?\n\n  regionMode        RegionMode @default(AUTO)\n  regionManualId    String?\n  regionManual      Region?    @relation(\"ItemRegionManual\", fields: [regionManualId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  regionAuto        Json?\n  regionEffectiveId String?\n  regionEffective   Region?    @relation(\"ItemRegionEffective\", fields: [regionEffectiveId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n\n  validation Json?\n  meta       Json?\n\n  answerOptions AnswerOption[]\n  tags          ItemTag[]\n\n  @@index([kind, status, locale])\n  @@index([publishAt])\n  @@index([topicId])\n  @@index([regionEffectiveId])\n  @@index([createdAt])\n}\n\nmodel AnswerOption {\n  id        String      @id @default(cuid())\n  itemId    String\n  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  label     String\n  value     String\n  sortOrder Int         @default(0) @map(\"order\")\n  exclusive Boolean     @default(false)\n  meta      Json?\n\n  @@unique([itemId, sortOrder])\n  @@unique([itemId, value])\n}\n\n//\n// ---------- FACT-CHECK DOMAIN ----------\nmodel FactcheckJob {\n  id             String   @id @default(cuid())\n  jobId          String   @unique\n  contributionId String\n  status         String // PENDING | PROCESSING | COMPLETED | FAILED\n  tokensUsed     Int      @default(0)\n  durationMs     Int      @default(0)\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  claims  FactcheckClaim[]\n  results FactcheckResult[]\n\n  @@index([status, createdAt])\n}\n\nmodel FactcheckClaim {\n  id              String   @id @default(cuid())\n  jobId           String\n  text            String\n  language        String?\n  topic           String?\n  falsifiable     Boolean  @default(true)\n  frames          String[] @default([])\n  rhetoricalFlags String[] @default([])\n\n  canonicalKey String       @unique\n  scope        String?\n  timeframe    String?\n  status       ReviewStatus @default(OPEN)\n\n  job             FactcheckJob     @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  providerRuns    ProviderRun[]\n  evidences       Evidence[]\n  consensus       ConsensusRun?\n  verdictVersions VerdictVersion[]\n  units           ExtractedUnit[]\n  finding         Finding?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([jobId, createdAt])\n  @@index([status, updatedAt])\n}\n\nmodel ProviderRun {\n  id         String   @id @default(cuid())\n  claimId    String\n  provider   String\n  verdict    String\n  confidence Float\n  costTokens Int      @default(0)\n  latencyMs  Int      @default(0)\n  raw        Json\n  createdAt  DateTime @default(now())\n\n  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@index([claimId, provider])\n  @@index([createdAt])\n}\n\nmodel ConsensusRun {\n  id             String   @id @default(cuid())\n  claimId        String   @unique\n  method         String\n  verdict        String\n  confidence     Float\n  balanceScore   Float\n  diversityIndex Float\n  providers      Json\n  createdAt      DateTime @default(now())\n\n  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n}\n\nmodel Evidence {\n  id           String    @id @default(cuid())\n  claimId      String\n  url          String\n  domain       String\n  stance       Stance\n  snapshotHash String?\n  firstSeenAt  DateTime? @default(now())\n  trustScore   Int?\n\n  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@index([claimId, domain])\n}\n\nmodel VerdictVersion {\n  id         String   @id @default(cuid())\n  claimId    String\n  verdict    String\n  confidence Float\n  asOf       DateTime @default(now())\n  supersedes String?\n\n  claim FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@index([claimId, asOf])\n}\n\nmodel FactcheckResult {\n  id        String   @id @default(cuid())\n  jobId     String\n  verdict   String\n  rawOutput Json\n  createdAt DateTime @default(now())\n\n  job FactcheckJob @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  @@index([jobId, createdAt])\n}\n\nmodel AuditLog {\n  id         String   @id @default(cuid())\n  entityType String\n  entityId   String\n  action     String\n  actor      String\n  at         DateTime @default(now())\n  meta       Json\n\n  @@index([entityType, at])\n}\n\n//\n// ---------- ERWEITERUNG: Extracted Units & Findings ----------\nmodel ExtractedUnit {\n  id String @id @default(cuid())\n\n  // optionale Verknüpfung zu ContentItem (V2)\n  itemId String?\n  item   ContentItem? @relation(fields: [itemId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n\n  // externe Statement-Referenz (optional)\n  statementId String?\n\n  kind       UnitKind\n  text       String\n  spanStart  Int\n  spanEnd    Int\n  confidence Float\n\n  // Deduplizierung\n  canonicalKey String\n  scope        String?\n  timeframe    String?\n\n  // Verknüpfung auf Claim (optional)\n  claimId String?\n  claim   FactcheckClaim? @relation(fields: [claimId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n\n  interest   Interest @default(undecided)\n  triage     Triage   @default(none)\n  editorNote String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([kind, canonicalKey])\n  @@index([interest, triage])\n  @@index([itemId])\n  @@index([statementId])\n}\n\nmodel Finding {\n  id String @id @default(cuid())\n\n  // 1:1 – Finding hält den FK auf Claim\n  claimId String         @unique\n  claim   FactcheckClaim @relation(fields: [claimId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  summary               String\n  outcome               String // LIKELY_TRUE | LIKELY_FALSE | MIXED | UNDETERMINED\n  rationale             String\n  metrics               Json?\n  comparedJurisdictions Json?\n  lastChecked           DateTime @default(now())\n  createdAt             DateTime @default(now())\n  updatedAt             DateTime @updatedAt\n}\n",
  "inlineSchemaHash": "d4b445d90dbd0ef573e1e024dc490a833f0ad84ade077ba9c8d675415bd4d866",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Topic\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"locale\",\"kind\":\"enum\",\"type\":\"Locale\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToTopic\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"TopicTag\",\"relationName\":\"TopicToTopicTag\"}],\"dbName\":null},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topics\",\"kind\":\"object\",\"type\":\"TopicTag\",\"relationName\":\"TagToTopicTag\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ItemTag\",\"relationName\":\"ItemTagToTag\"}],\"dbName\":null},\"TopicTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"TopicToTopicTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"TagToTopicTag\"}],\"dbName\":null},\"ItemTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToItemTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"ItemTagToTag\"}],\"dbName\":null},\"Region\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"RegionHierarchy\"},{\"name\":\"children\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"RegionHierarchy\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"itemsManual\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ItemRegionManual\"},{\"name\":\"itemsEffective\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ItemRegionEffective\"},{\"name\":\"ancestors\",\"kind\":\"object\",\"type\":\"RegionClosure\",\"relationName\":\"RegionAncestor\"},{\"name\":\"descendants\",\"kind\":\"object\",\"type\":\"RegionClosure\",\"relationName\":\"RegionDescendant\"}],\"dbName\":null},\"RegionClosure\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ancestorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"descendantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"depth\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ancestor\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"RegionAncestor\"},{\"name\":\"descendant\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"RegionDescendant\"}],\"dbName\":null},\"ContentItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kind\",\"kind\":\"enum\",\"type\":\"ContentKind\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"ContentItemToTopic\"},{\"name\":\"locale\",\"kind\":\"enum\",\"type\":\"Locale\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"richText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order\"},{\"name\":\"units\",\"kind\":\"object\",\"type\":\"ExtractedUnit\",\"relationName\":\"ContentItemToExtractedUnit\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PublishStatus\"},{\"name\":\"authorName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"publishAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expireAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"regionMode\",\"kind\":\"enum\",\"type\":\"RegionMode\"},{\"name\":\"regionManualId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regionManual\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"ItemRegionManual\"},{\"name\":\"regionAuto\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"regionEffectiveId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regionEffective\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"ItemRegionEffective\"},{\"name\":\"validation\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"answerOptions\",\"kind\":\"object\",\"type\":\"AnswerOption\",\"relationName\":\"AnswerOptionToContentItem\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"ItemTag\",\"relationName\":\"ContentItemToItemTag\"}],\"dbName\":null},\"AnswerOption\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"AnswerOptionToContentItem\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order\"},{\"name\":\"exclusive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null},\"FactcheckJob\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contributionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokensUsed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"durationMs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"claims\",\"kind\":\"object\",\"type\":\"FactcheckClaim\",\"relationName\":\"FactcheckClaimToFactcheckJob\"},{\"name\":\"results\",\"kind\":\"object\",\"type\":\"FactcheckResult\",\"relationName\":\"FactcheckJobToFactcheckResult\"}],\"dbName\":null},\"FactcheckClaim\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"falsifiable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"frames\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rhetoricalFlags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"canonicalKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timeframe\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ReviewStatus\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"FactcheckJob\",\"relationName\":\"FactcheckClaimToFactcheckJob\"},{\"name\":\"providerRuns\",\"kind\":\"object\",\"type\":\"ProviderRun\",\"relationName\":\"FactcheckClaimToProviderRun\"},{\"name\":\"evidences\",\"kind\":\"object\",\"type\":\"Evidence\",\"relationName\":\"EvidenceToFactcheckClaim\"},{\"name\":\"consensus\",\"kind\":\"object\",\"type\":\"ConsensusRun\",\"relationName\":\"ConsensusRunToFactcheckClaim\"},{\"name\":\"verdictVersions\",\"kind\":\"object\",\"type\":\"VerdictVersion\",\"relationName\":\"FactcheckClaimToVerdictVersion\"},{\"name\":\"units\",\"kind\":\"object\",\"type\":\"ExtractedUnit\",\"relationName\":\"ExtractedUnitToFactcheckClaim\"},{\"name\":\"finding\",\"kind\":\"object\",\"type\":\"Finding\",\"relationName\":\"FactcheckClaimToFinding\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ProviderRun\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claimId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verdict\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"costTokens\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"latencyMs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"raw\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"claim\",\"kind\":\"object\",\"type\":\"FactcheckClaim\",\"relationName\":\"FactcheckClaimToProviderRun\"}],\"dbName\":null},\"ConsensusRun\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claimId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verdict\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"balanceScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"diversityIndex\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"providers\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"claim\",\"kind\":\"object\",\"type\":\"FactcheckClaim\",\"relationName\":\"ConsensusRunToFactcheckClaim\"}],\"dbName\":null},\"Evidence\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claimId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"domain\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stance\",\"kind\":\"enum\",\"type\":\"Stance\"},{\"name\":\"snapshotHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstSeenAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trustScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"claim\",\"kind\":\"object\",\"type\":\"FactcheckClaim\",\"relationName\":\"EvidenceToFactcheckClaim\"}],\"dbName\":null},\"VerdictVersion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claimId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verdict\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"asOf\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"supersedes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claim\",\"kind\":\"object\",\"type\":\"FactcheckClaim\",\"relationName\":\"FactcheckClaimToVerdictVersion\"}],\"dbName\":null},\"FactcheckResult\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verdict\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rawOutput\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"FactcheckJob\",\"relationName\":\"FactcheckJobToFactcheckResult\"}],\"dbName\":null},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entityType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entityId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null},\"ExtractedUnit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToExtractedUnit\"},{\"name\":\"statementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kind\",\"kind\":\"enum\",\"type\":\"UnitKind\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"spanStart\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"spanEnd\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"confidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"canonicalKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timeframe\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claimId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claim\",\"kind\":\"object\",\"type\":\"FactcheckClaim\",\"relationName\":\"ExtractedUnitToFactcheckClaim\"},{\"name\":\"interest\",\"kind\":\"enum\",\"type\":\"Interest\"},{\"name\":\"triage\",\"kind\":\"enum\",\"type\":\"Triage\"},{\"name\":\"editorNote\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Finding\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claimId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claim\",\"kind\":\"object\",\"type\":\"FactcheckClaim\",\"relationName\":\"FactcheckClaimToFinding\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"outcome\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rationale\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metrics\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"comparedJurisdictions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"lastChecked\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    CORE_DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['CORE_DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.CORE_DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

