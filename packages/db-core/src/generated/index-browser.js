
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  description: 'description',
  locale: 'locale',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  label: 'label'
};

exports.Prisma.TopicTagScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  tagId: 'tagId'
};

exports.Prisma.ItemTagScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  tagId: 'tagId'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  level: 'level',
  parentId: 'parentId',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegionClosureScalarFieldEnum = {
  id: 'id',
  ancestorId: 'ancestorId',
  descendantId: 'descendantId',
  depth: 'depth'
};

exports.Prisma.ContentItemScalarFieldEnum = {
  id: 'id',
  kind: 'kind',
  topicId: 'topicId',
  locale: 'locale',
  title: 'title',
  text: 'text',
  richText: 'richText',
  sortOrder: 'sortOrder',
  status: 'status',
  authorName: 'authorName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishAt: 'publishAt',
  expireAt: 'expireAt',
  regionMode: 'regionMode',
  regionManualId: 'regionManualId',
  regionAuto: 'regionAuto',
  regionEffectiveId: 'regionEffectiveId',
  validation: 'validation',
  meta: 'meta'
};

exports.Prisma.AnswerOptionScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  label: 'label',
  value: 'value',
  sortOrder: 'sortOrder',
  exclusive: 'exclusive',
  meta: 'meta'
};

exports.Prisma.FactcheckJobScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  contributionId: 'contributionId',
  status: 'status',
  tokensUsed: 'tokensUsed',
  durationMs: 'durationMs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FactcheckClaimScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  text: 'text',
  language: 'language',
  topic: 'topic',
  falsifiable: 'falsifiable',
  frames: 'frames',
  rhetoricalFlags: 'rhetoricalFlags',
  canonicalKey: 'canonicalKey',
  scope: 'scope',
  timeframe: 'timeframe',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderRunScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  provider: 'provider',
  verdict: 'verdict',
  confidence: 'confidence',
  costTokens: 'costTokens',
  latencyMs: 'latencyMs',
  raw: 'raw',
  createdAt: 'createdAt'
};

exports.Prisma.ConsensusRunScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  method: 'method',
  verdict: 'verdict',
  confidence: 'confidence',
  balanceScore: 'balanceScore',
  diversityIndex: 'diversityIndex',
  providers: 'providers',
  createdAt: 'createdAt'
};

exports.Prisma.EvidenceScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  url: 'url',
  domain: 'domain',
  stance: 'stance',
  snapshotHash: 'snapshotHash',
  firstSeenAt: 'firstSeenAt',
  trustScore: 'trustScore'
};

exports.Prisma.VerdictVersionScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  verdict: 'verdict',
  confidence: 'confidence',
  asOf: 'asOf',
  supersedes: 'supersedes'
};

exports.Prisma.FactcheckResultScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  verdict: 'verdict',
  rawOutput: 'rawOutput',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  actor: 'actor',
  at: 'at',
  meta: 'meta'
};

exports.Prisma.ExtractedUnitScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  statementId: 'statementId',
  kind: 'kind',
  text: 'text',
  spanStart: 'spanStart',
  spanEnd: 'spanEnd',
  confidence: 'confidence',
  canonicalKey: 'canonicalKey',
  scope: 'scope',
  timeframe: 'timeframe',
  claimId: 'claimId',
  interest: 'interest',
  triage: 'triage',
  editorNote: 'editorNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FindingScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  summary: 'summary',
  outcome: 'outcome',
  rationale: 'rationale',
  metrics: 'metrics',
  comparedJurisdictions: 'comparedJurisdictions',
  lastChecked: 'lastChecked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Locale = exports.$Enums.Locale = {
  de: 'de',
  en: 'en',
  fr: 'fr',
  it: 'it',
  es: 'es',
  pl: 'pl',
  uk: 'uk',
  ru: 'ru',
  tr: 'tr',
  hi: 'hi',
  zh: 'zh',
  ar: 'ar'
};

exports.ContentKind = exports.$Enums.ContentKind = {
  SWIPE: 'SWIPE',
  EVENT: 'EVENT',
  SUNDAY_POLL: 'SUNDAY_POLL'
};

exports.PublishStatus = exports.$Enums.PublishStatus = {
  draft: 'draft',
  review: 'review',
  published: 'published',
  archived: 'archived'
};

exports.RegionMode = exports.$Enums.RegionMode = {
  AUTO: 'AUTO',
  MANUAL: 'MANUAL'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  VERIFIED: 'VERIFIED',
  REFUTED: 'REFUTED',
  MIXED: 'MIXED',
  STALE: 'STALE'
};

exports.Stance = exports.$Enums.Stance = {
  FOR: 'FOR',
  AGAINST: 'AGAINST',
  NEUTRAL: 'NEUTRAL'
};

exports.UnitKind = exports.$Enums.UnitKind = {
  claim: 'claim',
  opinion: 'opinion',
  policy: 'policy',
  question: 'question',
  prediction: 'prediction'
};

exports.Interest = exports.$Enums.Interest = {
  interested: 'interested',
  ignored: 'ignored',
  undecided: 'undecided'
};

exports.Triage = exports.$Enums.Triage = {
  none: 'none',
  watchlist: 'watchlist',
  escalate: 'escalate'
};

exports.Prisma.ModelName = {
  Topic: 'Topic',
  Tag: 'Tag',
  TopicTag: 'TopicTag',
  ItemTag: 'ItemTag',
  Region: 'Region',
  RegionClosure: 'RegionClosure',
  ContentItem: 'ContentItem',
  AnswerOption: 'AnswerOption',
  FactcheckJob: 'FactcheckJob',
  FactcheckClaim: 'FactcheckClaim',
  ProviderRun: 'ProviderRun',
  ConsensusRun: 'ConsensusRun',
  Evidence: 'Evidence',
  VerdictVersion: 'VerdictVersion',
  FactcheckResult: 'FactcheckResult',
  AuditLog: 'AuditLog',
  ExtractedUnit: 'ExtractedUnit',
  Finding: 'Finding'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
