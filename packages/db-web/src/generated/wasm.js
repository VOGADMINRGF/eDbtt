
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  level: 'level'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  description: 'description',
  locale: 'locale',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  label: 'label'
};

exports.Prisma.TopicTagScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  tagId: 'tagId'
};

exports.Prisma.ItemTagScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  tagId: 'tagId'
};

exports.Prisma.ContentItemScalarFieldEnum = {
  id: 'id',
  kind: 'kind',
  topicId: 'topicId',
  locale: 'locale',
  title: 'title',
  text: 'text',
  richText: 'richText',
  sortOrder: 'sortOrder',
  status: 'status',
  authorName: 'authorName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishAt: 'publishAt',
  expireAt: 'expireAt',
  regionMode: 'regionMode',
  regionManualId: 'regionManualId',
  regionEffectiveId: 'regionEffectiveId',
  regionAuto: 'regionAuto',
  validation: 'validation',
  meta: 'meta'
};

exports.Prisma.AnswerOptionScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  label: 'label',
  value: 'value',
  sortOrder: 'sortOrder',
  exclusive: 'exclusive',
  meta: 'meta'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ContentKind = exports.$Enums.ContentKind = {
  SWIPE: 'SWIPE',
  EVENT: 'EVENT',
  SUNDAY_POLL: 'SUNDAY_POLL'
};

exports.PublishStatus = exports.$Enums.PublishStatus = {
  draft: 'draft',
  review: 'review',
  published: 'published',
  archived: 'archived'
};

exports.RegionMode = exports.$Enums.RegionMode = {
  AUTO: 'AUTO',
  MANUAL: 'MANUAL'
};

exports.Locale = exports.$Enums.Locale = {
  de: 'de',
  en: 'en',
  fr: 'fr',
  it: 'it',
  es: 'es',
  pl: 'pl',
  uk: 'uk',
  ru: 'ru',
  tr: 'tr',
  hi: 'hi',
  zh: 'zh',
  ar: 'ar'
};

exports.Prisma.ModelName = {
  Region: 'Region',
  Topic: 'Topic',
  Tag: 'Tag',
  TopicTag: 'TopicTag',
  ItemTag: 'ItemTag',
  ContentItem: 'ContentItem',
  AnswerOption: 'AnswerOption'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/RF/VPM25/packages/db-web/src/generated",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/RF/VPM25/prisma/web/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../../prisma/web",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "WEB_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// prisma/web/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../packages/db-web/src/generated\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"WEB_DATABASE_URL\")\n}\n\n//\n// ---------- ENUMS ----------\nenum ContentKind {\n  SWIPE\n  EVENT\n  SUNDAY_POLL\n}\n\nenum PublishStatus {\n  draft\n  review\n  published\n  archived\n}\n\nenum RegionMode {\n  AUTO\n  MANUAL\n}\n\nenum Locale {\n  de\n  en\n  fr\n  it\n  es\n  pl\n  uk\n  ru\n  tr\n  hi\n  zh\n  ar\n}\n\n//\n// ---------- REGION ----------\nmodel Region {\n  id    String @id @default(cuid())\n  code  String @unique\n  name  String\n  level Int\n\n  // Back-Relations zu ContentItem (benannte Relationen)\n  manualItems    ContentItem[] @relation(\"ContentItemRegionManual\")\n  effectiveItems ContentItem[] @relation(\"ContentItemRegionEffective\")\n\n  @@index([code])\n}\n\n//\n// ---------- CONTENT / TOPIC / TAG ----------\nmodel Topic {\n  id          String   @id @default(cuid())\n  slug        String   @unique\n  title       String\n  description String?\n  locale      Locale   @default(de)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  items ContentItem[]\n  tags  TopicTag[]\n\n  @@index([locale])\n  @@index([createdAt])\n}\n\nmodel Tag {\n  id     String     @id @default(cuid())\n  slug   String     @unique\n  label  String\n  topics TopicTag[]\n  items  ItemTag[]\n}\n\nmodel TopicTag {\n  id      String @id @default(cuid())\n  topicId String\n  tagId   String\n\n  topic Topic @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([topicId, tagId])\n  @@index([topicId])\n  @@index([tagId])\n}\n\nmodel ItemTag {\n  id     String @id @default(cuid())\n  itemId String\n  tagId  String\n\n  item ContentItem @relation(fields: [itemId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n  tag  Tag         @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  @@unique([itemId, tagId])\n  @@index([itemId])\n  @@index([tagId])\n}\n\nmodel ContentItem {\n  id   String      @id @default(cuid())\n  kind ContentKind\n\n  topicId String\n  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Restrict, onUpdate: Cascade)\n\n  locale    Locale  @default(de)\n  title     String?\n  text      String\n  richText  String?\n  sortOrder Int     @default(0) @map(\"order\") // statt \"order\"\n\n  status     PublishStatus @default(draft)\n  authorName String?\n  createdAt  DateTime      @default(now())\n  updatedAt  DateTime      @updatedAt\n\n  publishAt DateTime?\n  expireAt  DateTime?\n\n  regionMode        RegionMode @default(AUTO)\n  regionManualId    String?\n  regionEffectiveId String?\n  regionAuto        Json?\n\n  // --- benannte Relationen zu Region ---\n  regionManual    Region? @relation(\"ContentItemRegionManual\", fields: [regionManualId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  regionEffective Region? @relation(\"ContentItemRegionEffective\", fields: [regionEffectiveId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n\n  validation Json?\n  meta       Json?\n\n  answerOptions AnswerOption[]\n  tags          ItemTag[]\n\n  @@index([kind, status, locale])\n  @@index([publishAt])\n  @@index([topicId])\n  @@index([createdAt])\n  @@index([regionManualId])\n  @@index([regionEffectiveId])\n}\n\nmodel AnswerOption {\n  id        String      @id @default(cuid())\n  itemId    String\n  item      ContentItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  label     String\n  value     String\n  sortOrder Int         @default(0) @map(\"order\")\n  exclusive Boolean     @default(false)\n  meta      Json?\n\n  @@unique([itemId, sortOrder])\n  @@unique([itemId, value])\n}\n",
  "inlineSchemaHash": "72a10dbf8efb9c8cca4d0cba0cf116ac3a2c3200371114d838f69c11c82e7a3b",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Region\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"manualItems\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemRegionManual\"},{\"name\":\"effectiveItems\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemRegionEffective\"}],\"dbName\":null},\"Topic\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"locale\",\"kind\":\"enum\",\"type\":\"Locale\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToTopic\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"TopicTag\",\"relationName\":\"TopicToTopicTag\"}],\"dbName\":null},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topics\",\"kind\":\"object\",\"type\":\"TopicTag\",\"relationName\":\"TagToTopicTag\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ItemTag\",\"relationName\":\"ItemTagToTag\"}],\"dbName\":null},\"TopicTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"TopicToTopicTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"TagToTopicTag\"}],\"dbName\":null},\"ItemTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"ContentItemToItemTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"ItemTagToTag\"}],\"dbName\":null},\"ContentItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kind\",\"kind\":\"enum\",\"type\":\"ContentKind\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"ContentItemToTopic\"},{\"name\":\"locale\",\"kind\":\"enum\",\"type\":\"Locale\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"richText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PublishStatus\"},{\"name\":\"authorName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"publishAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expireAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"regionMode\",\"kind\":\"enum\",\"type\":\"RegionMode\"},{\"name\":\"regionManualId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regionEffectiveId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regionAuto\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"regionManual\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"ContentItemRegionManual\"},{\"name\":\"regionEffective\",\"kind\":\"object\",\"type\":\"Region\",\"relationName\":\"ContentItemRegionEffective\"},{\"name\":\"validation\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"answerOptions\",\"kind\":\"object\",\"type\":\"AnswerOption\",\"relationName\":\"AnswerOptionToContentItem\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"ItemTag\",\"relationName\":\"ContentItemToItemTag\"}],\"dbName\":null},\"AnswerOption\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ContentItem\",\"relationName\":\"AnswerOptionToContentItem\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sortOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order\"},{\"name\":\"exclusive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    WEB_DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['WEB_DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.WEB_DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

