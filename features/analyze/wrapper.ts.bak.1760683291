// VPM25/apps/web/src/features/analyze/wrapper.ts
import { z } from "zod";
import { DomainCanon, TopicCanon, ClaimType, PolicyInstrument, BallotDimension, DOMAIN_CANON, TOPIC_CANON } from "./canon";

/** === Schemas === */
export const ClaimSchemaV4 = z.object({
  id: z.string().min(8),
  text: z.string().min(6).max(180)
    .refine(s => !/[?]/.test(s), "Keine Fragen.")
    .refine(s => !/\b(und|oder)\b/i.test(s), "Nur eine Kernaussage.")
    .refine(s => /ist|hat|erhöht|senkt|verbietet|erlaubt|führt zu|fordert/i.test(s), "Prüfbares Verb fehlt."),
  categoryMain: DomainCanon,
  categorySubs: z.array(TopicCanon).max(2).default([]),
  claimType: ClaimType.nullable().default(null),
  policyInstrument: PolicyInstrument.nullable().default(null),
  ballotDimension: BallotDimension.nullable().default(null),
  timeframe: z.string().min(4).max(20).nullable().default(null),
  targets: z.array(z.string().min(2).max(40)).max(3).default([]),
  evidence: z.array(z.string().min(1).max(40)).max(6).default([]),
  region: z.string().min(2).max(120).nullable().default(null),
  authority: z.string().min(2).max(160).nullable().default(null),
  confidence: z.number().min(0).max(1).default(0.6),
});

export const OutputSchemaV4 = z.object({
  language: z.literal("de"),
  mainTopic: DomainCanon.nullable().default(null),
  subTopics: z.array(TopicCanon).max(3).default([]),
  regionHint: z.string().min(2).max(120).nullable().default(null),
  claims: z.array(ClaimSchemaV4).max(8).default([]),
});

export type ExtractOutputV4 = z.infer<typeof OutputSchemaV4>;

/** === Helpers === */
export function normalize(s: string) {
  return s.toLowerCase()
    .normalize("NFKD").replace(/[\u0300-\u036f]/g, "")
    .replace(/[^\p{L}\p{N}\s]/gu, " ")
    .replace(/\b(der|die|das|und|oder|ein|eine|mit|für|zu|im|in|auf|von|den|dem|des)\b/gu, " ")
    .replace(/\s+/g, " ").trim();
}
export function claimId(text: string, categoryMain: string) {
  const str = normalize(text) + "::" + categoryMain;
  let h = 5381; for (let i=0;i<str.length;i++) h = ((h<<5)+h) ^ str.charCodeAt(i);
  return ("c" + (h>>>0).toString(36)).padEnd(10,"0");
}
export function salienceScore(s: string): number {
  let sc = 0;
  if (/\b(Berlin|Hamburg|Bayern|NRW|Sachsen|Hessen|EU|Brüssel|Köln|München|Stuttgart)\b/i.test(s)) sc++;
  if (/\b(BMG|Bundestag|Landtag|Gemeinde|KV|EU-Kommission|Parlament)\b/i.test(s)) sc++;
  if (/\b(Feiertag|Karneval|Oktoberfest|Landtagswahl|Bürgerschaftswahl|Ramadan|Weihnachten|Pride)\b/i.test(s)) sc++;
  if (/\b(Standort|Werk|Filiale|Hauptsitz)\b/i.test(s)) sc++;
  return sc;
}
export function extractEvidence(s: string): string[] {
  const hits = new Set<string>();
  (s.match(/\b\d{1,3}(?:[.\s]\d{3})*(?:,\d+)?\b/g) || []).forEach(v => hits.add(v));
  (s.match(/\b\d{2}\.\d{2}\.\d{4}\b/g) || []).forEach(v => hits.add(v));
  (s.match(/\b\d{1,3}\s?%\b/g) || []).forEach(v => hits.add(v));
  (s.match(/§\s?\d+[a-z]?/gi) || []).forEach(v => hits.add(v));
  return Array.from(hits).slice(0,6);
}

/** sehr kompakte Mapping-Liste (Regex → Domain/Topic) – nach Bedarf erweitern */
type Hit = { domain: typeof DOMAIN_CANON[number], topic?: typeof TOPIC_CANON[number] };
const MAP: Array<[RegExp, Hit]> = [
  [/ehrenamt|verein|initiative/i, { domain: "Demokratie & Beteiligung", topic: "Ehrenamt" }],
  [/katastroph|zivilschutz|sirene|bbk/i, { domain: "Innere Sicherheit & Polizei", topic: "Katastrophenschutz" }],
  [/drogenpolitik|cannabis|sucht/i, { domain: "Gesundheitspolitik", topic: "Drogenpolitik" }],
  [/barrierefrei|inklusion|behindert/i, { domain: "Familie & Gleichstellung", topic: "Barrierefreiheit" }],
  [/\b(mica|krypto|bitcoin|wallet|defi)\b/i, { domain: "Finanzen & Steuern", topic: "Krypto-Regulierung" }],
  [/geldwäsche|aml|fiu/i, { domain: "Finanzen & Steuern", topic: "Geldwäschebekämpfung" }],
  [/desinformation|falschinfo|dsa|plattformaufsicht/i, { domain: "Digitalisierung & Netzpolitik", topic: "Plattformaufsicht/DSA" }],
  [/klimaanpass|hochwasser|hitzeplan/i, { domain: "Klima & Umweltschutz", topic: "Klimaanpassung" }],
  [/biodivers|artensterben|naturschutz/i, { domain: "Klima & Umweltschutz", topic: "Biodiversität" }],
  [/smart ?city|digitaler zwilling/i, { domain: "Wohnen & Stadtentwicklung", topic: "Smart City" }],
  [/obdachlos|wohnungslos/i, { domain: "Wohnen & Stadtentwicklung", topic: "Obdachlosigkeit" }],
  [/fachkr[aä]fte|einwanderung|blue card/i, { domain: "Migration & Integration", topic: "Fachkräfteeinwanderung" }],
  [/wehrpflicht|zivildienst/i, { domain: "Verteidigung & Bundeswehr", topic: "Wehrpflicht" }],
  [/rüstungsbeschaff|2\s?%|nato/i, { domain: "Verteidigung & Bundeswehr", topic: "NATO-2%" }],
  [/tourismus|g[aä]stetaxe|kurabgabe/i, { domain: "Wirtschaftspolitik", topic: "Tourismusförderung" }],
  [/vergabe|beschaffung|vergaberecht/i, { domain: "Öffentliche Verwaltung & E-Gov", topic: "Öffentliche Beschaffung" }],
  // Basis-Themen (häufig)
  [/bürgergeld|grundsicherung/i, { domain: "Soziales & Grundsicherung", topic: "Bürgergeld" }],
  [/deutschlandticket|49 ?€|49e/i, { domain: "Verkehr & Infrastruktur", topic: "Deutschlandticket" }],
  [/wärmeplanung/i, { domain: "Energiepolitik", topic: "Wärmeplanung kommunal" }],
  [/zeitarbeit|leiharbeit/i, { domain: "Arbeit & Beschäftigung", topic: "Zeitarbeit" }],
  [/kv\b|kassenärzt|hausarzt|primärversorgung/i, { domain: "Gesundheitspolitik", topic: "Primärversorgung" }],
];

/** Widersprüche (erhöht vs senkt etc.) */
const OPPOSITES: Array<[RegExp, RegExp]> = [
  [/\berhöht\b/i, /\bsenkt\b/i],
  [/\bverbietet\b/i, /\berlaubt\b/i],
  [/\bsteigert\b/i, /\breduziert\b/i],
];
export function findContradictions(claims: {text: string; categoryMain: string;}[]) {
  const out: Array<[string,string]> = [];
  for (let i=0;i<claims.length;i++) for (let j=i+1;j<claims.length;j++) {
    if (claims[i].categoryMain !== claims[j].categoryMain) continue;
    for (const [a,b] of OPPOSITES) {
      if (a.test(claims[i].text) && b.test(claims[j].text)) out.push([claims[i].text, claims[j].text]);
      if (a.test(claims[j].text) && b.test(claims[i].text)) out.push([claims[j].text, claims[i].text]);
    }
  }
  return out;
}

/** Kern: extrahiere Claims aus Rohtext (heuristisch, offline) */
export function extractV4(text: string) {
  const parts = text.split(/(?<=[.!?])\s+|\n+/).map(s => s.trim()).filter(Boolean).slice(0, 24);
  const seen = new Set<string>();
  const claims: z.infer<typeof ClaimSchemaV4>[] = [];

  for (const raw of parts) {
    let hit: Hit | null = null;
    for (const [re, h] of MAP) { if ((re as RegExp).test(raw)) { hit = h; break; } }
    if (!hit) continue;

    if (/[?]/.test(raw)) continue;
    if (/\b(und|oder)\b/i.test(raw)) continue;
    if (!/ist|hat|erhöht|senkt|verbietet|erlaubt|führt zu|fordert/i.test(raw)) continue;
    const text180 = raw.slice(0, 180);

    const id = claimId(text180, hit.domain);
    const key = normalize(text180);
    if (seen.has(key)) continue; seen.add(key);

    const sal = salienceScore(raw);
    const region = sal >= 2 ? (raw.match(/\b(Berlin|Hamburg|Bayern|NRW|Sachsen|Hessen|EU|Brüssel|Köln|München|Stuttgart)\b/i)?.[0] ?? null) : null;
    const authority = sal >= 2 ? (raw.match(/\b(BMG|Bundestag|Landtag|Gemeinde|KV|EU-Kommission|Parlament)\b/i)?.[0] ?? null) : null;

    const claim = {
      id,
      text: text180,
      categoryMain: hit.domain,
      categorySubs: hit.topic ? [hit.topic] : [],
      claimType: /soll|muss|einführen|abschaffen|verbieten|erlauben/i.test(raw) ? "Forderung" :
                 /\bwird\b/i.test(raw) ? "Prognose" :
                 /\b(ist|hat|beträgt)\b/i.test(raw) ? "Fakt" : null,
      policyInstrument:
        /\bsteuer|abgabe|co2-preis|abgaben\b/i.test(raw) ? "Steuer/Abgabe" :
        /\bfördern|subvention|zuschuss\b/i.test(raw) ? "Subvention/Förderung" :
        /\bverbot|limit|obergrenze\b/i.test(raw) ? "Verbot/Limit" :
        /\berlaubt|ausnahme\b/i.test(raw) ? "Erlaubnis/Ausnahme" :
        /\bbericht|register|transparenz|meldepflicht\b/i.test(raw) ? "Transparenz/Reporting" :
        /\binvest\b/i.test(raw) ? "Investition" :
        /\borganisation|zuständigkeit|verfahren|prozess\b/i.test(raw) ? "Organisation/Prozess" :
        /\bnorm|standard|pflicht\b/i.test(raw) ? "Standard/Norm" : null,
      ballotDimension:
        /\bhaushalt|etat|budget\b/i.test(raw) ? "Budget" :
        /\bgesetz|satzung|verordnung|regel\b/i.test(raw) ? "Gesetz/Regel" :
        /\bpersonal|behörde|zuständigkeit\b/i.test(raw) ? "Personal/Organisation" :
        /\binfrastruktur|bau|netz|anlage\b/i.test(raw) ? "Infrastruktur" :
        /\bresolution|appell|symbol\b/i.test(raw) ? "Symbol/Resolution" : null,
      timeframe: /\b(sofort|kurzfristig|mittelfristig|langfristig)\b/i.test(raw)
        ? raw.match(/\b(sofort|kurzfristig|mittelfristig|langfristig)\b/i)![0]
        : null,
      targets: (raw.match(/\b(Mieter|Ärzte|Schüler|Pflegende|Pendler|Landwirte)\b/gi) || []).slice(0,3),
      evidence: extractEvidence(raw),
      region, authority,
      confidence: 0.6 + (hit.topic ? 0.05 : 0) - (text180.length > 160 ? 0.05 : 0),
    };

    const parsed = ClaimSchemaV4.safeParse(claim);
    if (parsed.success) claims.push(parsed.data);
    if (claims.length >= 8) break;
  }

  let mainTopic: typeof DOMAIN_CANON[number] | null = null;
  if (claims.length) {
    const count = new Map<string, number>();
    for (const c of claims) count.set(c.categoryMain, (count.get(c.categoryMain) || 0) + 1);
    mainTopic = [...count].sort((a,b)=>b[1]-a[1])[0][0] as any;
  }

  return OutputSchemaV4.parse({
    language: "de",
    mainTopic,
    subTopics: Array.from(new Set(claims.flatMap(c => c.categorySubs))).slice(0,3),
    regionHint: null,
    claims,
  });
}
