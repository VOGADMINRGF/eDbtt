/** Gemeinsame Typen für die Orchestrierung */

export type JurisdictionLevel = "EU" | "Bund" | "Land" | "Kommune";
export type SourceType = "amtlich" | "presse" | "forschung";

export type AtomicClaim = {
  id: string;                // canonical hash
  text: string;              // 1-Satz, B1/B2
  sachverhalt?: string|null;
  zeitraum?: string|null;
  ort?: string|null;
  ebene?: JurisdictionLevel|null; // EU/Bund/Land/Kommune
  betroffene?: string[];     // Gruppen
  messgroesse?: string|null; // Kennzahl, falls genannt
  unsicherheiten?: string[]; // modelliert Unsicherheit transparent
};

export type EvidenceSlot = {
  source_type: SourceType;
  query: string;
  erwartete_kennzahl?: string|null;
  jahr?: string|null;
};

export type Perspectives = {
  pro: string[];
  contra: string[];
  alternative: string[]; // konstruktive Umsetzungsoption
};

export type EditorialScore = {
  praezision: number;        // 0..1
  pruefbarkeit: number;
  relevanz: number;
  lesbarkeit: number;
  ausgewogenheit: number;
  gruende: string[];         // kurze Begründungen für Transparenz
  total: number;             // Summe / Mittel
};

export type EnrichedClaim = AtomicClaim & {
  zustandigkeit?: { ebene: JurisdictionLevel, organ: string, begruendung: string } | null;
  evidence: EvidenceSlot[];
  perspectives: Perspectives;
  editorial: EditorialScore;
};

export type OrchestratorResult = {
  claims: EnrichedClaim[];
  _meta: {
    ok: boolean;
    tookMs: number;
    model?: string|null;
    prompt_version?: string;
    orchestrator_commit?: string|null;
    fallbackUsed?: boolean;
    steps?: { name: string; ms: number; ok: boolean; note?: string }[];
  }
};
